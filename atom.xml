<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wiki</title>
  
  <subtitle>Quick notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://syhyz1990.github.io/"/>
  <updated>2018-06-07T08:59:34.024Z</updated>
  <id>https://syhyz1990.github.io/</id>
  
  <author>
    <name>北极丶企鹅</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>node.js中文资料导航</title>
    <link href="https://syhyz1990.github.io/wiki/node-js.html"/>
    <id>https://syhyz1990.github.io/wiki/node-js.html</id>
    <published>2018-06-07T07:27:27.000Z</published>
    <updated>2018-06-07T08:59:34.024Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><ul><li><a href="http://www.nodejs.org/" target="_blank" rel="noopener">HomePage</a></li><li><a href="http://www.infoq.com/cn/articles/what-is-nodejs" target="_blank" rel="noopener">Infoq深入浅出Node.js系列（进阶必读）</a></li><li><a href="http://davidcai1993.gitbooks.io/iojs-api-doc-in-chinese/content/" target="_blank" rel="noopener">Io.js中文文档</a></li><li><a href="http://nodeapi.ucdok.com/#/api/" target="_blank" rel="noopener">Node.js中文文档</a></li><li><a href="http://www.nodebeginner.org/index-zh-cn.html" target="_blank" rel="noopener">Node入门</a></li><li><a href="http://www.ibm.com/developerworks/cn/web/1201_wangqf_nodejs/" target="_blank" rel="noopener">被误解的 Node.js</a></li><li><a href="http://deadhorse.me/nodejs/2012/10/08/c_addon_in_nodejs_node_gyp.html" target="_blank" rel="noopener">Node.js C++ addon编写实战系列</a></li><li><a href="https://nodejsmodules.org/" target="_blank" rel="noopener">热门node.js模块排行榜，方便找出你想要的模块</a></li><li><a href="http://cnodejs.org/topic/518b679763e9f8a5424406e9" target="_blank" rel="noopener">nodejs多线程，真正的非阻塞</a></li><li><a href="http://cnodejs.org/topic/5189ff4f63e9f8a54207f60c" target="_blank" rel="noopener">浅析nodejs的buffer类</a></li><li><a href="http://cnodejs.org/topic/519ceb5263e9f8a542c19764" target="_blank" rel="noopener">利用libuv编写异步多线程的addon实例</a></li><li><a href="http://weizhifeng.net/node-js-exports-vs-module-exports.html" target="_blank" rel="noopener">Node.js中exports与module.exports的区别</a></li><li><a href="http://cnodejs.org/topic/5293550ca6957a08096508fb" target="_blank" rel="noopener">Node.js http 管道拒绝服务漏洞</a></li><li><a href="http://yaohuiji.com/2013/01/08/pro-node-article-list/" target="_blank" rel="noopener">Node.js高级编程</a></li><li><a href="https://github.com/dead-horse/node-style-guide" target="_blank" rel="noopener">Node.js代码风格指南</a></li><li><a href="http://nqdeng.github.io/7-days-nodejs" target="_blank" rel="noopener">七天学会NodeJS</a></li><li><a href="http://cwbuecheler.com/web/tutorials/2013/node-express-mongo/" target="_blank" rel="noopener">前端快速掌握 nodejs+mongodb+express+jade</a></li></ul><h2 id="业界新闻"><a href="#业界新闻" class="headerlink" title="业界新闻"></a>业界新闻</h2><ul><li><a href="http://www.csdn.net/article/2013-12-17/2817827-10-surprising-Node.js-projects" target="_blank" rel="noopener">NodeJS无所不能：细数10个令人惊讶的NodeJS开源项目</a></li><li><a href="http://www.csdn.net/article/2013-05-20/2815364-how-ebays-first-node-js-application-were-built" target="_blank" rel="noopener">看eBay如何评价他们的Node.js首次尝鲜</a></li><li><a href="http://www.csdn.net/article/2012-05-03/2805296" target="_blank" rel="noopener">程序员如何说服老板采用Node.js？</a></li><li><a href="http://www.csdn.net/article/2012-08-21/2808861" target="_blank" rel="noopener">百万级并发 Node.js也能行</a></li><li><a href="http://www.rockdai.com/?p=596" target="_blank" rel="noopener">高性能Node.js：来自LinkedIn Mobile的10条优化建议</a></li><li><a href="http://www.csdn.net/article/2013-11-25/2817617-PayPal-Kraken-Nodejs-Framework" target="_blank" rel="noopener">Kraken：改变PayPal开发文化的Node.js框架</a></li><li><a href="http://www.iteye.com/news/28358" target="_blank" rel="noopener">Groupon抛弃Rails，转向Node.js</a> </li><li><a href="https://www.paypal-engineering.com/2013/11/22/node-js-at-paypal/" target="_blank" rel="noopener">PayPal为什么从Java迁移到Node.js，性能提高一倍，文件代码减少44%</a></li></ul><h2 id="经验分享"><a href="#经验分享" class="headerlink" title="经验分享"></a>经验分享</h2><ul><li><a href="http://www.csdn.net/article/2012-07-30/2807863" target="_blank" rel="noopener">SDCC讲师专访：淘宝朴灵谈Node.js</a></li><li><a href="http://www.programmer.com.cn/13844/" target="_blank" rel="noopener">Node.js的核心与红利</a></li><li><a href="http://www.linuxeden.com/html/news/20130109/134241.html" target="_blank" rel="noopener">QCon北京2013 Node.js专题出品人朴灵专访</a></li><li><a href="http://ittechnical.sinaapp.com/category/node-js/" target="_blank" rel="noopener">一个周末掌握IT前沿技术之node.js篇</a></li><li><a href="http://cnodejs.org/topic/515b009a6d38277306192e4e" target="_blank" rel="noopener">用node+express搭建多人博客教程系列</a></li><li><a href="http://www.infoq.com/cn/news/2011/11/tyq-nodejs-static-file-server" target="_blank" rel="noopener">Node.js静态文件服务器实战</a></li><li><a href="http://cnodejs.org/topic/51ce18bb73c638f3706ca7bb#51ce818c73c638f3707422e6" target="_blank" rel="noopener">人人和微博登录模块的实现</a></li><li><a href="http://blog.sina.com.cn/s/blog_6801fe420101qaz2.html" target="_blank" rel="noopener">《京JS》会议 &amp; V8上的JS优化</a></li><li><a href="http://cnodejs.org/topic/505acc95fd37ea6b2f1813de" target="_blank" rel="noopener">沪 JS 国内讲师的 PPT 收集</a></li><li><a href="http://cnodejs.org/topic/525216a3f29c7bbd3c877cbf" target="_blank" rel="noopener">给Node.js新手的7条小建议</a></li></ul><h2 id="模块导航"><a href="#模块导航" class="headerlink" title="模块导航"></a>模块导航</h2><h3 id="web服务器框架"><a href="#web服务器框架" class="headerlink" title="web服务器框架"></a>web服务器框架</h3><h4 id="最流行的web框架Express"><a href="#最流行的web框架Express" class="headerlink" title="最流行的web框架Express"></a>最流行的web框架Express</h4><ul><li><a href="http://expressjs.com/" target="_blank" rel="noopener">HomePage</a></li><li><a href="http://cnodejs.org/topic/51c3ef9f73c638f37058e6bc" target="_blank" rel="noopener">加装涡轮，提速expressjs</a></li><li><a href="http://cnodejs.org/topic/4fce14e0e5e72c25180b51d1" target="_blank" rel="noopener">给 connect 的 static 模块加上url路径前缀</a></li><li><a href="http://cnodejs.org/topic/515535485dff253b374288da" target="_blank" rel="noopener">研究nodeclub 登陆验证逻辑的一些心得</a></li><li><a href="http://www.csser.com/board/4f77e6f996ca600f78000936" target="_blank" rel="noopener">Express.js 中文入门指引手册</a></li><li><a href="http://cnodejs.org/topic/51a2f562776b2e7f035f2850" target="_blank" rel="noopener">Connect架构初探 for 新手</a></li><li><a href="http://cnodejs.org/topic/51d51cd8d44cbfa3047926ba" target="_blank" rel="noopener">使用 Express + Socket.IO 搭建多人聊天室</a></li></ul><h4 id="国人开源web框架rrestjs"><a href="#国人开源web框架rrestjs" class="headerlink" title="国人开源web框架rrestjs"></a>国人开源web框架rrestjs</h4><ul><li><a href="http://rrest.cnodejs.net/" target="_blank" rel="noopener">HomePage</a></li></ul><h4 id="实时应用web框架meteor"><a href="#实时应用web框架meteor" class="headerlink" title="实时应用web框架meteor"></a>实时应用web框架meteor</h4><ul><li><a href="http://meteor.com/" target="_blank" rel="noopener">HomePage</a></li><li><a href="http://cnodejs.org/topic/51b030d9555d34c678e5fb2e" target="_blank" rel="noopener">Meteor-DDP翻译</a></li><li><a href="http://cnodejs.org/topic/519b655a63e9f8a5429cb70e" target="_blank" rel="noopener">Meteor 非官方中文文档（不包含API部分）</a></li><li><a href="http://cnodejs.org/topic/50d0466b637ffa4155aed34f" target="_blank" rel="noopener">基于meteor开发的开源项目列表</a></li></ul><h4 id="基于Express的实时MVC框架Sails"><a href="#基于Express的实时MVC框架Sails" class="headerlink" title="基于Express的实时MVC框架Sails"></a>基于Express的实时MVC框架Sails</h4><ul><li><a href="https://github.com/balderdashy/sails" target="_blank" rel="noopener">HomePage</a></li></ul><h4 id="Koa，下一代-Node-js-web-框架"><a href="#Koa，下一代-Node-js-web-框架" class="headerlink" title="Koa，下一代 Node.js web 框架"></a>Koa，下一代 Node.js web 框架</h4><ul><li><a href="http://koajs.com" target="_blank" rel="noopener">HomePage</a></li><li><a href="https://github.com/turingou/koa-guide" target="_blank" rel="noopener">koa-guide</a></li><li><a href="https://github.com/dead-horse/koa-middlewares" target="_blank" rel="noopener">koa-middlewares</a> koa常用中间件集合</li></ul><h3 id="Mysql-老牌关系型数据库"><a href="#Mysql-老牌关系型数据库" class="headerlink" title="Mysql 老牌关系型数据库"></a>Mysql 老牌关系型数据库</h3><ul><li><a href="https://github.com/felixge/node-mysql" target="_blank" rel="noopener">HomePage</a></li><li><a href="http://cnodejs.org/topic/51a8c64d555d34c67835037d" target="_blank" rel="noopener">mysql处理BIGINT里面的一个坑</a></li><li><a href="http://cnodejs.org/topic/51676ac26d38277306fe7c85" target="_blank" rel="noopener">使用node-mysql中的连接池</a></li><li><a href="http://cnodejs.org/topic/516b77e86d382773064266df" target="_blank" rel="noopener">mysql自动断开解决办法</a></li></ul><h3 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h3><ul><li><a href="https://github.com/mongodb/node-mongodb-native" target="_blank" rel="noopener">node-mongodb-native</a></li><li><a href="https://github.com/LearnBoost/mongoose" target="_blank" rel="noopener">mongoose</a></li><li><a href="http://cnodejs.org/topic/51508570604b3d512113f1b3" target="_blank" rel="noopener">如何使用mongoose对一个100万+的mongodb的表进行遍历操作</a></li><li><a href="http://cnodejs.org/topic/5190d61263e9f8a542acd83b" target="_blank" rel="noopener">[技术讨论]mongodb驱动的正确使用方法</a></li></ul><p>###异步流程处理</p><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><ul><li><a href="https://github.com/caolan/async" target="_blank" rel="noopener">HomePage</a></li><li><a href="http://freewind.me/blog/20120518/932.html" target="_blank" rel="noopener">Async中文详解</a></li></ul><h4 id="eventproxy"><a href="#eventproxy" class="headerlink" title="eventproxy"></a>eventproxy</h4><ul><li><a href="https://github.com/JacksonTian/eventproxy" target="_blank" rel="noopener">HomePage</a></li></ul><h4 id="Q-Promise-异步模式"><a href="#Q-Promise-异步模式" class="headerlink" title="Q Promise 异步模式"></a>Q Promise 异步模式</h4><ul><li><a href="https://github.com/kriskowal/q" target="_blank" rel="noopener">HomePage</a></li><li><a href="http://www.ituring.com.cn/article/54547" target="_blank" rel="noopener">在Node.js 中用 Q 实现Promise – Callbacks之外的另一种选择</a></li></ul><h4 id="co"><a href="#co" class="headerlink" title="co"></a>co</h4><ul><li><a href="https://github.com/visionmedia/co" target="_blank" rel="noopener">HomePage</a></li><li><a href="http://www.html-js.com/article/column/77" target="_blank" rel="noopener">深入理解 Yield</a></li><li><a href="https://github.com/visionmedia/co/wiki" target="_blank" rel="noopener">co wiki</a></li></ul><h4 id="异步解决方案示例"><a href="#异步解决方案示例" class="headerlink" title="异步解决方案示例"></a><a href="https://github.com/dead-horse/callback_hell" target="_blank" rel="noopener">异步解决方案示例</a></h4><h3 id="Redis-内存键值数据库"><a href="#Redis-内存键值数据库" class="headerlink" title="Redis 内存键值数据库"></a>Redis 内存键值数据库</h3><ul><li><a href="https://github.com/mranney/node_redis" target="_blank" rel="noopener">node_redis</a></li></ul><h3 id="Pomelo-网易出品的网页游戏框架"><a href="#Pomelo-网易出品的网页游戏框架" class="headerlink" title="Pomelo 网易出品的网页游戏框架"></a>Pomelo 网易出品的网页游戏框架</h3><ul><li><a href="https://github.com/NetEase/pomelo" target="_blank" rel="noopener">pomelo</a></li><li><a href="http://www.infoq.com/cn/articles/game-server-development-1" target="_blank" rel="noopener">Infoq深入浅出node.js游戏服务器开发</a></li><li><a href="https://github.com/NetEase/pomelo/wiki/Home-in-Chinese" target="_blank" rel="noopener">官网wiki</a></li><li><a href="http://nodejs.netease.com/" target="_blank" rel="noopener">响应非常迅速的官方论坛</a></li></ul><h3 id="字符格式"><a href="#字符格式" class="headerlink" title="字符格式"></a>字符格式</h3><ul><li><a href="http://cnodejs.org/topic/516a96d16d38277306349507" target="_blank" rel="noopener">開源的簡繁轉換庫OpenCC支持Node.js了</a></li><li><a href="http://cnodejs.org/topic/51923a2f63e9f8a542c71123" target="_blank" rel="noopener">iconv-lite扩展：增加big5/shift-jis支持</a></li></ul><h3 id="网页模板引擎"><a href="#网页模板引擎" class="headerlink" title="网页模板引擎"></a>网页模板引擎</h3><ul><li><a href="http://cnodejs.org/topic/50e70edfa7e6c6171a1d70fa" target="_blank" rel="noopener">WEB模板jade、ejs、handlebars 万行代码解释效率比较，jade完败</a></li><li><a href="http://cnodejs.org/topic/4f16442ccae1f4aa27001109" target="_blank" rel="noopener">Javascript模板引擎性能对比及几点优化</a></li><li><a href="http://cnodejs.org/topic/51c2c2e373c638f3703f4929" target="_blank" rel="noopener">让 ejs 更加快 | Let ejs faster with options._with = false</a></li><li><a href="http://www.csser.com/board/4fddc4f0b28ed7d857001674" target="_blank" rel="noopener">EJS快速入门教程</a></li></ul><h3 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h3><ul><li><a href="http://cnodejs.org/topic/512b9fecdf9e9fcc580eb248" target="_blank" rel="noopener">Nodejs跨平台轻量级图片编解码库【增加Jpeg质量调整】</a></li><li><a href="http://cnodejs.org/topic/50f90d8edf9e9fcc58a5ee0b" target="_blank" rel="noopener">node-ccap模块生成captcha验证码</a></li><li><a href="http://cnodejs.org/topic/4f939c84407edba2143c12f7" target="_blank" rel="noopener">使用nodejs将html5 canvas base64编码图片保存为文件</a></li><li><a href="https://github.com/dead-horse/web-camera" target="_blank" rel="noopener">web-camera，node + phantomjs 网页截图</a></li></ul><h3 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h3><ul><li><a href="http://deadhorse.me/nodejs/2013/04/13/exception_and_domain.html" target="_blank" rel="noopener">Node.js 异步异常的处理与domain模块解析</a></li><li><a href="http://cnodejs.org/topic/50463565329c5139760c34a1" target="_blank" rel="noopener">关于XSS（跨站脚本攻击）和CSRF（跨站请求伪造）</a></li><li><a href="http://cnodejs.org/topic/51cc49e973c638f37042f7b4" target="_blank" rel="noopener">forever 替代工具 pm2 的介绍</a></li><li><a href="http://cnodejs.org/topic/51c562d673c638f3707bb8cc" target="_blank" rel="noopener">upstart封装mongodb应用为系统服务</a></li><li><a href="http://se77en.cc/2013/06/27/goodbye-node-forever-hello-pm2-translation/" target="_blank" rel="noopener">告别node-forever,拥抱PM2</a></li><li><a href="http://cnodejs.org/topic/5059ce39fd37ea6b2f07e1a3" target="_blank" rel="noopener">阿里云主机Nginx下配置NodeJS、Express和Forever</a></li></ul><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><ul><li><a href="http://www.tbdata.org/archives/1285" target="_blank" rel="noopener">阿里出品的node.js调研与服务性能测试</a></li><li><a href="http://snoopyxdy.blog.163.com/blog/static/6011744020117315192204/" target="_blank" rel="noopener">多核单服务器各种配置和业务压力下的node.js性能测试</a></li><li><a href="http://snoopyxdy.blog.163.com/blog/static/60117440201183101319257/" target="_blank" rel="noopener">巅峰对决：node.js和php性能测试</a></li><li><a href="http://ourjs.com/detail/52726d92031db63703000001" target="_blank" rel="noopener">性能测评：Node.JS比Java EE快20%</a></li></ul><h2 id="活跃开发者（排名不分先后）"><a href="#活跃开发者（排名不分先后）" class="headerlink" title="活跃开发者（排名不分先后）"></a>活跃开发者（排名不分先后）</h2><ul><li><a href="https://github.com/JacksonTian" target="_blank" rel="noopener">朴灵</a></li><li><a href="http://deadhorse.me/" target="_blank" rel="noopener">dead_horse/死马</a></li><li><a href="http://snoopyxdy.blog.163.com/" target="_blank" rel="noopener">snoopyxdy</a></li><li><a href="http://fengmk2.github.io/" target="_blank" rel="noopener">Python发烧友</a></li><li><a href="http://ucdok.com/" target="_blank" rel="noopener">老雷</a></li><li><a href="http://cnodejs.org/user/shiedman" target="_blank" rel="noopener">shiedman</a></li><li><a href="http://tiye.me" target="_blank" rel="noopener">jiyinyiyong</a></li></ul><h2 id="开源案例-收集Cnode的开源项目"><a href="#开源案例-收集Cnode的开源项目" class="headerlink" title="开源案例 收集Cnode的开源项目"></a>开源案例 收集Cnode的开源项目</h2><h3 id="社交类"><a href="#社交类" class="headerlink" title="社交类"></a>社交类</h3><ul><li><a href="https://github.com/cnodejs/nodeclub/" target="_blank" rel="noopener">Cnodejs 最活跃的Node.js社区</a></li><li><a href="http://cnodejs.org/topic/50f8bbfedf9e9fcc58a015ab" target="_blank" rel="noopener">晓知 个人博客</a></li><li><a href="https://github.com/willerce/canku" target="_blank" rel="noopener">使用Nodejs编写多人订餐系统</a></li><li><a href="http://cnodejs.org/topic/517b4be16d38277306984a81" target="_blank" rel="noopener">NodeJS写的WebQQ</a></li><li><a href="http://cnodejs.org/topic/51be6c2960af11cd33604776" target="_blank" rel="noopener">Yblog 博客程序</a></li><li><a href="http://cnodejs.org/topic/5023eeb9f767cc9a51032f68" target="_blank" rel="noopener">noderce博客程序</a></li></ul><h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><ul><li><a href="https://github.com/cnpm/cnpmjs.org" target="_blank" rel="noopener">cnpmjs.org 企业级 npm 解决方案</a></li><li><a href="https://github.com/node-webot/wechat" target="_blank" rel="noopener">wechat微信中间件</a></li><li><a href="http://cnodejs.org/topic/51cb771973c638f3701acecd" target="_blank" rel="noopener">深度遍历目录/列出目录下所有文件</a></li><li><a href="https://github.com/sumory/lincell" target="_blank" rel="noopener">lincell发布0.1.1版本，一行命令创建IDE</a></li><li><a href="http://cnodejs.org/topic/5058962f8ea56b5e7806b2a3" target="_blank" rel="noopener">HTML标签XSS过滤模块</a></li><li><a href="https://github.com/leizongmin/node-segment" target="_blank" rel="noopener">基于Node.js的中文分词模块</a></li><li><a href="http://cnodejs.org/topic/51c044ee57628b975f088c7a" target="_blank" rel="noopener">纯真IP库lib-qqwry</a></li><li><a href="http://cnodejs.org/topic/51ae41d7555d34c678ab4cce" target="_blank" rel="noopener">豆瓣SDK</a></li><li><a href="http://cnodejs.org/topic/51e7b69af4963ade0e2332a5" target="_blank" rel="noopener">数字与字符串转换模块baseN，支持2~62间任意进制转换</a></li></ul><h2 id="商业应用"><a href="#商业应用" class="headerlink" title="商业应用"></a>商业应用</h2><ul><li><a href="http://mofang.taobao.com/" target="_blank" rel="noopener">淘宝数据魔方</a></li><li><a href="http://shu.taobao.com/" target="_blank" rel="noopener">淘宝指数</a></li><li><a href="http://me.taobao.com" target="_blank" rel="noopener">淘宝时光机</a></li><li><a href="http://www.diandian.com/" target="_blank" rel="noopener">点点网</a></li><li><a href="http://huaban.com/" target="_blank" rel="noopener">花瓣网</a></li><li><a href="http://xueqiu.com/" target="_blank" rel="noopener">雪球网</a></li><li>小米手机抢购</li><li>网易pomelo消息推送系统</li><li>PayPal</li><li>Groupon</li><li>百度推送平台</li><li>新浪微博DB proxy</li><li>腾讯朋友网推送</li></ul><h2 id="node-js中文书"><a href="#node-js中文书" class="headerlink" title="node.js中文书"></a>node.js中文书</h2><h3 id="了不起的Node-js"><a href="#了不起的Node-js" class="headerlink" title="了不起的Node.js"></a><a href="http://book.douban.com/subject/25767596/" target="_blank" rel="noopener">了不起的Node.js</a></h3><p><img src="http://img3.douban.com/mpic/s27132823.jpg" alt=""></p><h3 id="九浅一深Node-js-pu大作品"><a href="#九浅一深Node-js-pu大作品" class="headerlink" title="九浅一深Node.js pu大作品"></a><a href="http://book.douban.com/subject/25768396/" target="_blank" rel="noopener">九浅一深Node.js</a> pu大作品</h3><p><img src="http://img5.douban.com/mpic/s27134708.jpg" alt=""></p><h3 id="node-js入门经典"><a href="#node-js入门经典" class="headerlink" title="node.js入门经典"></a><a href="http://book.douban.com/subject/23780706/" target="_blank" rel="noopener">node.js入门经典</a></h3><p><img src="http://img5.douban.com/mpic/s26588828.jpg" alt=""></p><p>###<a href="http://book.douban.com/subject/10789820/" target="_blank" rel="noopener">node.js开发指南</a><br><img src="http://img5.douban.com/mpic/s10307479.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Node-js&quot;&gt;&lt;a href=&quot;#Node-js&quot; class=&quot;headerlink&quot; title=&quot;Node.js&quot;&gt;&lt;/a&gt;Node.js&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.nodejs.org/&quot; target=&quot;_bl
      
    
    </summary>
    
      <category term="技术文档" scheme="https://syhyz1990.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="Node" scheme="https://syhyz1990.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>nodejs 搭建 TCP 转发服务</title>
    <link href="https://syhyz1990.github.io/wiki/nodejs-socket.html"/>
    <id>https://syhyz1990.github.io/wiki/nodejs-socket.html</id>
    <published>2018-06-06T08:44:40.000Z</published>
    <updated>2018-06-06T10:32:01.232Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近一直在研究高精度定位方面，公司提供了一台司南M300作为接收机。接收机接收的数据支持通过TCP协议通讯，于是需要一个搭建TCP服务器接受M300的数据，以下为通过nodejs搭建的TCP 服务器和模拟的客户端</p><h3 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h3><p>server.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Nodejs TCP服务器转发数据</span></span><br><span class="line"><span class="comment"> * User: syhyz1990@qq.com</span></span><br><span class="line"><span class="comment"> * Date: 18-06-06</span></span><br><span class="line"><span class="comment"> * Time: 下午3:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">let</span> server = net.createServer();</span><br><span class="line"></span><br><span class="line"><span class="comment">//聚合所有客户端  </span></span><br><span class="line"><span class="keyword">let</span> sockets = []; <span class="comment">//全部连接的客户端</span></span><br><span class="line"><span class="keyword">let</span> loginSockets = []; <span class="comment">//登录的客户端</span></span><br><span class="line"><span class="comment">//连接id初始值</span></span><br><span class="line"><span class="keyword">let</span> idRecorder = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//定义查询命令</span></span><br><span class="line"><span class="keyword">let</span> command = &#123;</span><br><span class="line">    getAllSocket: <span class="string">'getAllSocket\\r\\n'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定义端口号</span></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">1504</span>;</span><br><span class="line"><span class="comment">//定义连接密码</span></span><br><span class="line"><span class="keyword">const</span> PASSWORD = <span class="string">'GET/RTCM32,UserName="ABC",Pawword="ABC"\\r\\n'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接受新的客户端连接  </span></span><br><span class="line">server.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">    socket._id = idRecorder++;</span><br><span class="line">    sockets.push(socket); <span class="comment">//全部连接的socket数组</span></span><br><span class="line">    <span class="comment">//console.log(`当前connection_id: $&#123;socket._id&#125;`);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//从连接中读取数据</span></span><br><span class="line">    socket.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//console.log('got data:', data);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否是终端用户</span></span><br><span class="line">        <span class="keyword">if</span> (data.toString().trim() === PASSWORD) &#123;</span><br><span class="line">            loginSockets.push(socket);  <span class="comment">//保存到已登录的socket数组</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`终端<span class="subst">$&#123;socket._id&#125;</span> IP: [<span class="subst">$&#123;socket.remoteAddress&#125;</span>:<span class="subst">$&#123;socket.remotePort&#125;</span>] 已登录`</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取登录信息指令</span></span><br><span class="line">        <span class="keyword">if</span> (data.toString().trim() === command.getAllSocket) &#123;</span><br><span class="line">            sockets.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`终端<span class="subst">$&#123;item._id&#125;</span> IP: [<span class="subst">$&#123;item.remoteAddress&#125;</span>:<span class="subst">$&#123;item.remotePort&#125;</span>]`</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//每当一个已连接的用户输入数据，就将这些数据广播给其他所有已连接的用户,不转发登录信息</span></span><br><span class="line">        <span class="keyword">if</span> (data.toString().trim() !== PASSWORD) &#123;</span><br><span class="line">            loginSockets.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">otherSocket</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//console.log(otherSocket.remoteAddress + ':' + otherSocket.remotePort);</span></span><br><span class="line">                <span class="keyword">if</span> (otherSocket !== socket) &#123;</span><br><span class="line">                    otherSocket.write(data);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除被关闭的连接</span></span><br><span class="line">        socket.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'connection closed'</span>);</span><br><span class="line">            <span class="keyword">const</span> index = sockets.indexOf(socket);</span><br><span class="line">            sockets.splice(index, <span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server error:'</span>, err.message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Server closed'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(PORT, <span class="string">'0.0.0.0'</span>);</span><br></pre></td></tr></table></figure><h3 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h3><p>client.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</span><br><span class="line"><span class="keyword">let</span> port = <span class="number">1504</span>;</span><br><span class="line"><span class="keyword">let</span> quitting = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> conn;</span><br><span class="line"><span class="keyword">let</span> retryTimeout = <span class="number">3000</span>;    <span class="comment">//三秒，定义三秒后重新连接</span></span><br><span class="line"><span class="keyword">let</span> retriedTimes = <span class="number">0</span>;   <span class="comment">//记录重新连接的次数</span></span><br><span class="line"><span class="keyword">let</span> maxRetries = <span class="number">10</span>;    <span class="comment">//最多重新连接十次</span></span><br><span class="line"></span><br><span class="line">process.stdin.resume(); <span class="comment">//process.stdin流来接受用户的键盘输入，这个可读流初始化时处于暂停状态，调用流上的resume()方法来恢复流</span></span><br><span class="line"></span><br><span class="line">process.stdin.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (data.toString().trim().toLowerCase() === <span class="string">'quit'</span>)&#123;</span><br><span class="line">        quitting = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'quitting'</span>);</span><br><span class="line">        conn.end();</span><br><span class="line">        process.stdin.pause();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        conn.write(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接时设置最多连接十次，并且开启定时器三秒后再连接</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reconnect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (retriedTimes &gt;= maxRetries) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Max retries have been exceeded, I give up.'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        retriedTimes +=<span class="number">1</span>;</span><br><span class="line">        setTimeout(connect, retryTimeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    conn = net.createConnection(port);</span><br><span class="line"></span><br><span class="line">    conn.on(<span class="string">'connect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        retriedTimes = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'connect to server'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    conn.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Error in connection:'</span>, err);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    conn.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(! quitting) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'connection got closed, will try to reconnect'</span>);</span><br><span class="line">            reconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    conn.pipe(process.stdout, &#123;<span class="attr">end</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近一直在研究高精度定位方面，公司提供了一台司南M300作为接收机。接收机接收的数据支持通过TCP协议通讯，于是需要一个搭建TCP服务器接受
      
    
    </summary>
    
      <category term="技术文档" scheme="https://syhyz1990.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="nodejs" scheme="https://syhyz1990.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://syhyz1990.github.io/wiki/regexp.html"/>
    <id>https://syhyz1990.github.io/wiki/regexp.html</id>
    <published>2018-06-05T09:38:04.000Z</published>
    <updated>2018-06-05T10:01:59.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="POSIX正则表达式规范"><a href="#POSIX正则表达式规范" class="headerlink" title="POSIX正则表达式规范"></a>POSIX正则表达式规范</h2><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><table> <thead> <tr> <th>字符</th> <th>含义</th> <th>举例</th> </tr> </thead> <tbody> <tr> <td><code>.</code></td> <td>匹配任意一个字符</td> <td><code>abc.</code>可以匹配abcd、abc9等</td> </tr> <tr> <td><code>[]</code></td> <td>匹配括号中的任意一个字符</td> <td><code>[abc]</code>d可以匹配ad、bd或cd</td> </tr> <tr> <td><code>-</code></td> <td>在[]括号内表示字符范围</td> <td><code>[0-9a-fA-F]</code>可以匹配一位十六进制数字</td> </tr> <tr> <td><code>^</code></td> <td>位于[]括号内的开头，匹配除括号中的字符之外的任意一个字符</td> <td><code>[^xy]</code>匹配除xy之外的任一字符，因此<code>[^xy]1</code>可以匹配a1、b1但不匹配x1、y1</td> </tr> <tr> <td><code>[[:xxx:]]</code></td> <td>grep工具预定义的一些命名字符类</td> <td><code>[[:alpha:]]</code>匹配一个字母，<code>[[:digit:]]</code>匹配一个数字</td> </tr> </tbody> </table><h3 id="数量限定符"><a href="#数量限定符" class="headerlink" title="数量限定符"></a>数量限定符</h3><table> <thead> <tr> <th>字符</th> <th>含义</th> <th>举例</th> </tr> </thead> <tbody> <tr> <td><code>?</code></td> <td>紧跟在它前面的单元应匹配零次或一次</td> <td><code>[0-9]?\.[0-9]</code>匹配0.0、2.3、.5等，由于.在正则表达式中是一个特殊字符，所以需要用\转义一下，取字面值</td> </tr> <tr> <td><code>+</code></td> <td>紧跟在它前面的单元应匹配一次或多次</td> <td><code>[a-zA-Z0-9_.-]+@[a-zA-Z0-9_.-]+\.[a-zA-Z0-9_.-]+</code>匹配email地址</td> </tr> <tr> <td><code>*</code></td> <td>紧跟在它前面的单元应匹配零次或多次</td> <td><code>[0-9][0-9]*</code>匹配至少一位数字，等价于[0-9]+，[a-zA-Z_]+[a-zA-Z_0-9]*匹配C语言的标识符</td> </tr> <tr> <td><code>{N}</code></td> <td>紧跟在它前面的单元应精确匹配N次</td> <td><code>[1-9][0-9]{2}</code>匹配从100到999的整数</td> </tr> <tr> <td><code>{N,}</code></td> <td>紧跟在它前面的单元应匹配至少N次</td> <td><code>[1-9][0-9]{2,}</code>匹配三位以上（含三位）的整数</td> </tr> <tr> <td><code>{,M}</code></td> <td>紧跟在它前面的单元应匹配最多M次</td> <td><code>[0-9]{,1}</code>相当于<code>[0-9]?</code></td> </tr> <tr> <td><code>{N,M}</code></td> <td>紧跟在它前面的单元应匹配至少N次，最多M次</td> <td><code>[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}</code>匹配IP地址</td> </tr> </tbody> </table><h3 id="位置限定符"><a href="#位置限定符" class="headerlink" title="位置限定符"></a>位置限定符</h3><table> <thead> <tr> <th>字符</th> <th>含义</th> <th>举例</th> </tr> </thead> <tbody> <tr> <td><code>^</code></td> <td>匹配行首的位置</td> <td><code>^Content</code>匹配位于一行开头的Content</td> </tr> <tr> <td><code>$</code></td> <td>匹配行末的位置</td> <td><code>;$</code>匹配位于一行结尾的;号，<code>^$</code>匹配空行</td> </tr> <tr> <td><code>\&amp;lt;</code></td> <td>匹配单词开头的位置</td> <td><code>\&amp;lt;th</code>匹配… this，但不匹配ethernet、tenth</td> </tr> <tr> <td><code>\&amp;gt;</code></td> <td>匹配单词结尾的位置</td> <td><code>p\&amp;gt;</code>匹配leap …，但不匹配parent、sleepy</td> </tr> <tr> <td><code>\b</code></td> <td>匹配单词开头或结尾的位置</td> <td><code>\bat\b</code>匹配… at …，但不匹配cat、atexit、batch</td> </tr> <tr> <td><code>\B</code></td> <td>匹配非单词开头和结尾的位置</td> <td><code>\Bat\B</code>匹配battery，但不匹配… attend、hat …</td> </tr> </tbody> </table><h3 id="其他特殊字符"><a href="#其他特殊字符" class="headerlink" title="其他特殊字符"></a>其他特殊字符</h3><table> <thead> <tr> <th>字符</th> <th>含义</th> <th>举例</th> </tr> </thead> <tbody> <tr> <td><code>\</code>  | 转义字符，普通字符转义为特殊字符，特殊字符转义为普通字符             | 普通字符<code>&amp;lt;</code>写成<code>\&amp;lt;</code>表示单词开头的位置，特殊字符<code>.</code>写成<code>\.</code>以及<code>\</code>写成<code>\\</code>就当作普通字符来匹配</td> <td></td> <td></td> </tr> <tr> <td><code>()</code></td> <td>将正则表达式的一部分括起来组成一个单元，可以对整个单元使用数量限定符</td> <td><code>([0-9]{1,3}\.){3}[0-9]{1,3}</code>匹配IP地址</td> </tr> <tr> <td><code>|</code></td> <td>连接两个子表达式，表示或的关系</td> <td><code>n(o | either)</code>匹配no或neither</td> </tr> </tbody> </table><p>以上介绍的是grep正则表达式的Extended规范，Basic规范也有这些语法，只是字符<code>?+{}|()</code>应解释为普通字符，要表示上述特殊含义则需要加<code>\</code>转义。如果用grep而不是egrep，并且不加<code>-E</code>参数，则应该遵照Basic规范来写正则表达式。</p><h2 id="Javascript正则表达式"><a href="#Javascript正则表达式" class="headerlink" title="Javascript正则表达式"></a>Javascript正则表达式</h2><h3 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h3><ul><li>匹配中文字符的正则表达式：<code>[\u4e00-\u9fa5]</code></li><li>匹配双字节字符(包括汉字在内)：<code>[^\x00-\xff]</code></li><li>匹配空白行的正则表达式：<code>\n\s*\r</code></li><li>匹配HTML标记的正则表达式：<code>&amp;lt;(\S*?)[^&amp;gt;]*&amp;gt;.*?&amp;lt;/\1&amp;gt;|&amp;lt;.*? /&amp;gt;</code></li><li>匹配首尾空白字符的正则表达式：<code>^\s*|\s*$</code></li><li>匹配Email地址的正则表达式：<code>\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</code></li><li>匹配网址URL的正则表达式：<code>[a-zA-z]+://[^\s]*</code></li><li>匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></li><li>匹配国内电话号码：<code>\d{3}-\d{8}|\d{4}-\d{7}</code></li><li>匹配腾讯QQ号：<code>[1-9][0-9]{4,}</code></li><li>匹配中国邮政编码：<code>[1-9]\d{5}(?!\d)</code></li><li>匹配身份证：<code>\d{15}|\d{18}</code></li><li>匹配ip地址：<code>\d+\.\d+\.\d+\.\d+</code></li><li><p>匹配特定数字：</p><table> <thead> <tr> <th>表达式</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td><code>^[1-9]\d*$</code></td> <td>匹配正整数</td> </tr> <tr> <td><code>^-[1-9]\d*$</code></td> <td>匹配负整数</td> </tr> <tr> <td><code>^-?[1-9]\d*$</code></td> <td>匹配整数</td> </tr> <tr> <td><code>^[1-9]\d*|0$</code></td> <td>匹配非负整数（正整数 + 0）</td> </tr> <tr> <td><code>^-[1-9]\d*|0$</code></td> <td>匹配非正整数（负整数 + 0）</td> </tr> <tr> <td><code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$</code></td> <td>匹配正浮点数</td> </tr> <tr> <td><code>^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$</code></td> <td>匹配负浮点数</td> </tr> <tr> <td><code>^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></td> <td>匹配浮点数</td> </tr> <tr> <td><code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</code></td> <td>匹配非负浮点数（正浮点数 + 0）</td> </tr> <tr> <td><code>^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</code></td> <td>匹配非正浮点数（负浮点数 + 0）</td> </tr> </tbody> </table></li><li><p>匹配特定字符串：</p><table> <thead> <tr> <th>表达式</th> <th>说明</th> </tr> </thead> <tbody> <tr> <td><code>^[A-Za-z]+$</code></td> <td>匹配由26个英文字母组成的字符串</td> </tr> <tr> <td><code>^[A-Z]+$</code></td> <td>匹配由26个英文字母的大写组成的字符串</td> </tr> <tr> <td><code>^[a-z]+$</code></td> <td>匹配由26个英文字母的小写组成的字符串</td> </tr> <tr> <td><code>^[A-Za-z0-9]+$</code></td> <td>匹配由数字和26个英文字母组成的字符串</td> </tr> <tr> <td><code>^\w+$</code></td> <td>匹配由数字、26个英文字母或者下划线组成的字符串</td> </tr> </tbody> </table></li></ul><h3 id="深入阅读"><a href="#深入阅读" class="headerlink" title="深入阅读"></a>深入阅读</h3><ol><li><a href="http://man7.org/linux/man-pages/man7/regex.7.html" target="_blank" rel="noopener">regex(7)</a></li><li><a href="http://lifesinger.3322.org/myblog/?p=185" target="_blank" rel="noopener">常用正则式</a></li></ol><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ol><li><a href="https://github.com/thebinarysearchtree/regexpbuilderjs" target="_blank" rel="noopener">regexpbuilderjs</a>：一个使用链式法则推导正则表达式的工具；</li><li><a href="http://www.regexper.com/" target="_blank" rel="noopener">regexper.com</a>：一个可视化 Javascript 正则表达式的网站。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;POSIX正则表达式规范&quot;&gt;&lt;a href=&quot;#POSIX正则表达式规范&quot; class=&quot;headerlink&quot; title=&quot;POSIX正则表达式规范&quot;&gt;&lt;/a&gt;POSIX正则表达式规范&lt;/h2&gt;&lt;h3 id=&quot;字符类&quot;&gt;&lt;a href=&quot;#字符类&quot; class
      
    
    </summary>
    
      <category term="技术文档" scheme="https://syhyz1990.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
      <category term="正则,JS" scheme="https://syhyz1990.github.io/tags/%E6%AD%A3%E5%88%99-JS/"/>
    
  </entry>
  
  <entry>
    <title>Vue 编码规范</title>
    <link href="https://syhyz1990.github.io/wiki/vue-standard.html"/>
    <id>https://syhyz1990.github.io/wiki/vue-standard.html</id>
    <published>2018-06-01T02:41:05.000Z</published>
    <updated>2018-06-06T08:46:02.754Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-目录结构"><a href="#1-目录结构" class="headerlink" title="1 目录结构"></a>1 目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">config            --- 配置文件：配置开发环境代理Api等，自动根据环境打包</span><br><span class="line"></span><br><span class="line">dist              --- 打包文件目录</span><br><span class="line"></span><br><span class="line">node_modules      --- 模块依赖：开发时请勿提交svn，忽略此文件夹</span><br><span class="line"></span><br><span class="line">src</span><br><span class="line">    </span><br><span class="line">    api           --- 数据层：接口统一封装到此文件夹下</span><br><span class="line">    </span><br><span class="line">    base          --- 基础组件，如轮播图，加载等</span><br><span class="line">    </span><br><span class="line">    assets        --- 静态资源文件</span><br><span class="line">        </span><br><span class="line">        css</span><br><span class="line">        </span><br><span class="line">        js        --- 存放外部JS插件，如jQuery</span><br><span class="line">        </span><br><span class="line">        images</span><br><span class="line">        </span><br><span class="line">        scss</span><br><span class="line">    </span><br><span class="line">    components    --- 项目组件：各自按模块进行开发</span><br><span class="line">    </span><br><span class="line">    router        --- 路由目录，存放页面跳转路由文件</span><br><span class="line">    </span><br><span class="line">    store         --- store仓库：按模块管理各自的vue数据状态</span><br><span class="line">    </span><br><span class="line">    utils         --- 工具层：专门封装可复用的函数或方法</span><br></pre></td></tr></table></figure><h3 id="2-Vue属性书写顺序"><a href="#2-Vue属性书写顺序" class="headerlink" title="2 Vue属性书写顺序"></a>2 Vue属性书写顺序</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  mixins,</span><br><span class="line">  data,</span><br><span class="line">  props,</span><br><span class="line">  store,</span><br><span class="line">  computed,</span><br><span class="line">  route,</span><br><span class="line">  created,</span><br><span class="line">  ready,    <span class="comment">// =&gt; 生命周期顺序不赘述</span></span><br><span class="line">  event,</span><br><span class="line">  watch,</span><br><span class="line">  components,</span><br><span class="line">  methods</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-组件"><a href="#3-组件" class="headerlink" title="3 组件"></a>3 组件</h3><h4 id="3-1-命名"><a href="#3-1-命名" class="headerlink" title="3.1 命名"></a>3.1 命名</h4><p>组件以驼峰命名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-components</span>&gt;</span><span class="tag">&lt;/<span class="name">my-components</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> myComponents <span class="keyword">from</span> <span class="string">'./myComponents.vue'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  components: &#123;</span></span><br><span class="line"><span class="undefined">    myComponents</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-Vue组件的书写顺序"><a href="#3-2-Vue组件的书写顺序" class="headerlink" title="3.2 Vue组件的书写顺序"></a>3.2 Vue组件的书写顺序</h4><p>建议：template script style 的顺序书写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;&lt;/template&gt;</span><br><span class="line">&lt;script&gt;&lt;/script&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><h4 id="3-3-组件引用"><a href="#3-3-组件引用" class="headerlink" title="3.3 组件引用"></a>3.3 组件引用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> myComponentsA <span class="keyword">from</span> <span class="string">'./myComponentsA.vue'</span>  </span><br><span class="line"><span class="keyword">import</span> myComponentsB <span class="keyword">from</span> <span class="string">'./myComponentsB.vue'</span></span><br><span class="line"><span class="keyword">import</span> myComponentsC <span class="keyword">from</span> <span class="string">'./myComponentsC.vue'</span></span><br><span class="line"><span class="keyword">import</span> myComponentsD <span class="keyword">from</span> <span class="string">'./myComponentsD.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">  myComponentsA,</span><br><span class="line">    myComponentsB,</span><br><span class="line">    myComponentsC,</span><br><span class="line">    myComponentsD,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-事件"><a href="#4-事件" class="headerlink" title="4 事件"></a>4 事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- bad --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"pass()"</span>&gt;</span>pass<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- good --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"pass"</span>&gt;</span>pass<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-目录结构&quot;&gt;&lt;a href=&quot;#1-目录结构&quot; class=&quot;headerlink&quot; title=&quot;1 目录结构&quot;&gt;&lt;/a&gt;1 目录结构&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="前端规范" scheme="https://syhyz1990.github.io/categories/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS / Sass 指南</title>
    <link href="https://syhyz1990.github.io/wiki/scss-standard.html"/>
    <id>https://syhyz1990.github.io/wiki/scss-standard.html</id>
    <published>2018-05-31T12:29:44.000Z</published>
    <updated>2018-06-05T08:23:06.551Z</updated>
    
    <content type="html"><![CDATA[<p><em>用更合理的方式写 CSS 和 Sass</em></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#terminology">术语</a><ul><li><a href="#rule-declaration">规则声明</a></li><li><a href="#selectors">选择器</a></li><li><a href="#properties">属性</a></li></ul></li><li><a href="#css">CSS</a><ul><li><a href="#formatting">格式</a></li><li><a href="#comments">注释</a></li><li><a href="#oocss-and-bem">OOCSS 和 BEM</a></li><li><a href="#id-selectors">ID 选择器</a></li><li><a href="#javascript-hooks">JavaScript 钩子</a></li><li><a href="#border">边框</a></li></ul></li><li><a href="#sass">Sass</a><ul><li><a href="#syntax">语法</a></li><li><a href="#ordering-of-property-declarations">排序</a></li><li><a href="#variables">变量</a></li><li><a href="#mixins">Mixins</a></li><li><a href="#extend-directive">扩展指令</a></li><li><a href="#nested-selectors">嵌套选择器</a></li></ul></li></ol><p><a name="terminology"></a></p><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p><a name="rule-declaration"></a></p><h3 id="规则声明"><a href="#规则声明" class="headerlink" title="规则声明"></a>规则声明</h3><p>我们把一个（或一组）选择器和一组属性称之为 “规则声明”。举个例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.listing</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="selectors"></a></p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>在规则声明中，“选择器” 负责选取 DOM 树中的元素，这些元素将被定义的属性所修饰。选择器可以匹配 HTML 元素，也可以匹配一个元素的类名、ID, 或者元素拥有的属性。以下是选择器的例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my-element-class</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[aria-hidden]</span> &#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="properties"></a></p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>最后，属性决定了规则声明里被选择的元素将得到何种样式。属性以键值对形式存在，一个规则声明可以包含一或多个属性定义。以下是属性定义的例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* some selector */</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f1f1f1</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="css"></a></p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p><a name="formatting"></a></p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ul><li>使用 2 个空格作为缩进。</li><li>类名建议使用破折号代替驼峰法。如果你使用 BEM，也可以使用下划线（参见下面的 <a href="#oocss-and-bem">OOCSS 和 BEM</a>）。</li><li>不要使用 ID 选择器。</li><li>在一个规则声明中应用了多个选择器时，每个选择器独占一行。</li><li>在规则声明的左大括号 <code>{</code> 前加上一个空格。</li><li>在属性的冒号 <code>:</code> 后面加上一个空格，前面不加空格。</li><li>规则声明的右大括号 <code>}</code> 独占一行。</li><li>规则声明之间用空行分隔开。</li></ul><p><strong>Bad</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.avatar</span>&#123;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">2px</span> solid white; &#125;</span><br><span class="line"><span class="selector-class">.no</span>, <span class="selector-class">.nope</span>, <span class="selector-class">.not_good</span> &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#lol-no</span> &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Good</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.avatar</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid white;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.one</span>,</span><br><span class="line"><span class="selector-class">.selector</span>,</span><br><span class="line"><span class="selector-class">.per-line</span> &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="comments"></a></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>建议使用行注释 (在 Sass 中是 <code>//</code>) 代替块注释。</li><li>建议注释独占一行。避免行末注释。</li><li>给没有自注释的代码写上详细说明，比如：<ul><li>为什么用到了 z-index</li><li>兼容性处理或者针对特定浏览器的 hack</li></ul></li></ul><p><a name="oocss-and-bem"></a></p><h3 id="OOCSS-和-BEM"><a href="#OOCSS-和-BEM" class="headerlink" title="OOCSS 和 BEM"></a>OOCSS 和 BEM</h3><p>出于以下原因，我们鼓励使用 OOCSS 和 BEM 的某种组合：</p><ul><li>可以帮助我们理清 CSS 和 HTML 之间清晰且严谨的关系。</li><li>可以帮助我们创建出可重用、易装配的组件。</li><li>可以减少嵌套，降低特定性。</li><li>可以帮助我们创建出可扩展的样式表。</li></ul><p><strong>OOCSS</strong>，也就是 “Object Oriented CSS（面向对象的CSS）”，是一种写 CSS 的方法，其思想就是鼓励你把样式表看作“对象”的集合：创建可重用性、可重复性的代码段让你可以在整个网站中多次使用。</p><p>参考资料：</p><ul><li>Nicole Sullivan 的 <a href="https://github.com/stubbornella/oocss/wiki" target="_blank" rel="noopener">OOCSS wiki</a></li><li>Smashing Magazine 的 <a href="http://www.smashingmagazine.com/2011/12/12/an-introduction-to-object-oriented-css-oocss/" target="_blank" rel="noopener">Introduction to OOCSS</a></li></ul><p><strong>BEM</strong>，也就是 “Block-Element-Modifier”，是一种用于 HTML 和 CSS 类名的<em>命名约定</em>。BEM 最初是由 Yandex 提出的，要知道他们拥有巨大的代码库和可伸缩性，BEM 就是为此而生的，并且可以作为一套遵循 OOCSS 的参考指导规范。</p><ul><li>CSS Trick 的 <a href="https://css-tricks.com/bem-101/" target="_blank" rel="noopener">BEM 101</a></li><li>Harry Roberts 的 <a href="http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/" target="_blank" rel="noopener">introduction to BEM</a></li></ul><p><strong>示例</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"listing-card listing-card--featured"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"listing-card__title"</span>&gt;</span>Adorable 2BR in the sunny Mission<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"listing-card__content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Vestibulum id ligula porta felis euismod semper.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.listing-card</span> &#123; &#125;</span><br><span class="line"><span class="selector-class">.listing-card--featured</span> &#123; &#125;</span><br><span class="line"><span class="selector-class">.listing-card__title</span> &#123; &#125;</span><br><span class="line"><span class="selector-class">.listing-card__content</span> &#123; &#125;</span><br></pre></td></tr></table></figure><ul><li><code>.listing-card</code> 是一个块（block），表示高层次的组件。</li><li><code>.listing-card__title</code> 是一个元素（element），它属于 <code>.listing-card</code> 的一部分，因此块是由元素组成的。</li><li><code>.listing-card--featured</code> 是一个修饰符（modifier），表示这个块与 <code>.listing-card</code> 有着不同的状态或者变化。</li></ul><p><a name="id-selectors"></a></p><h3 id="ID-选择器"><a href="#ID-选择器" class="headerlink" title="ID 选择器"></a>ID 选择器</h3><p>在 CSS 中，虽然可以通过 ID 选择元素，但大家通常都会把这种方式列为反面教材。ID 选择器给你的规则声明带来了不必要的高<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity" target="_blank" rel="noopener">优先级</a>，而且 ID 选择器是不可重用的。</p><p>想要了解关于这个主题的更多内容，参见 <a href="http://csswizardry.com/2014/07/hacks-for-dealing-with-specificity/" target="_blank" rel="noopener">CSS Wizardry 的文章</a>，文章中有关于如何处理优先级的内容。</p><p><a name="javascript-hooks"></a></p><h3 id="JavaScript-钩子"><a href="#JavaScript-钩子" class="headerlink" title="JavaScript 钩子"></a>JavaScript 钩子</h3><p>避免在 CSS 和 JavaScript 中绑定相同的类。否则开发者在重构时通常会出现以下情况：轻则浪费时间在对照查找每个要改变的类，重则因为害怕破坏功能而不敢作出更改。</p><p>我们推荐在创建用于特定 JavaScript 的类名时，添加 <code>.js-</code> 前缀：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary js-request-to-book"</span>&gt;</span>Request to Book<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="border"></a></p><h3 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h3><p>在定义无边框样式时，使用 <code>0</code> 代替 <code>none</code>。</p><p><strong>Bad</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Good</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="sass"></a></p><h2 id="Sass"><a href="#Sass" class="headerlink" title="Sass"></a>Sass</h2><p><a name="syntax"></a></p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ul><li>使用 <code>.scss</code> 的语法，不使用 <code>.sass</code> 原本的语法。</li><li>CSS 和 <code>@include</code> 声明按照以下逻辑排序（参见下文）</li></ul><p><a name="ordering-of-property-declarations"></a></p><h3 id="属性声明的排序"><a href="#属性声明的排序" class="headerlink" title="属性声明的排序"></a>属性声明的排序</h3><ol><li><p>属性声明</p><p> 首先列出除去 <code>@include</code> 和嵌套选择器之外的所有属性声明。</p> <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn-green</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@include</code> 声明</p><p> 紧随后面的是 <code>@include</code>，这样可以使得整个选择器的可读性更高。</p> <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn-green</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  @<span class="keyword">include</span> transition(background 0.5s ease);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>嵌套选择器</p><p> <em>如果有必要</em>用到嵌套选择器，把它们放到最后，在规则声明和嵌套选择器之间要加上空白，相邻嵌套选择器之间也要加上空白。嵌套选择器中的内容也要遵循上述指引。</p> <figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  @<span class="keyword">include</span> transition(background 0.5s ease);</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.icon</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><a name="variables"></a></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量名应使用破折号（例如 <code>$my-variable</code>）代替 camelCased 和 snake_cased 风格。对于仅用在当前文件的变量，可以在变量名之前添加下划线前缀（例如 <code>$_my-variable</code>）。</p><p><a name="mixins"></a></p><h3 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h3><p>为了让代码遵循 DRY 原则（Don’t Repeat Yourself）、增强清晰性或抽象化复杂性，应该使用 mixin，这与那些命名良好的函数的作用是异曲同工的。虽然 mixin 可以不接收参数，但要注意，假如你不压缩负载（比如通过 gzip），这样会导致最终的样式包含不必要的代码重复。</p><p><a name="extend-directive"></a></p><h3 id="扩展指令"><a href="#扩展指令" class="headerlink" title="扩展指令"></a>扩展指令</h3><p>应避免使用 <code>@extend</code> 指令，因为它并不直观，而且具有潜在风险，特别是用在嵌套选择器的时候。即便是在顶层占位符选择器使用扩展，如果选择器的顺序最终会改变，也可能会导致问题。（比如，如果它们存在于其他文件，而加载顺序发生了变化）。其实，使用 @extend 所获得的大部分优化效果，gzip 压缩已经帮助你做到了，因此你只需要通过 mixin 让样式表更符合 DRY 原则就足够了。</p><p><a name="nested-selectors"></a></p><h3 id="嵌套选择器"><a href="#嵌套选择器" class="headerlink" title="嵌套选择器"></a>嵌套选择器</h3><p><strong>请不要让嵌套选择器的深度超过 3 层！</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.page-container</span> &#123;</span><br><span class="line">  <span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="selector-class">.profile</span> &#123;</span><br><span class="line">      <span class="comment">// STOP!</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当遇到以上情况的时候，你也许是这样写 CSS 的：</p><ul><li>与 HTML 强耦合的（也是脆弱的）<em>—或者—</em></li><li>过于具体（强大）<em>—或者—</em></li><li>没有重用</li></ul><p>再说一遍: <strong>永远不要嵌套 ID 选择器！</strong></p><p>如果你始终坚持要使用 ID 选择器（劝你三思），那也不应该嵌套它们。如果你正打算这么做，你需要先重新检查你的标签，或者指明原因。如果你想要写出风格良好的 HTML 和 CSS，你是<strong>不</strong>应该这样做的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;用更合理的方式写 CSS 和 Sass&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#terminology&quot;&gt;术语&lt;/a
      
    
    </summary>
    
      <category term="前端规范" scheme="https://syhyz1990.github.io/categories/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="CSS,SCSS" scheme="https://syhyz1990.github.io/tags/CSS-SCSS/"/>
    
  </entry>
  
  <entry>
    <title>JS判断数据类型</title>
    <link href="https://syhyz1990.github.io/wiki/js-type-judgment.html"/>
    <id>https://syhyz1990.github.io/wiki/js-type-judgment.html</id>
    <published>2018-05-25T11:24:11.000Z</published>
    <updated>2018-06-05T08:23:06.586Z</updated>
    
    <content type="html"><![CDATA[<h2 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a>判断数据类型</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断 Array 类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; val The value to test</span></span><br><span class="line"><span class="comment"> * @returns &#123;boolean&#125; True if value is an Array, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> toString.call(val) === <span class="string">'[object Array]'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断 ArrayBuffer 类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; val The value to test</span></span><br><span class="line"><span class="comment"> * @returns &#123;boolean&#125; True if value is an ArrayBuffer, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayBuffer</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> toString.call(val) === <span class="string">'[object ArrayBuffer]'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断 FormData 类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; val The value to test</span></span><br><span class="line"><span class="comment"> * @returns &#123;boolean&#125; True if value is an FormData, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFormData</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">typeof</span> FormData !== <span class="string">'undefined'</span>) &amp;&amp; (val <span class="keyword">instanceof</span> FormData);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断 ArrayBuffer 类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; val The value to test</span></span><br><span class="line"><span class="comment"> * @returns &#123;boolean&#125; True if value is a view on an ArrayBuffer, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArrayBufferView</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result;</span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">typeof</span> <span class="built_in">ArrayBuffer</span> !== <span class="string">'undefined'</span>) &amp;&amp; (<span class="built_in">ArrayBuffer</span>.isView)) &#123;</span><br><span class="line">    result = <span class="built_in">ArrayBuffer</span>.isView(val);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    result = (val) &amp;&amp; (val.buffer) &amp;&amp; (val.buffer <span class="keyword">instanceof</span> <span class="built_in">ArrayBuffer</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断 String 类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; val The value to test</span></span><br><span class="line"><span class="comment"> * @returns &#123;boolean&#125; True if value is a String, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isString</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">'string'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断 Number 类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; val The value to test</span></span><br><span class="line"><span class="comment"> * @returns &#123;boolean&#125; True if value is a Number, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">'number'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断 undefined 类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; val The value to test</span></span><br><span class="line"><span class="comment"> * @returns &#123;boolean&#125; True if the value is undefined, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isUndefined</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">'undefined'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断 Object 类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; val The value to test</span></span><br><span class="line"><span class="comment"> * @returns &#123;boolean&#125; True if value is an Object, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObject</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">'object'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断 Date 类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; val The value to test</span></span><br><span class="line"><span class="comment"> * @returns &#123;boolean&#125; True if value is a Date, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDate</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> toString.call(val) === <span class="string">'[object Date]'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断 File 类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; val The value to test</span></span><br><span class="line"><span class="comment"> * @returns &#123;boolean&#125; True if value is a File, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFile</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> toString.call(val) === <span class="string">'[object File]'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断 Blob 类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; val The value to test</span></span><br><span class="line"><span class="comment"> * @returns &#123;boolean&#125; True if value is a Blob, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBlob</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> toString.call(val) === <span class="string">'[object Blob]'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断 Function 类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; val The value to test</span></span><br><span class="line"><span class="comment"> * @returns &#123;boolean&#125; True if value is a Function, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> toString.call(val) === <span class="string">'[object Function]'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断 Stream 类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; val The value to test</span></span><br><span class="line"><span class="comment"> * @returns &#123;boolean&#125; True if value is a Stream, otherwise false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isStream</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> isObject(val) &amp;&amp; isFunction(val.pipe);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 去掉字符串首尾空格</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; str The String to trim</span></span><br><span class="line"><span class="comment"> * @returns &#123;String&#125; The String freed of excess whitespace</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.replace(<span class="regexp">/^\s*/</span>, <span class="string">''</span>).replace(<span class="regexp">/\s*$/</span>, <span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;判断数据类型&quot;&gt;&lt;a href=&quot;#判断数据类型&quot; class=&quot;headerlink&quot; title=&quot;判断数据类型&quot;&gt;&lt;/a&gt;判断数据类型&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="代码片段" scheme="https://syhyz1990.github.io/categories/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    
    
      <category term="JS" scheme="https://syhyz1990.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript6 前端规范</title>
    <link href="https://syhyz1990.github.io/wiki/ecmascript6-standard.html"/>
    <id>https://syhyz1990.github.io/wiki/ecmascript6-standard.html</id>
    <published>2018-05-25T08:24:19.000Z</published>
    <updated>2018-06-05T08:23:06.562Z</updated>
    
    <content type="html"><![CDATA[<p><strong>用更合理的方式写 JavaScript</strong></p><p><a name="table-of-contents"></a></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ol><li><a href="#types">类型</a></li><li><a href="#references">引用</a></li><li><a href="#objects">对象</a></li><li><a href="#arrays">数组</a></li><li><a href="#destructuring">解构</a></li><li><a href="#strings">字符串</a></li><li><a href="#functions">函数</a></li><li><a href="#arrow-functions">箭头函数</a></li><li><a href="#constructors">构造函数</a></li><li><a href="#modules">模块</a></li><li><a href="#iterators-and-generators">迭代器和生成器</a></li><li><a href="#properties">属性</a></li><li><a href="#variables">变量</a></li><li><a href="#hoisting">提升</a></li><li><a href="#comparison-operators--equality">比较运算符和等号</a></li><li><a href="#blocks">代码块</a></li><li><a href="#comments">注释</a></li><li><a href="#whitespace">空白</a></li><li><a href="#commas">逗号</a></li><li><a href="#semicolons">分号</a></li><li><a href="#type-casting--coercion">类型转换</a></li><li><a href="#naming-conventions">命名规则</a></li><li><a href="#accessors">存取器</a></li><li><a href="#events">事件</a></li><li><a href="#jquery">jQuery</a></li><li><a href="#ecmascript-5-compatibility">ECMAScript 5 兼容性</a></li><li><a href="#ecmascript-6-styles">ECMAScript 6 编码规范</a></li></ol><p><a name="types"></a></p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul><li><p><a href="#1.1">1.1</a> <a name="1.1"></a> <strong>基本类型</strong>: 直接存取基本类型。</p><ul><li><code>字符串</code></li><li><code>数值</code></li><li><code>布尔类型</code></li><li><code>null</code></li><li><code>undefined</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> bar = foo;</span><br><span class="line"></span><br><span class="line">bar = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo, bar); <span class="comment">// =&gt; 1, 9</span></span><br></pre></td></tr></table></figure></li><li><p><a href="#1.2">1.2</a> <a name="1.2"></a> <strong>复杂类型</strong>: 通过引用的方式存取复杂类型。</p><ul><li><code>对象</code></li><li><code>数组</code></li><li><code>函数</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> bar = foo;</span><br><span class="line"></span><br><span class="line">bar[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>], bar[<span class="number">0</span>]); <span class="comment">// =&gt; 9, 9</span></span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="references"></a></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><p><a href="#2.1">2.1</a> <a name="2.1"></a> 对所有的引用使用 <code>const</code> ；不要使用 <code>var</code>。</p><blockquote><p>为什么？这能确保你无法对引用重新赋值，也不会导致出现 bug 或难以理解。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></li><li><p><a href="#2.2">2.2</a> <a name="2.2"></a> 如果你一定需要可变动的引用，使用 <code>let</code> 代替 <code>var</code>。</p><blockquote><p>为什么？因为  <code>let</code> 是块级作用域，而 <code>var</code> 是函数作用域。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good, use the let.</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  count += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#2.3">2.3</a> <a name="2.3"></a> 注意 <code>let</code> 和 <code>const</code> 都是块级作用域。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const 和 let 只存在于它们被定义的区块内。</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="objects"></a></p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul><li><p><a href="#3.1">3.1</a> <a name="3.1"></a> 使用字面值创建对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> item = &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p><a href="#3.2">3.2</a> <a name="3.2"></a> 如果你的代码在浏览器环境下执行，别使用 <a href="http://es5.github.io/#x7.6.1" target="_blank" rel="noopener">保留字</a> 作为键值。这样的话在 IE8 不会运行。 <a href="https://github.com/airbnb/javascript/issues/61" target="_blank" rel="noopener">更多信息</a>。 但在 ES6 模块和服务器端中使用没有问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> superman = &#123;</span><br><span class="line">  <span class="keyword">default</span>: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</span><br><span class="line">  private: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> superman = &#123;</span><br><span class="line">  defaults: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</span><br><span class="line">  hidden: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><a href="#3.3">3.3</a> <a name="3.3"></a> 使用同义词替换需要使用的保留字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> superman = &#123;</span><br><span class="line">  class: 'alien',</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> superman = &#123;</span><br><span class="line">  klass: <span class="string">'alien'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> superman = &#123;</span><br><span class="line">  type: <span class="string">'alien'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="es6-computed-properties"></a></p></li><li><p><a href="#3.4">3.4</a> <a name="3.4"></a> 创建有动态属性名的对象时，使用可被计算的属性名称。</p><blockquote><p>为什么？因为这样可以让你在一个地方定义所有的对象属性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getKey</span>(<span class="params">k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`a key named <span class="subst">$&#123;k&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id: <span class="number">5</span>,</span><br><span class="line">  name: <span class="string">'San Francisco'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj[getKey(<span class="string">'enabled'</span>)] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id: <span class="number">5</span>,</span><br><span class="line">  name: <span class="string">'San Francisco'</span>,</span><br><span class="line">  [getKey(<span class="string">'enabled'</span>)]: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="es6-object-shorthand"></a></p></li><li><p><a href="#3.5">3.5</a> <a name="3.5"></a> 使用对象方法的简写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a name="es6-object-concise"></a></p></li><li><p><a href="#3.6">3.6</a> <a name="3.6"></a> 使用对象属性值的简写。</p><blockquote><p>为什么？因为这样更短更有描述性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">'Luke Skywalker'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker: lukeSkywalker,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><a href="#3.7">3.7</a> <a name="3.7"></a> 在对象属性声明前把简写的属性分组。</p><blockquote><p>为什么？因为这样能清楚地看出哪些属性使用了简写。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> anakinSkywalker = <span class="string">'Anakin Skywalker'</span>;</span><br><span class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">'Luke Skywalker'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  episodeOne: <span class="number">1</span>,</span><br><span class="line">  twoJedisWalkIntoACantina: <span class="number">2</span>,</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">  episodeThree: <span class="number">3</span>,</span><br><span class="line">  mayTheFourth: <span class="number">4</span>,</span><br><span class="line">  anakinSkywalker,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  lukeSkywalker,</span><br><span class="line">  anakinSkywalker,</span><br><span class="line">  episodeOne: <span class="number">1</span>,</span><br><span class="line">  twoJedisWalkIntoACantina: <span class="number">2</span>,</span><br><span class="line">  episodeThree: <span class="number">3</span>,</span><br><span class="line">  mayTheFourth: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="arrays"></a></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li><p><a href="#4.1">4.1</a> <a name="4.1"></a> 使用字面值创建数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> items = [];</span><br></pre></td></tr></table></figure></li><li><p><a href="#4.2">4.2</a> <a name="4.2"></a> 向数组添加元素时使用 Arrary#push 替代直接赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> someStack = [];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">someStack[someStack.length] = <span class="string">'abracadabra'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">someStack.push(<span class="string">'abracadabra'</span>);</span><br></pre></td></tr></table></figure><p><a name="es6-array-spreads"></a></p></li><li><p><a href="#4.3">4.3</a> <a name="4.3"></a> 使用拓展运算符 <code>...</code> 复制数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> len = items.length;</span><br><span class="line"><span class="keyword">const</span> itemsCopy = [];</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemsCopy = [...items];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组深拷贝 ES5</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = arr.concat();</span><br></pre></td></tr></table></figure></li><li><p><a href="#4.4">4.4</a> <a name="4.4"></a> 使用 Array#from 把一个类数组对象转换成数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.foo'</span>);</span><br><span class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="destructuring"></a></p><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><ul><li><p><a href="#5.1">5.1</a> <a name="5.1"></a> 使用解构存取和使用多属性对象。</p><blockquote><p>为什么？因为解构能减少临时引用属性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = user.firstName;</span><br><span class="line">  <span class="keyword">const</span> lastName = user.lastName;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = obj;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#5.2">5.2</a> <a name="5.2"></a> 对数组使用解构赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> [first, second] = arr;</span><br></pre></td></tr></table></figure></li><li><p><a href="#5.3">5.3</a> <a name="5.3"></a> 需要回传多个值时，使用对象解构，而不是数组解构。</p><blockquote><p>为什么？增加属性或者改变排序不会改变调用时的位置。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// then a miracle occurs</span></span><br><span class="line">  <span class="keyword">return</span> [left, right, top, bottom];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用时需要考虑回调数据的顺序。</span></span><br><span class="line"><span class="keyword">const</span> [left, __, top] = processInput(input);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// then a miracle occurs</span></span><br><span class="line">  <span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用时只选择需要的数据</span></span><br><span class="line"><span class="keyword">const</span> &#123; left, right &#125; = processInput(input);</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="strings"></a></p><h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><ul><li><p><a href="#6.1">6.1</a> <a name="6.1"></a> 字符串使用单引号 <code>&#39;&#39;</code> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">"Capt. Janeway"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">'Capt. Janeway'</span>;</span><br></pre></td></tr></table></figure></li><li><p><a href="#6.2">6.2</a> <a name="6.2"></a> 字符串超过 80 个字节应该使用字符串连接号换行。</p></li><li><p><a href="#6.3">6.3</a> <a name="6.3"></a> 注：过度使用字串连接符号可能会对性能造成影响。<a href="http://jsperf.com/ya-string-concat" target="_blank" rel="noopener">jsPerf</a> 和 <a href="https://github.com/airbnb/javascript/issues/40" target="_blank" rel="noopener">讨论</a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> errorMessage = <span class="string">'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> errorMessage = <span class="string">'This is a super long error that was thrown because \</span></span><br><span class="line"><span class="string">of Batman. When you stop to think about how Batman had anything to do \</span></span><br><span class="line"><span class="string">with this, you would get nowhere \</span></span><br><span class="line"><span class="string">fast.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> errorMessage = <span class="string">'This is a super long error that was thrown because '</span> +</span><br><span class="line">  <span class="string">'of Batman. When you stop to think about how Batman had anything to do '</span> +</span><br><span class="line">  <span class="string">'with this, you would get nowhere fast.'</span>;</span><br></pre></td></tr></table></figure><p><a name="es6-template-literals"></a></p></li><li><p><a href="#6.4">6.4</a> <a name="6.4"></a> 程序化生成字符串时，使用模板字符串代替字符串连接。</p><blockquote><p>为什么？模板字符串更为简洁，更具可读性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'How are you, '</span> + name + <span class="string">'?'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="string">'How are you, '</span>, name, <span class="string">'?'</span>].join();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`How are you, <span class="subst">$&#123;name&#125;</span>?`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="functions"></a></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul><li><p><a href="#7.1">7.1</a> <a name="7.1"></a> 使用函数声明代替函数表达式。</p><blockquote><p>为什么？因为函数声明是可命名的，所以他们在调用栈中更容易被识别。此外，函数声明会把整个函数提升（hoisted），而函数表达式只会把函数的引用变量名提升。这条规则使得<a href="#arrow-functions">箭头函数</a>可以取代函数表达式。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#7.2">7.2</a> <a name="7.2"></a> 函数表达式:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 立即调用的函数表达式 (IIFE)</span></span><br><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet. Please follow me.'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p><a href="#7.3">7.3</a> <a name="7.3"></a> 永远不要在一个非函数代码块（<code>if</code>、<code>while</code> 等）中声明一个函数，把那个函数赋给一个变量。浏览器允许你这么做，但它们的解析表现不一致。</p></li><li><p><a href="#7.4">7.4</a> <a name="7.4"></a> <strong>注意:</strong> ECMA-262 把 <code>block</code> 定义为一组语句。函数声明不是语句。<a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97" target="_blank" rel="noopener">阅读 ECMA-262 关于这个问题的说明</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Nope.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> test;</span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  test = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#7.5">7.5</a> <a name="7.5"></a> 永远不要把参数命名为 <code>arguments</code>。这将取代原来函数作用域内的 <code>arguments</code> 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nope</span>(<span class="params">name, options, arguments</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yup</span>(<span class="params">name, options, args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="es6-rest"></a></p></li><li><p><a href="#7.6">7.6</a> <a name="7.6"></a> 不要使用 <code>arguments</code>。可以选择 rest 语法 <code>...</code> 替代。</p><blockquote><p>为什么？使用 <code>...</code> 能明确你要传入的参数。另外 rest 参数是一个真正的数组，而 <code>arguments</code> 是一个类数组。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="es6-default-parameters"></a></p></li><li><p><a href="#7.7">7.7</a> <a name="7.7"></a> 直接给函数的参数指定默认值，不要使用一个变化的函数参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// really bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 不！我们不应该改变函数参数。</span></span><br><span class="line">  <span class="comment">// 更加糟糕: 如果参数 opts 是 false 的话，它就会被设定为一个对象。</span></span><br><span class="line">  <span class="comment">// 但这样的写法会造成一些 Bugs。</span></span><br><span class="line">  <span class="comment">//（译注：例如当 opts 被赋值为空字符串，opts 仍然会被下一行代码设定为一个空对象。）</span></span><br><span class="line">  opts = opts || &#123;&#125;;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// still bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (opts === <span class="keyword">void</span> <span class="number">0</span>) &#123;</span><br><span class="line">    opts = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#7.8">7.8</a> <a name="7.8"></a> 直接给函数参数赋值时需要避免副作用。</p><blockquote><p>为什么？因为这样的写法让人感到很困惑。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">a = b++</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">count();  <span class="comment">// 1</span></span><br><span class="line">count();  <span class="comment">// 2</span></span><br><span class="line">count(<span class="number">3</span>); <span class="comment">// 3</span></span><br><span class="line">count();  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="arrow-functions"></a></p><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><ul><li><p><a href="#8.1">8.1</a> <a name="8.1"></a> 当你必须使用函数表达式（或传递一个匿名函数）时，使用箭头函数符号。</p><blockquote><p>为什么？因为箭头函数创造了新的一个 <code>this</code> 执行环境（译注：参考 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">Arrow functions - JavaScript | MDN</a> 和 <a href="http://toddmotto.com/es6-arrow-functions-syntaxes-and-lexical-scoping/" target="_blank" rel="noopener">ES6 arrow functions, syntax and lexical scoping</a>），通常情况下都能满足你的需求，而且这样的写法更为简洁。</p></blockquote><blockquote><p>为什么不？如果你有一个相当复杂的函数，你或许可以把逻辑部分转移到一个函数声明上。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><a href="#8.2">8.2</a> <a name="8.2"></a> 如果一个函数适合用一行写出并且只有一个参数，那就把花括号、圆括号和 <code>return</code> 都省略掉。如果不是，那就不要省略。</p><blockquote><p>为什么？语法糖。在链式调用中可读性很高。</p></blockquote><blockquote><p>为什么不？当你打算回传一个对象的时候。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="function">(<span class="params">total, n</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> total + n;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="constructors"></a></p><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><ul><li><p><a href="#9.1">9.1</a> <a name="9.1"></a> 总是使用 <code>class</code>。避免直接操作 <code>prototype</code> 。</p><blockquote><p>为什么? 因为 <code>class</code> 语法更为简洁更易读。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params">contents = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._queue = [...contents];</span><br><span class="line">&#125;</span><br><span class="line">Queue.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">this</span>._queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(contents = []) &#123;</span><br><span class="line">    <span class="keyword">this</span>._queue = [...contents];</span><br><span class="line">  &#125;</span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>._queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#9.2">9.2</a> <a name="9.2"></a> 使用 <code>extends</code> 继承。</p><blockquote><p>为什么？因为 <code>extends</code> 是一个内建的原型继承方法并且不会破坏 <code>instanceof</code>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> inherits = <span class="built_in">require</span>(<span class="string">'inherits'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PeekableQueue</span>(<span class="params">contents</span>) </span>&#123;</span><br><span class="line">  Queue.apply(<span class="keyword">this</span>, contents);</span><br><span class="line">&#125;</span><br><span class="line">inherits(PeekableQueue, Queue);</span><br><span class="line">PeekableQueue.prototype.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeekableQueue</span> <span class="keyword">extends</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#9.3">9.3</a> <a name="9.3"></a> 方法可以返回 <code>this</code> 来帮助链式调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.height = height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line">luke.jump(); <span class="comment">// =&gt; true</span></span><br><span class="line">luke.setHeight(<span class="number">20</span>); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  jump() &#123;</span><br><span class="line">    <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setHeight(height) &#123;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line"></span><br><span class="line">luke.jump()</span><br><span class="line">  .setHeight(<span class="number">20</span>);</span><br></pre></td></tr></table></figure></li><li><p><a href="#9.4">9.4</a> <a name="9.4"></a> 可以写一个自定义的 <code>toString()</code> 方法，但要确保它能正常运行并且不会引起副作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = options.name || <span class="string">'no name'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Jedi - <span class="subst">$&#123;<span class="keyword">this</span>.getName()&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="modules"></a></p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul><li><p><a href="#10.1">10.1</a> <a name="10.1"></a> 总是使用模组 (<code>import</code>/<code>export</code>) 而不是其他非标准模块系统。你可以编译为你喜欢的模块系统。</p><blockquote><p>为什么？模块就是未来，让我们开始迈向未来吧。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> AirbnbStyleGuide = <span class="built_in">require</span>(<span class="string">'./AirbnbStyleGuide'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = AirbnbStyleGuide.es6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ok</span></span><br><span class="line"><span class="keyword">import</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AirbnbStyleGuide.es6;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</span><br></pre></td></tr></table></figure></li><li><p><a href="#10.2">10.2</a> <a name="10.2"></a> 不要使用通配符 import。</p><blockquote><p>为什么？这样能确保你只有一个默认 export。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> AirbnbStyleGuide <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br></pre></td></tr></table></figure></li><li><p><a href="#10.3">10.3</a> <a name="10.3"></a>不要从 import 中直接 export。</p><blockquote><p>为什么？虽然一行代码简洁明了，但让 import 和 export 各司其职让事情能保持一致。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// filename es6.js</span></span><br><span class="line"><span class="keyword">export</span> &#123; es6 <span class="keyword">as</span> <span class="keyword">default</span> &#125; <span class="keyword">from</span> <span class="string">'./airbnbStyleGuide'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// filename es6.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; es6 &#125; <span class="keyword">from</span> <span class="string">'./AirbnbStyleGuide'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> es6;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="iterators-and-generators"></a></p><h2 id="Iterators-and-Generators"><a href="#Iterators-and-Generators" class="headerlink" title="Iterators and Generators"></a>Iterators and Generators</h2><ul><li><p><a href="#11.1">11.1</a> <a name="11.1"></a> 不要使用 iterators。使用高阶函数例如 <code>map()</code> 和 <code>reduce()</code> 替代 <code>for-of</code>。</p><blockquote><p>为什么？这加强了我们不变的规则。处理纯函数的回调值更易读，这比它带来的副作用更重要。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> numbers) &#123;</span><br><span class="line">  sum += num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum === <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">numbers.forEach(<span class="function">(<span class="params">num</span>) =&gt;</span> sum += num);</span><br><span class="line">sum === <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best (use the functional force)</span></span><br><span class="line"><span class="keyword">const</span> sum = numbers.reduce(<span class="function">(<span class="params">total, num</span>) =&gt;</span> total + num, <span class="number">0</span>);</span><br><span class="line">sum === <span class="number">15</span>;</span><br></pre></td></tr></table></figure></li><li><p><a href="#11.2">11.2</a> <a name="11.2"></a> 现在还不要使用 generators。</p><blockquote><p>为什么？因为它们现在还没法很好地编译到 ES5。 (译者注：目前(2016/03) Chrome 和 Node.js 的稳定版本都已支持 generators)</p></blockquote></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="properties"></a></p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ul><li><p><a href="#12.1">12.1</a> <a name="12.1"></a> 使用 <code>.</code> 来访问对象的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> luke = &#123;</span><br><span class="line">  jedi: <span class="literal">true</span>,</span><br><span class="line">  age: <span class="number">28</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> isJedi = luke[<span class="string">'jedi'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> isJedi = luke.jedi;</span><br></pre></td></tr></table></figure></li><li><p><a href="#12.2">12.2</a> <a name="12.2"></a> 当通过变量访问属性时使用中括号 <code>[]</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> luke = &#123;</span><br><span class="line">  jedi: <span class="literal">true</span>,</span><br><span class="line">  age: <span class="number">28</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProp</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> luke[prop];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isJedi = getProp(<span class="string">'jedi'</span>);</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="variables"></a></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><p><a href="#13.1">13.1</a> <a name="13.1"></a> 一直使用 <code>const</code> 来声明变量，如果不这样做就会产生全局变量。我们需要避免全局命名空间的污染。<a href="http://www.wikiwand.com/en/Captain_Planet" target="_blank" rel="noopener">地球队长</a>已经警告过我们了。（译注：全局，global 亦有全球的意思。地球队长的责任是保卫地球环境，所以他警告我们不要造成「全球」污染。）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">superPower = <span class="keyword">new</span> SuperPower();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> superPower = <span class="keyword">new</span> SuperPower();</span><br></pre></td></tr></table></figure></li><li><p><a href="#13.2">13.2</a> <a name="13.2"></a> 使用 <code>const</code> 声明每一个变量。</p><blockquote><p>为什么？增加新变量将变的更加容易，而且你永远不用再担心调换错 <code>;</code> 跟 <code>,</code>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>,</span><br><span class="line">    dragonball = <span class="string">'z'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// (compare to above, and try to spot the mistake)</span></span><br><span class="line"><span class="keyword">const</span> items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line">    dragonball = <span class="string">'z'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> items = getItems();</span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> dragonball = <span class="string">'z'</span>;</span><br></pre></td></tr></table></figure></li><li><p><a href="#13.3">13.3</a> <a name="13.3"></a> 将所有的 <code>const</code> 和 <code>let</code> 分组</p><blockquote><p>为什么？当你需要把已赋值变量赋值给未赋值变量时非常有用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> i, len, dragonball,</span><br><span class="line">    items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">const</span> items = getItems();</span><br><span class="line"><span class="keyword">let</span> dragonball;</span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> len;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> items = getItems();</span><br><span class="line"><span class="keyword">let</span> dragonball;</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"><span class="keyword">let</span> length;</span><br></pre></td></tr></table></figure></li><li><p><a href="#13.4">13.4</a> <a name="13.4"></a> 在你需要的地方给变量赋值，但请把它们放在一个合理的位置。</p><blockquote><p>为什么？<code>let</code> 和 <code>const</code> 是块级作用域而不是函数作用域。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  test();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'doing stuff..'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//..other stuff..</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> name = getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - unnecessary function call</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">hasName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!hasName) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.setFirstName(name);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">hasName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!hasName) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> name = getName();</span><br><span class="line">  <span class="keyword">this</span>.setFirstName(name);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="hoisting"></a></p><h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><ul><li><p><a href="#14.1">14.1</a> <a name="14.1"></a> <code>var</code> 声明会被提升至该作用域的顶部，但它们赋值不会提升。<code>let</code> 和 <code>const</code> 被赋予了一种称为「<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone_and_errors_with_let" target="_blank" rel="noopener">暂时性死区（Temporal Dead Zones, TDZ）</a>」的概念。这对于了解为什么 <a href="http://es-discourse.com/t/why-typeof-is-no-longer-safe/15" target="_blank" rel="noopener">type of 不再安全</a>相当重要。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们知道这样运行不了</span></span><br><span class="line"><span class="comment">// （假设 notDefined 不是全局变量）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(notDefined); <span class="comment">// =&gt; throws a ReferenceError</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于变量提升的原因，</span></span><br><span class="line"><span class="comment">// 在引用变量后再声明变量是可以运行的。</span></span><br><span class="line"><span class="comment">// 注：变量的赋值 `true` 不会被提升。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></span><br><span class="line">  <span class="keyword">var</span> declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译器会把函数声明提升到作用域的顶层，</span></span><br><span class="line"><span class="comment">// 这意味着我们的例子可以改写成这样：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> declaredButNotAssigned;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></span><br><span class="line">  declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 const 和 let</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; throws a ReferenceError</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> declaredButNotAssigned); <span class="comment">// =&gt; throws a ReferenceError</span></span><br><span class="line">  <span class="keyword">const</span> declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#14.2">14.2</a> <a name="14.2"></a> 匿名函数表达式的变量名会被提升，但函数内容并不会。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(anonymous); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  anonymous(); <span class="comment">// =&gt; TypeError anonymous is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'anonymous function expression'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#14.3">14.3</a> <a name="14.3"></a> 命名的函数表达式的变量名会被提升，但函数名和函数函数内容并不会。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  superPower(); <span class="comment">// =&gt; ReferenceError superPower is not defined</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the same is true when the function name</span></span><br><span class="line"><span class="comment">// is the same as the variable name.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'named'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#14.4">14.4</a> <a name="14.4"></a> 函数声明的名称和函数体都会被提升。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  superPower(); <span class="comment">// =&gt; Flying</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>想了解更多信息，参考 <a href="http://www.adequatelygood.com/" target="_blank" rel="noopener">Ben Cherry</a> 的 <a href="http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting" target="_blank" rel="noopener">JavaScript Scoping &amp; Hoisting</a>。</p></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="comparison-operators--equality"></a></p><h2 id="比较运算符和等号"><a href="#比较运算符和等号" class="headerlink" title="比较运算符和等号"></a>比较运算符和等号</h2><ul><li><a href="#15.1">15.1</a> <a name="15.1"></a> 优先使用 <code>===</code> 和 <code>!==</code> 而不是 <code>==</code> 和 <code>!=</code>.</li><li><p><a href="#15.2">15.2</a> <a name="15.2"></a> 条件表达式例如 <code>if</code> 语句通过抽象方法 <code>ToBoolean</code> 强制计算它们的表达式并且总是遵守下面的规则：</p><ul><li><strong>对象</strong> 被计算为 <strong>true</strong></li><li><strong>Undefined</strong> 被计算为 <strong>false</strong></li><li><strong>Null</strong> 被计算为 <strong>false</strong></li><li><strong>布尔值</strong> 被计算为 <strong>布尔的值</strong></li><li><strong>数字</strong> 如果是 <strong>+0、-0、或 NaN</strong> 被计算为 <strong>false</strong>, 否则为 <strong>true</strong></li><li><strong>字符串</strong> 如果是空字符串 <code>&#39;&#39;</code> 被计算为 <strong>false</strong>，否则为 <strong>true</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([<span class="number">0</span>]) &#123;</span><br><span class="line">  <span class="comment">// true</span></span><br><span class="line">  <span class="comment">// An array is an object, objects evaluate to true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#15.3">15.3</a> <a name="15.3"></a> 使用简写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (name !== <span class="string">''</span>) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (name) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (collection.length) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#15.4">15.4</a> <a name="15.4"></a> 想了解更多信息，参考 Angus Croll 的 <a href="http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108" target="_blank" rel="noopener">Truth Equality and JavaScript</a>。</p></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="blocks"></a></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><ul><li><p><a href="#16.1">16.1</a> <a name="16.1"></a> 使用大括号包裹所有的多行代码块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (test)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#16.2">16.2</a> <a name="16.2"></a> 如果通过 <code>if</code> 和 <code>else</code> 使用多行代码块，把 <code>else</code> 放在 <code>if</code> 代码块关闭括号的同一行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">  thing2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  thing3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">  thing2();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  thing3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="comments"></a></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li><p><a href="#17.1">17.1</a> <a name="17.1"></a> 使用 <code>/** ... */</code> 作为多行注释。包含描述、指定所有参数和返回值的类型和值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// make() returns a new element</span></span><br><span class="line"><span class="comment">// based on the passed in tag name</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @param &#123;String&#125; tag</span></span><br><span class="line"><span class="comment">// @return &#123;Element&#125; element</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * make() returns a new element</span></span><br><span class="line"><span class="comment"> * based on the passed in tag name</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; tag</span></span><br><span class="line"><span class="comment"> * @return &#123;Element&#125; element</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#17.2">17.2</a> <a name="17.2"></a> 使用 <code>//</code> 作为单行注释。在评论对象上面另起一行使用单行注释。在注释前插入空行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;  <span class="comment">// is current tab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// is current tab</span></span><br><span class="line"><span class="keyword">const</span> active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">this</span>._type || <span class="string">'no type'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#17.3">17.3</a> <a name="17.3"></a> 给注释增加 <code>FIXME</code> 或 <code>TODO</code> 的前缀可以帮助其他开发者快速了解这是一个需要复查的问题，或是给需要实现的功能提供一个解决方式。这将有别于常见的注释，因为它们是可操作的。使用 <code>FIXME -- need to figure this out</code> 或者 <code>TODO -- need to implement</code>。</p></li><li><p><a href="#17.4">17.4</a> <a name="17.4"></a> 使用 <code>// FIXME</code>: 标注问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">FIXME:</span> shouldn't use a global here</span></span><br><span class="line">    total = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#17.5">17.5</a> <a name="17.5"></a> 使用 <code>// TODO</code>: 标注问题的解决方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> total should be configurable by an options param</span></span><br><span class="line">    <span class="keyword">this</span>.total = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="whitespace"></a></p><h2 id="空白"><a href="#空白" class="headerlink" title="空白"></a>空白</h2><ul><li><p><a href="#18.1">18.1</a> <a name="18.1"></a> 使用 2 个空格作为缩进。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">∙∙∙∙<span class="keyword">const</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">∙<span class="keyword">const</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">∙∙<span class="keyword">const</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#18.2">18.2</a> <a name="18.2"></a> 在花括号前放一个空格。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">dog.set(<span class="string">'attr'</span>,&#123;</span><br><span class="line">  age: <span class="string">'1 year'</span>,</span><br><span class="line">  breed: <span class="string">'Bernese Mountain Dog'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">dog.set(<span class="string">'attr'</span>, &#123;</span><br><span class="line">  age: <span class="string">'1 year'</span>,</span><br><span class="line">  breed: <span class="string">'Bernese Mountain Dog'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><a href="#18.3">18.3</a> <a name="18.3"></a> 在控制语句（<code>if</code>、<code>while</code> 等）的小括号前放一个空格。在函数调用及声明中，不在函数的参数列表前加空格。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span>(isJedi) &#123;</span><br><span class="line">  fight ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (isJedi) &#123;</span><br><span class="line">  fight();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log (<span class="string">'Swooosh!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Swooosh!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#18.4">18.4</a> <a name="18.4"></a> 使用空格把运算符隔开。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> x=y+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> x = y + <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li><li><p><a href="#18.5">18.5</a> <a name="18.5"></a> 在文件末尾插入一个空行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;)(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;)(<span class="keyword">this</span>);↵</span><br><span class="line">↵</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;)(<span class="keyword">this</span>);↵</span><br></pre></td></tr></table></figure></li><li><p><a href="#18.5">18.5</a> <a name="18.5"></a> 在使用长方法链时进行缩进。使用前面的点 <code>.</code> 强调这是方法调用而不是新语句。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'#items'</span>).find(<span class="string">'.selected'</span>).highlight().end().find(<span class="string">'.open'</span>).updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'#items'</span>).</span><br><span class="line">  find(<span class="string">'.selected'</span>).</span><br><span class="line">    highlight().</span><br><span class="line">    end().</span><br><span class="line">  find(<span class="string">'.open'</span>).</span><br><span class="line">    updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'#items'</span>)</span><br><span class="line">  .find(<span class="string">'.selected'</span>)</span><br><span class="line">    .highlight()</span><br><span class="line">    .end()</span><br><span class="line">  .find(<span class="string">'.open'</span>)</span><br><span class="line">    .updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> leds = stage.selectAll(<span class="string">'.led'</span>).data(data).enter().append(<span class="string">'svg:svg'</span>).class(<span class="string">'led'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>).append(<span class="string">'svg:g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</span><br><span class="line">    .call(tron.led);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> leds = stage.selectAll(<span class="string">'.led'</span>)</span><br><span class="line">    .data(data)</span><br><span class="line">  .enter().append(<span class="string">'svg:svg'</span>)</span><br><span class="line">    .classed(<span class="string">'led'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>)</span><br><span class="line">  .append(<span class="string">'svg:g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</span><br><span class="line">    .call(tron.led);</span><br></pre></td></tr></table></figure></li><li><p><a href="#18.6">18.6</a> <a name="18.6"></a> 在块末和新语句前插入空行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> baz;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> baz;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  bar() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  foo() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  bar() &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="commas"></a></p><h2 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a>逗号</h2><ul><li><p><a href="#19.1">19.1</a> <a name="19.1"></a> 行首逗号：<strong>不需要</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> story = [</span><br><span class="line">    once</span><br><span class="line">  , upon</span><br><span class="line">  , aTime</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> story = [</span><br><span class="line">  once,</span><br><span class="line">  upon,</span><br><span class="line">  aTime,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">    firstName: <span class="string">'Ada'</span></span><br><span class="line">  , <span class="attr">lastName</span>: <span class="string">'Lovelace'</span></span><br><span class="line">  , <span class="attr">birthYear</span>: <span class="number">1815</span></span><br><span class="line">  , <span class="attr">superPower</span>: <span class="string">'computers'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Ada'</span>,</span><br><span class="line">  lastName: <span class="string">'Lovelace'</span>,</span><br><span class="line">  birthYear: <span class="number">1815</span>,</span><br><span class="line">  superPower: <span class="string">'computers'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><a href="#19.2">19.2</a> <a name="19.2"></a> 增加结尾的逗号: <strong>需要</strong>。</p><blockquote><p>为什么? 这会让 git diffs 更干净。另外，像 babel 这样的转译器会移除结尾多余的逗号，也就是说你不必担心老旧浏览器的<a href="es5/README.md#commas">尾逗号问题</a>。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad - git diff without trailing comma</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">     firstName: <span class="string">'Florence'</span>,</span><br><span class="line">-    lastName: <span class="string">'Nightingale'</span></span><br><span class="line">+    lastName: <span class="string">'Nightingale'</span>,</span><br><span class="line">+    inventorOf: [<span class="string">'coxcomb graph'</span>, <span class="string">'modern nursing'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good - git diff with trailing comma</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">     firstName: <span class="string">'Florence'</span>,</span><br><span class="line">     lastName: <span class="string">'Nightingale'</span>,</span><br><span class="line">+    inventorOf: [<span class="string">'coxcomb chart'</span>, <span class="string">'modern nursing'</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Dana'</span>,</span><br><span class="line">  lastName: <span class="string">'Scully'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Dana'</span>,</span><br><span class="line">  lastName: <span class="string">'Scully'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="semicolons"></a></p><h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><ul><li><p><a href="#20.1">20.1</a> <a name="20.1"></a> <strong>使用分号</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">'Skywalker'</span></span><br><span class="line">  <span class="keyword">return</span> name</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">'Skywalker'</span>;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good (防止函数在两个 IIFE 合并时被当成一个参数)</span></span><br><span class="line">;<span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">'Skywalker'</span>;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><a href="http://stackoverflow.com/a/7365214/1712802" target="_blank" rel="noopener">Read more</a>.</p></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="type-casting--coercion"></a></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li><a href="#21.1">21.1</a> <a name="21.1"></a> 在语句开始时执行类型转换。</li><li><p><a href="#21.2">21.2</a> <a name="21.2"></a> 字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  =&gt; this.reviewScore = 9;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> totalScore = <span class="built_in">String</span>(<span class="keyword">this</span>.reviewScore);</span><br></pre></td></tr></table></figure></li><li><p><a href="#21.3">21.3</a> <a name="21.3"></a> 对数字使用 <code>parseInt</code> 转换，并带上类型转换的基数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inputValue = <span class="string">'4'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="keyword">new</span> <span class="built_in">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = +inputValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">parseInt</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> val = <span class="built_in">parseInt</span>(inputValue, <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li><li><p><a href="#21.4">21.4</a> <a name="21.4"></a> 如果因为某些原因 parseInt 成为你所做的事的瓶颈而需要使用位操作解决<a href="http://jsperf.com/coercion-vs-casting/3" target="_blank" rel="noopener">性能问题</a>时，留个注释说清楚原因和你的目的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 parseInt 导致我的程序变慢，</span></span><br><span class="line"><span class="comment"> * 改成使用位操作转换数字快多了。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p><a href="#21.5">21.5</a> <a name="21.5"></a> <strong>注:</strong> 小心使用位操作运算符。数字会被当成 <a href="http://es5.github.io/#x4.3.19" target="_blank" rel="noopener">64 位值</a>，但是位操作运算符总是返回 32 位的整数（<a href="http://es5.github.io/#x11.7" target="_blank" rel="noopener">参考</a>）。位操作处理大于 32 位的整数值时还会导致意料之外的行为。<a href="https://github.com/airbnb/javascript/issues/109" target="_blank" rel="noopener">关于这个问题的讨论</a>。最大的 32 位整数是 2,147,483,647：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2147483647</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; 2147483647</span></span><br><span class="line"><span class="number">2147483648</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483648</span></span><br><span class="line"><span class="number">2147483649</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483647</span></span><br></pre></td></tr></table></figure></li><li><p><a href="#21.6">21.6</a> <a name="21.6"></a> 布尔:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> hasAge = <span class="keyword">new</span> <span class="built_in">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hasAge = <span class="built_in">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> hasAge = !!age;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="naming-conventions"></a></p><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><ul><li><p><a href="#22.1">22.1</a> <a name="22.1"></a> 避免单字母命名。命名应具备描述性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ..stuff..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#22.2">22.2</a> <a name="22.2"></a> 使用驼峰式命名对象、函数和实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> OBJEcttsssss = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> this_is_my_object = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> thisIsMyObject = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thisIsMyFunction</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#22.3">22.3</a> <a name="22.3"></a> 使用帕斯卡式命名构造函数或类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = options.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bad = <span class="keyword">new</span> user(&#123;</span><br><span class="line">  name: <span class="string">'nope'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = options.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> good = <span class="keyword">new</span> User(&#123;</span><br><span class="line">  name: <span class="string">'yup'</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><a href="#22.4">22.4</a> <a name="22.4"></a> 不要使用下划线 <code>_</code> 结尾或开头来命名属性和方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">this</span>.__firstName__ = <span class="string">'Panda'</span>;</span><br><span class="line"><span class="keyword">this</span>.firstName_ = <span class="string">'Panda'</span>;</span><br><span class="line"><span class="keyword">this</span>._firstName = <span class="string">'Panda'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">this</span>.firstName = <span class="string">'Panda'</span>;</span><br></pre></td></tr></table></figure></li><li><p><a href="#22.5">22.5</a> <a name="22.5"></a> 别保存 <code>this</code> 的引用。使用箭头函数或 Function#bind。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(self);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(that);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#22.6">22.6</a> <a name="22.6"></a> 如果你的文件只输出一个类，那你的文件名必须和类名完全保持一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file contents</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckBox</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> CheckBox;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in some other file</span></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./checkBox'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./check_box'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> CheckBox <span class="keyword">from</span> <span class="string">'./CheckBox'</span>;</span><br></pre></td></tr></table></figure></li><li><p><a href="#22.7">22.7</a> <a name="22.7"></a> 当你导出默认的函数时使用驼峰式命名。你的文件名必须和函数名完全保持一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeStyleGuide</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> makeStyleGuide;</span><br></pre></td></tr></table></figure></li><li><p><a href="#22.8">22.8</a> <a name="22.8"></a> 当你导出单例、函数库、空对象时使用帕斯卡式命名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AirbnbStyleGuide = &#123;</span><br><span class="line">  es6: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> AirbnbStyleGuide;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="accessors"></a></p><h2 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h2><ul><li><a href="#23.1">23.1</a> <a name="23.1"></a> 属性的存取函数不是必须的。</li><li><p><a href="#23.2">23.2</a> <a name="23.2"></a> 如果你需要存取函数时使用 <code>getVal()</code> 和 <code>setVal(&#39;hello&#39;)</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">dragon.age();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">dragon.getAge();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">dragon.age(<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">dragon.setAge(<span class="number">25</span>);</span><br></pre></td></tr></table></figure></li><li><p><a href="#23.3">23.3</a> <a name="23.3"></a> 如果属性是布尔值，使用 <code>isVal()</code> 或 <code>hasVal()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.age()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.hasAge()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#23.4">23.4</a> <a name="23.4"></a> 创建 <code>get()</code> 和 <code>set()</code> 函数是可以的，但要保持一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jedi</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> lightsaber = options.lightsaber || <span class="string">'blue'</span>;</span><br><span class="line">    <span class="keyword">this</span>.set(<span class="string">'lightsaber'</span>, lightsaber);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set(key, val) &#123;</span><br><span class="line">    <span class="keyword">this</span>[key] = val;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get(key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="events"></a></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul><li><p><a href="#24.1">24.1</a> <a name="24.1"></a> 当给事件附加数据时（无论是 DOM 事件还是私有事件），传入一个哈希而不是原始值。这样可以让后面的贡献者增加更多数据到事件数据而无需找出并更新事件的每一个处理器。例如，不好的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, listing.id);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, listingId</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something with listingId</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>更好的写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, &#123; <span class="attr">listingId</span> : listing.id &#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e, data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something with data.listingId</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p></li></ul><h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><ul><li><p><a href="#25.1">25.1</a> <a name="25.1"></a> 使用 <code>$</code> 作为存储 jQuery 对象的变量名前缀。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> $sidebar = $(<span class="string">'.sidebar'</span>);</span><br></pre></td></tr></table></figure></li><li><p><a href="#25.2">25.2</a> <a name="25.2"></a> 缓存 jQuery 查询。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'.sidebar'</span>).hide();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  $(<span class="string">'.sidebar'</span>).css(&#123;</span><br><span class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> $sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line">  $sidebar.hide();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  $sidebar.css(&#123;</span><br><span class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="#25.3">25.3</a> <a name="25.3"></a> 对 DOM 查询使用层叠 <code>$(&#39;.sidebar ul&#39;)</code> 或 父元素 &gt; 子元素 <code>$(&#39;.sidebar &gt; ul&#39;)</code>。 <a href="http://jsperf.com/jquery-find-vs-context-sel/16" target="_blank" rel="noopener">jsPerf</a></p></li><li><p><a href="#25.4">25.4</a> <a name="25.4"></a> 对有作用域的 jQuery 对象查询使用 <code>find</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'ul'</span>, <span class="string">'.sidebar'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'.sidebar'</span>).find(<span class="string">'ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'.sidebar ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'.sidebar &gt; ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$sidebar.find(<span class="string">'ul'</span>).hide();</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="ecmascript-5-compatibility"></a></p><h2 id="ECMAScript-5-兼容性"><a href="#ECMAScript-5-兼容性" class="headerlink" title="ECMAScript 5 兼容性"></a>ECMAScript 5 兼容性</h2><ul><li><a href="#26.1">26.1</a> <a name="26.1"></a> 参考 <a href="https://twitter.com/kangax/" target="_blank" rel="noopener">Kangax</a> 的 ES5 <a href="http://kangax.github.com/es5-compat-table/" target="_blank" rel="noopener">兼容性</a>。</li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="ecmascript-6-styles"></a></p><h2 id="ECMAScript-6-规范"><a href="#ECMAScript-6-规范" class="headerlink" title="ECMAScript 6 规范"></a>ECMAScript 6 规范</h2><ul><li><a href="#27.1">27.1</a> <a name="27.1"></a> 以下是链接到 ES6 各个特性的列表。</li></ul><ol><li><a href="#arrow-functions">箭头函数</a></li><li><a href="#constructors">类</a></li><li><a href="#es6-object-shorthand">对象方法简写</a></li><li><a href="#es6-object-concise">对象属性简写</a></li><li><a href="#es6-computed-properties">对象中的可计算属性</a></li><li><a href="#es6-template-literals">模板字符串</a></li><li><a href="#destructuring">解构</a></li><li><a href="#es6-default-parameters">默认参数</a></li><li><a href="#es6-rest">Rest</a></li><li><a href="#es6-array-spreads">数组 Spreads</a></li><li><a href="#references">Let 及 Const</a></li><li><a href="#iterators-and-generators">迭代器和生成器</a></li><li><a href="#modules">模块</a></li></ol><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="testing"></a></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li><p><a href="#28.1">28.1</a> <a name="28.1"></a> <strong>Yup.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p><p><a name="resources"></a></p><h2 id="相关资源（英文）"><a href="#相关资源（英文）" class="headerlink" title="相关资源（英文）"></a>相关资源（英文）</h2><p><strong>了解 ES6</strong></p><ul><li><a href="https://people.mozilla.org/~jorendorff/es6-draft.html" target="_blank" rel="noopener">ECMA 2015 (ES6) 规范草案</a></li><li><a href="http://exploringjs.com/" target="_blank" rel="noopener">ExploringJS</a></li><li><a href="https://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener">ES6 兼容性表</a></li><li><a href="http://es6-features.org/" target="_blank" rel="noopener">ES6 特性全面概况</a></li></ul><p><strong><a href="#table-of-contents">⬆ 返回目录</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;用更合理的方式写 JavaScript&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;table-of-contents&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;
      
    
    </summary>
    
      <category term="前端规范" scheme="https://syhyz1990.github.io/categories/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="JS,ECMAScript6" scheme="https://syhyz1990.github.io/tags/JS-ECMAScript6/"/>
    
  </entry>
  
  <entry>
    <title>ECMAScript5 前端规范</title>
    <link href="https://syhyz1990.github.io/wiki/ecmascript5-standard.html"/>
    <id>https://syhyz1990.github.io/wiki/ecmascript5-standard.html</id>
    <published>2018-03-24T11:24:19.000Z</published>
    <updated>2018-06-05T08:23:06.540Z</updated>
    
    <content type="html"><![CDATA[<p><em>用更合理的方式写 JavaScript</em></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><a name="table-of-contents">目录</a></h2><ol><li><a href="#types">类型</a></li><li><a href="#objects">对象</a></li><li><a href="#arrays">数组</a></li><li><a href="#strings">字符串</a></li><li><a href="#functions">函数</a></li><li><a href="#properties">属性</a></li><li><a href="#variables">变量</a></li><li><a href="#hoisting">提升</a></li><li><a href="#comparison-operators--equality">比较运算符 &amp; 等号</a></li><li><a href="#blocks">块</a></li><li><a href="#comments">注释</a></li><li><a href="#whitespace">空白</a></li><li><a href="#commas">逗号</a></li><li><a href="#semicolons">分号</a></li><li><a href="#type-casting--coercion">类型转化</a></li><li><a href="#naming-conventions">命名规则</a></li><li><a href="#accessors">存取器</a></li><li><a href="#constructors">构造函数</a></li><li><a href="#events">事件</a></li><li><a href="#modules">模块</a></li><li><a href="#jquery">jQuery</a></li><li><a href="#ecmascript-5-compatibility">ECMAScript 5 兼容性</a></li><li><a href="#testing">测试</a></li></ol><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a><a name="types">类型</a></h2><ul><li><p><strong>原始值</strong>: 存取直接作用于它自身。</p><ul><li><code>string</code></li><li><code>number</code></li><li><code>boolean</code></li><li><code>null</code></li><li><code>undefined</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> bar = foo;</span><br><span class="line"></span><br><span class="line">bar = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo, bar); <span class="comment">// =&gt; 1, 9</span></span><br></pre></td></tr></table></figure></li><li><p><strong>复杂类型</strong>: 存取时作用于它自身值的引用。</p><ul><li><code>object</code></li><li><code>array</code></li><li><code>function</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> bar = foo;</span><br><span class="line"></span><br><span class="line">bar[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>], bar[<span class="number">0</span>]); <span class="comment">// =&gt; 9, 9</span></span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a><a name="objects">对象</a></h2><ul><li><p>使用直接量创建对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> item = &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>不要使用<a href="http://es5.github.io/#x7.6.1" target="_blank" rel="noopener">保留字</a>作为键名，它们在 IE8 下不工作。<a href="https://github.com/airbnb/javascript/issues/61" target="_blank" rel="noopener">更多信息</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">  <span class="keyword">default</span>: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</span><br><span class="line">  private: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">  defaults: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</span><br><span class="line">  hidden: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>使用同义词替换需要使用的保留字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">  class: 'alien'</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">  klass: <span class="string">'alien'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> superman = &#123;</span><br><span class="line">  type: <span class="string">'alien'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><a name="arrays">数组</a></h2><ul><li><p>使用直接量创建数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> items = [];</span><br></pre></td></tr></table></figure></li><li><p>向数组增加元素时使用 Array#push 来替代直接赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> someStack = [];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">someStack[someStack.length] = <span class="string">'abracadabra'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">someStack.push(<span class="string">'abracadabra'</span>);</span><br></pre></td></tr></table></figure></li><li><p>当你需要拷贝数组时，使用 Array#slice。<a href="http://jsperf.com/converting-arguments-to-an-array/7" target="_blank" rel="noopener">jsPerf</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> len = items.length;</span><br><span class="line"><span class="keyword">var</span> itemsCopy = [];</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">itemsCopy = items.slice();</span><br></pre></td></tr></table></figure></li><li><p>使用 Array#slice 将类数组对象转换成数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trigger</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><a name="strings">字符串</a></h2><ul><li><p>使用单引号 <code>&#39;&#39;</code> 包裹字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"Bob Parr"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'Bob Parr'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> fullName = <span class="string">"Bob "</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> fullName = <span class="string">'Bob '</span> + <span class="keyword">this</span>.lastName;</span><br></pre></td></tr></table></figure></li><li><p>超过 100 个字符的字符串应该使用连接符写成多行。</p></li><li><p>注：若过度使用，通过连接符连接的长字符串可能会影响性能。<a href="http://jsperf.com/ya-string-concat" target="_blank" rel="noopener">jsPerf</a> &amp; <a href="https://github.com/airbnb/javascript/issues/40" target="_blank" rel="noopener">讨论</a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because \</span></span><br><span class="line"><span class="string">of Batman. When you stop to think about how Batman had anything to do \</span></span><br><span class="line"><span class="string">with this, you would get nowhere \</span></span><br><span class="line"><span class="string">fast.'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> errorMessage = <span class="string">'This is a super long error that was thrown because '</span> +</span><br><span class="line">  <span class="string">'of Batman. When you stop to think about how Batman had anything to do '</span> +</span><br><span class="line">  <span class="string">'with this, you would get nowhere fast.'</span>;</span><br></pre></td></tr></table></figure></li><li><p>程序化生成的字符串使用 Array#join 连接而不是使用连接符。尤其是 IE 下：<a href="http://jsperf.com/string-vs-array-concat/2" target="_blank" rel="noopener">jsPerf</a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> items;</span><br><span class="line"><span class="keyword">var</span> messages;</span><br><span class="line"><span class="keyword">var</span> length;</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"></span><br><span class="line">messages = [&#123;</span><br><span class="line">  state: <span class="string">'success'</span>,</span><br><span class="line">  message: <span class="string">'This one worked.'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  state: <span class="string">'success'</span>,</span><br><span class="line">  message: <span class="string">'This one worked as well.'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">  state: <span class="string">'error'</span>,</span><br><span class="line">  message: <span class="string">'This one did not work.'</span></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">length = messages.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inbox</span>(<span class="params">messages</span>) </span>&#123;</span><br><span class="line">  items = <span class="string">'&lt;ul&gt;'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    items += <span class="string">'&lt;li&gt;'</span> + messages[i].message + <span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> items + <span class="string">'&lt;/ul&gt;'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inbox</span>(<span class="params">messages</span>) </span>&#123;</span><br><span class="line">  items = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="comment">// use direct assignment in this case because we're micro-optimizing.</span></span><br><span class="line">    items[i] = <span class="string">'&lt;li&gt;'</span> + messages[i].message + <span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'&lt;ul&gt;'</span> + items.join(<span class="string">''</span>) + <span class="string">'&lt;/ul&gt;'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a><a name="functions">函数</a></h2><ul><li><p>函数表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名函数表达式</span></span><br><span class="line"><span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名函数表达式</span></span><br><span class="line"><span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即调用的函数表达式（IIFE）</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet. Please follow me.'</span>);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></li><li><p>永远不要在一个非函数代码块（if、while 等）中声明一个函数，浏览器允许你这么做，但它们的解析表现不一致，正确的做法是：在块外定义一个变量，然后将函数赋值给它。</p></li><li><p><strong>注：</strong> ECMA-262 把 <code>块</code> 定义为一组语句。函数声明不是语句。<a href="http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf#page=97" target="_blank" rel="noopener">阅读对 ECMA-262 这个问题的说明</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Nope.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> test;</span><br><span class="line"><span class="keyword">if</span> (currentUser) &#123;</span><br><span class="line">  test = <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>永远不要把参数命名为 <code>arguments</code>。这将取代函数作用域内的 <code>arguments</code> 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">nope</span>(<span class="params">name, options, arguments</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yup</span>(<span class="params">name, options, args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a><a name="properties">属性</a></h2><ul><li><p>使用 <code>.</code> 来访问对象的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> luke = &#123;</span><br><span class="line">  jedi: <span class="literal">true</span>,</span><br><span class="line">  age: <span class="number">28</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> isJedi = luke[<span class="string">'jedi'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> isJedi = luke.jedi;</span><br></pre></td></tr></table></figure></li><li><p>当通过变量访问属性时使用中括号 <code>[]</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> luke = &#123;</span><br><span class="line">  jedi: <span class="literal">true</span>,</span><br><span class="line">  age: <span class="number">28</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProp</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> luke[prop];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isJedi = getProp(<span class="string">'jedi'</span>);</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a><a name="variables">变量</a></h2><ul><li><p>总是使用 <code>var</code> 来声明变量。不这么做将导致产生全局变量。我们要避免污染全局命名空间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">superPower = <span class="keyword">new</span> SuperPower();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> superPower = <span class="keyword">new</span> SuperPower();</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>var</code> 声明每一个变量。<br>这样做的好处是增加新变量将变的更加容易，而且你永远不用再担心调换错 <code>;</code> 跟 <code>,</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>,</span><br><span class="line">    dragonball = <span class="string">'z'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// （跟上面的代码比较一下，看看哪里错了）</span></span><br><span class="line"><span class="keyword">var</span> items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line">    dragonball = <span class="string">'z'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> items = getItems();</span><br><span class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> dragonball = <span class="string">'z'</span>;</span><br></pre></td></tr></table></figure></li><li><p>最后再声明未赋值的变量。当你需要引用前面的变量赋值时这将变的很有用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> i, len, dragonball,</span><br><span class="line">    items = getItems(),</span><br><span class="line">    goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="keyword">var</span> items = getItems();</span><br><span class="line"><span class="keyword">var</span> dragonball;</span><br><span class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> len;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> items = getItems();</span><br><span class="line"><span class="keyword">var</span> goSportsTeam = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> dragonball;</span><br><span class="line"><span class="keyword">var</span> length;</span><br><span class="line"><span class="keyword">var</span> i;</span><br></pre></td></tr></table></figure></li><li><p>在作用域顶部声明变量。这将帮你避免变量声明提升相关的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  test();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'doing stuff..'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//..other stuff..</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> name = getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = getName();</span><br><span class="line"></span><br><span class="line">  test();</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'doing stuff..'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//..other stuff..</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name === <span class="string">'test'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad - 不必要的函数调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.setFirstName(name);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  name = getName();</span><br><span class="line">  <span class="keyword">this</span>.setFirstName(name);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a><a name="hoisting">提升</a></h2><ul><li><p>变量声明会提升至作用域顶部，但赋值不会。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们知道这样不能正常工作（假设这里没有名为 notDefined 的全局变量）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(notDefined); <span class="comment">// =&gt; throws a ReferenceError</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但由于变量声明提升的原因，在一个变量引用后再创建它的变量声明将可以正常工作。</span></span><br><span class="line"><span class="comment">// 注：变量赋值为 `true` 不会提升。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></span><br><span class="line">  <span class="keyword">var</span> declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解释器会把变量声明提升到作用域顶部，意味着我们的例子将被重写成：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> declaredButNotAssigned;</span><br><span class="line">  <span class="built_in">console</span>.log(declaredButNotAssigned); <span class="comment">// =&gt; undefined</span></span><br><span class="line">  declaredButNotAssigned = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>匿名函数表达式会提升它们的变量名，但不会提升函数的赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(anonymous); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  anonymous(); <span class="comment">// =&gt; TypeError anonymous is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'anonymous function expression'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>命名函数表达式会提升变量名，但不会提升函数名或函数体。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  superPower(); <span class="comment">// =&gt; ReferenceError superPower is not defined</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当函数名跟变量名一样时，表现也是如此。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(named); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line">  named(); <span class="comment">// =&gt; TypeError named is not a function</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> named = <span class="function"><span class="keyword">function</span> <span class="title">named</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'named'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数声明提升它们的名字和函数体。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  superPower(); <span class="comment">// =&gt; Flying</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">superPower</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Flying'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>了解更多信息在 <a href="http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting" target="_blank" rel="noopener">JavaScript Scoping &amp; Hoisting</a> by <a href="http://www.adequatelygood.com/" target="_blank" rel="noopener">Ben Cherry</a>.</p></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="比较运算符-amp-等号"><a href="#比较运算符-amp-等号" class="headerlink" title="比较运算符 &amp; 等号"></a><a name="comparison-operators--equality">比较运算符 &amp; 等号</a></h2><ul><li>优先使用 <code>===</code> 和 <code>!==</code> 而不是 <code>==</code> 和 <code>!=</code>.</li><li><p>条件表达式例如 <code>if</code> 语句通过抽象方法 <code>ToBoolean</code> 强制计算它们的表达式并且总是遵守下面的规则：</p><ul><li><strong>对象</strong> 被计算为 <strong>true</strong></li><li><strong>Undefined</strong> 被计算为 <strong>false</strong></li><li><strong>Null</strong> 被计算为 <strong>false</strong></li><li><strong>布尔值</strong> 被计算为 <strong>布尔的值</strong></li><li><strong>数字</strong> 如果是 <strong>+0、-0 或 NaN</strong> 被计算为 <strong>false</strong>，否则为 <strong>true</strong></li><li><strong>字符串</strong> 如果是空字符串 <code>&#39;&#39;</code> 被计算为 <strong>false</strong>，否则为 <strong>true</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ([<span class="number">0</span>]) &#123;</span><br><span class="line">  <span class="comment">// true</span></span><br><span class="line">  <span class="comment">// 一个数组就是一个对象，对象被计算为 true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用快捷方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (name !== <span class="string">''</span>) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (name) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (collection.length) &#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>了解更多信息在 <a href="http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108" target="_blank" rel="noopener">Truth Equality and JavaScript</a> by Angus Croll.</p></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="块"><a href="#块" class="headerlink" title="块"></a><a name="blocks">块</a></h2><ul><li><p>使用大括号包裹所有的多行代码块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (test)</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果通过 <code>if</code> 和 <code>else</code> 使用多行代码块，把 <code>else</code> 放在 <code>if</code> 代码块关闭括号的同一行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">  thing2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  thing3();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (test) &#123;</span><br><span class="line">  thing1();</span><br><span class="line">  thing2();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  thing3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a><a name="comments">注释</a></h2><ul><li><p>使用 <code>/** ... */</code> 作为多行注释。包含描述、指定所有参数和返回值的类型和值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="comment">// make() returns a new element</span></span><br><span class="line"><span class="comment">// based on the passed in tag name</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// @param &#123;String&#125; tag</span></span><br><span class="line"><span class="comment">// @return &#123;Element&#125; element</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * make() returns a new element</span></span><br><span class="line"><span class="comment"> * based on the passed in tag name</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; tag</span></span><br><span class="line"><span class="comment"> * @return &#123;Element&#125; element</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">make</span>(<span class="params">tag</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>//</code> 作为单行注释。在评论对象上面另起一行使用单行注释。在注释前插入空行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> active = <span class="literal">true</span>;  <span class="comment">// is current tab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">// is current tab</span></span><br><span class="line"><span class="keyword">var</span> active = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">var</span> type = <span class="keyword">this</span>.type || <span class="string">'no type'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fetching type...'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set the default type to 'no type'</span></span><br><span class="line">  <span class="keyword">var</span> type = <span class="keyword">this</span>.type || <span class="string">'no type'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>给注释增加 <code>FIXME</code> 或 <code>TODO</code> 的前缀可以帮助其他开发者快速了解这是一个需要复查的问题，或是给需要实现的功能提供一个解决方式。这将有别于常见的注释，因为它们是可操作的。使用 <code>FIXME -- need to figure this out</code> 或者 <code>TODO -- need to implement</code>。</p></li><li><p>使用 <code>// FIXME:</code> 标注问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Calculator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">FIXME:</span> shouldn't use a global here</span></span><br><span class="line">  total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>// TODO:</code> 标注问题的解决方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Calculator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> total should be configurable by an options param</span></span><br><span class="line">  <span class="keyword">this</span>.total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="空白"><a href="#空白" class="headerlink" title="空白"></a><a name="whitespace">空白</a></h2><ul><li><p>使用 2 个空格作为缩进。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">∙∙∙∙<span class="keyword">var</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">∙<span class="keyword">var</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">∙∙<span class="keyword">var</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在大括号前放一个空格。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">dog.set(<span class="string">'attr'</span>,&#123;</span><br><span class="line">  age: <span class="string">'1 year'</span>,</span><br><span class="line">  breed: <span class="string">'Bernese Mountain Dog'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">dog.set(<span class="string">'attr'</span>, &#123;</span><br><span class="line">  age: <span class="string">'1 year'</span>,</span><br><span class="line">  breed: <span class="string">'Bernese Mountain Dog'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>在控制语句（<code>if</code>、<code>while</code> 等）的小括号前放一个空格。在函数调用及声明中，不在函数的参数列表前加空格。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span>(isJedi) &#123;</span><br><span class="line">  fight ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (isJedi) &#123;</span><br><span class="line">  fight();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log (<span class="string">'Swooosh!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Swooosh!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用空格把运算符隔开。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> x=y+<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> x = y + <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li><li><p>在文件末尾插入一个空行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;)(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;)(<span class="keyword">this</span>);↵</span><br><span class="line">↵</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;)(<span class="keyword">this</span>);↵</span><br></pre></td></tr></table></figure></li><li><p>在使用长方法链时进行缩进。使用前面的点 <code>.</code> 强调这是方法调用而不是新语句。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'#items'</span>).find(<span class="string">'.selected'</span>).highlight().end().find(<span class="string">'.open'</span>).updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'#items'</span>).</span><br><span class="line">  find(<span class="string">'.selected'</span>).</span><br><span class="line">    highlight().</span><br><span class="line">    end().</span><br><span class="line">  find(<span class="string">'.open'</span>).</span><br><span class="line">    updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'#items'</span>)</span><br><span class="line">  .find(<span class="string">'.selected'</span>)</span><br><span class="line">    .highlight()</span><br><span class="line">    .end()</span><br><span class="line">  .find(<span class="string">'.open'</span>)</span><br><span class="line">    .updateCount();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> leds = stage.selectAll(<span class="string">'.led'</span>).data(data).enter().append(<span class="string">'svg:svg'</span>).classed(<span class="string">'led'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>).append(<span class="string">'svg:g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</span><br><span class="line">    .call(tron.led);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> leds = stage.selectAll(<span class="string">'.led'</span>)</span><br><span class="line">    .data(data)</span><br><span class="line">  .enter().append(<span class="string">'svg:svg'</span>)</span><br><span class="line">    .classed(<span class="string">'led'</span>, <span class="literal">true</span>)</span><br><span class="line">    .attr(<span class="string">'width'</span>, (radius + margin) * <span class="number">2</span>)</span><br><span class="line">  .append(<span class="string">'svg:g'</span>)</span><br><span class="line">    .attr(<span class="string">'transform'</span>, <span class="string">'translate('</span> + (radius + margin) + <span class="string">','</span> + (radius + margin) + <span class="string">')'</span>)</span><br><span class="line">    .call(tron.led);</span><br></pre></td></tr></table></figure></li><li><p>在块末和新语句前插入空行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> baz;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (foo) &#123;</span><br><span class="line">  <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> baz;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a><a name="commas">逗号</a></h2><ul><li><p>行首逗号: <strong>不需要</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> story = [</span><br><span class="line">    once</span><br><span class="line">  , upon</span><br><span class="line">  , aTime</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> story = [</span><br><span class="line">  once,</span><br><span class="line">  upon,</span><br><span class="line">  aTime</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line">    firstName: <span class="string">'Bob'</span></span><br><span class="line">  , <span class="attr">lastName</span>: <span class="string">'Parr'</span></span><br><span class="line">  , <span class="attr">heroName</span>: <span class="string">'Mr. Incredible'</span></span><br><span class="line">  , <span class="attr">superPower</span>: <span class="string">'strength'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Bob'</span>,</span><br><span class="line">  lastName: <span class="string">'Parr'</span>,</span><br><span class="line">  heroName: <span class="string">'Mr. Incredible'</span>,</span><br><span class="line">  superPower: <span class="string">'strength'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>额外的行末逗号：<strong>不需要</strong>。这样做会在 IE6/7 和 IE9 怪异模式下引起问题。同样，多余的逗号在某些 ES3 的实现里会增加数组的长度。在 ES5 中已经澄清了 (<a href="http://es5.github.io/#D" target="_blank" rel="noopener">source</a>)：</p><blockquote><p>Edition 5 clarifies the fact that a trailing comma at the end of an ArrayInitialiser does not add to the length of the array. This is not a semantic change from Edition 3 but some implementations may have previously misinterpreted this.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Kevin'</span>,</span><br><span class="line">  lastName: <span class="string">'Flynn'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> hero = &#123;</span><br><span class="line">  firstName: <span class="string">'Kevin'</span>,</span><br><span class="line">  lastName: <span class="string">'Flynn'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> heroes = [</span><br><span class="line">  <span class="string">'Batman'</span>,</span><br><span class="line">  <span class="string">'Superman'</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a><a name="semicolons">分号</a></h2><ul><li><p><strong>使用分号。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span></span><br><span class="line">  <span class="keyword">return</span> name</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span>;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good (防止函数在两个 IIFE 合并时被当成一个参数</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'Skywalker'</span>;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><a href="http://stackoverflow.com/a/7365214/1712802" target="_blank" rel="noopener">了解更多</a>.</p></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a><a name="type-casting--coercion">类型转换</a></h2><ul><li>在语句开始时执行类型转换。</li><li><p>字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  =&gt; this.reviewScore = 9;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> totalScore = <span class="string">''</span> + <span class="keyword">this</span>.reviewScore;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> totalScore = <span class="string">''</span> + <span class="keyword">this</span>.reviewScore + <span class="string">' total score'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> totalScore = <span class="keyword">this</span>.reviewScore + <span class="string">' total score'</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>parseInt</code> 转换数字时总是带上类型转换的基数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inputValue = <span class="string">'4'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> val = <span class="keyword">new</span> <span class="built_in">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> val = +inputValue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> val = <span class="built_in">parseInt</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> val = <span class="built_in">Number</span>(inputValue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> val = <span class="built_in">parseInt</span>(inputValue, <span class="number">10</span>);</span><br></pre></td></tr></table></figure></li><li><p>如果因为某些原因 <code>parseInt</code> 成为你所做的事的瓶颈而需要使用位操作解决<a href="http://jsperf.com/coercion-vs-casting/3" target="_blank" rel="noopener">性能问题</a>时，留个注释说清楚原因和你的目的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * parseInt was the reason my code was slow.</span></span><br><span class="line"><span class="comment"> * Bitshifting the String to coerce it to a</span></span><br><span class="line"><span class="comment"> * Number made it a lot faster.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> val = inputValue &gt;&gt; <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>注：</strong> 小心使用位操作运算符。数字会被当成 <a href="http://es5.github.io/#x4.3.19" target="_blank" rel="noopener">64 位值</a>，但是位操作运算符总是返回 32 位的整数（<a href="http://es5.github.io/#x11.7" target="_blank" rel="noopener">source</a>）。位操作处理大于 32 位的整数值时还会导致意料之外的行为。<a href="https://github.com/airbnb/javascript/issues/109" target="_blank" rel="noopener">讨论</a>。最大的 32 位整数是 2,147,483,647：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2147483647</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; 2147483647</span></span><br><span class="line"><span class="number">2147483648</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483648</span></span><br><span class="line"><span class="number">2147483649</span> &gt;&gt; <span class="number">0</span> <span class="comment">//=&gt; -2147483647</span></span><br></pre></td></tr></table></figure></li><li><p>布尔:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> hasAge = <span class="keyword">new</span> <span class="built_in">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> hasAge = <span class="built_in">Boolean</span>(age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> hasAge = !!age;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a><a name="naming-conventions">命名规则</a></h2><ul><li><p>避免单字母命名。命名应具备描述性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ..stuff..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用驼峰式命名对象、函数和实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> OBJEcttsssss = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> this_is_my_object = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> thisIsMyObject = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thisIsMyFunction</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用帕斯卡式命名构造函数或类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = options.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bad = <span class="keyword">new</span> user(&#123;</span><br><span class="line">  name: <span class="string">'nope'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = options.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> good = <span class="keyword">new</span> User(&#123;</span><br><span class="line">  name: <span class="string">'yup'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>不要使用下划线前/后缀。</p><blockquote><p>为什么？JavaScript 并没有私有属性或私有方法的概念。虽然使用下划线是表示「私有」的一种共识，但实际上这些属性是完全公开的，它本身就是你公共接口的一部分。这种习惯或许会导致开发者错误的认为改动它不会造成破坏或者不需要去测试。长话短说：如果你想要某处为「私有」，它必须不能是显式提出的。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">this</span>.__firstName__ = <span class="string">'Panda'</span>;</span><br><span class="line"><span class="keyword">this</span>.firstName_ = <span class="string">'Panda'</span>;</span><br><span class="line"><span class="keyword">this</span>._firstName = <span class="string">'Panda'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">this</span>.firstName = <span class="string">'Panda'</span>;</span><br></pre></td></tr></table></figure></li><li><p>不要保存 <code>this</code> 的引用。使用 Function#bind。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(self);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(that);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(_this);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;.bind(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>给函数命名。这在做堆栈轨迹时很有帮助。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><strong>注：</strong> IE8 及以下版本对命名函数表达式的处理有些怪异。了解更多信息到 <a href="http://kangax.github.io/nfe/" target="_blank" rel="noopener">http://kangax.github.io/nfe/</a>。</p></li><li><p>如果你的文件导出一个类，你的文件名应该与类名完全相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file contents</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CheckBox</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = CheckBox;</span><br><span class="line"></span><br><span class="line"><span class="comment">// in some other file</span></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> CheckBox = <span class="built_in">require</span>(<span class="string">'./checkBox'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> CheckBox = <span class="built_in">require</span>(<span class="string">'./check_box'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> CheckBox = <span class="built_in">require</span>(<span class="string">'./CheckBox'</span>);</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a><a name="accessors">存取器</a></h2><ul><li>属性的存取函数不是必须的。</li><li><p>如果你需要存取函数时使用 <code>getVal()</code> 和 <code>setVal(&#39;hello&#39;)</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">dragon.age();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">dragon.getAge();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">dragon.age(<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">dragon.setAge(<span class="number">25</span>);</span><br></pre></td></tr></table></figure></li><li><p>如果属性是布尔值，使用 <code>isVal()</code> 或 <code>hasVal()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.age()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!dragon.hasAge()) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 get() 和 set() 函数是可以的，但要保持一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  options || (options = &#123;&#125;);</span><br><span class="line">  <span class="keyword">var</span> lightsaber = options.lightsaber || <span class="string">'blue'</span>;</span><br><span class="line">  <span class="keyword">this</span>.set(<span class="string">'lightsaber'</span>, lightsaber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.set = <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">key, val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>[key] = val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.get = <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>[key];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a><a name="constructors">构造函数</a></h2><ul><li><p>给对象原型分配方法，而不是使用一个新对象覆盖原型。覆盖原型将导致继承出现问题：重设原型将覆盖原有原型！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'new jedi'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">Jedi.prototype = &#123;</span><br><span class="line">  fight: <span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fighting'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  block: <span class="function"><span class="keyword">function</span> <span class="title">block</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'blocking'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">Jedi.prototype.fight = <span class="function"><span class="keyword">function</span> <span class="title">fight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fighting'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.block = <span class="function"><span class="keyword">function</span> <span class="title">block</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'blocking'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>方法可以返回 <code>this</code> 来实现方法链式使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span> <span class="title">jump</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.height = height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line">luke.jump(); <span class="comment">// =&gt; true</span></span><br><span class="line">luke.setHeight(<span class="number">20</span>); <span class="comment">// =&gt; undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">Jedi.prototype.jump = <span class="function"><span class="keyword">function</span> <span class="title">jump</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.jumping = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.setHeight = <span class="function"><span class="keyword">function</span> <span class="title">setHeight</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.height = height;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> luke = <span class="keyword">new</span> Jedi();</span><br><span class="line"></span><br><span class="line">luke.jump()</span><br><span class="line">  .setHeight(<span class="number">20</span>);</span><br></pre></td></tr></table></figure></li><li><p>写一个自定义的 <code>toString()</code> 方法是可以的，但是确保它可以正常工作且不会产生副作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Jedi</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  options || (options = &#123;&#125;);</span><br><span class="line">  <span class="keyword">this</span>.name = options.name || <span class="string">'no name'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.getName = <span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jedi.prototype.toString = <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Jedi - '</span> + <span class="keyword">this</span>.getName();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a><a name="events">事件</a></h2><ul><li><p>当给事件附加数据时（无论是 DOM 事件还是私有事件），传入一个哈希而不是原始值。这样可以让后面的贡献者增加更多数据到事件数据而无需找出并更新事件的每一个处理器。例如，不好的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, listing.id);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e, listingId</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something with listingId</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>更好的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="keyword">this</span>).trigger(<span class="string">'listingUpdated'</span>, &#123; <span class="attr">listingId</span> : listing.id &#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$(<span class="keyword">this</span>).on(<span class="string">'listingUpdated'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e, data</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something with data.listingId</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p></li></ul><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a><a name="modules">模块</a></h2><ul><li>模块应该以 <code>!</code> 开始。这样确保了当一个不好的模块忘记包含最后的分号时，在合并代码到生产环境后不会产生错误。<a href="https://github.com/airbnb/javascript/issues/44#issuecomment-13063933" target="_blank" rel="noopener">详细说明</a></li><li>文件应该以驼峰式命名，并放在同名的文件夹里，且与导出的名字一致。</li><li>增加一个名为 <code>noConflict()</code> 的方法来设置导出的模块为前一个版本并返回它。</li><li><p>永远在模块顶部声明 <code>&#39;use strict&#39;;</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fancyInput/fancyInput.js</span></span><br><span class="line"></span><br><span class="line">!<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> previousFancyInput = global.FancyInput;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">FancyInput</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.options = options || &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  FancyInput.noConflict = <span class="function"><span class="keyword">function</span> <span class="title">noConflict</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    global.FancyInput = previousFancyInput;</span><br><span class="line">    <span class="keyword">return</span> FancyInput;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  global.FancyInput = FancyInput;</span><br><span class="line">&#125;(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a><a name="jquery">jQuery</a></h2><ul><li><p>使用 <code>$</code> 作为存储 jQuery 对象的变量名前缀。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> $sidebar = $(<span class="string">'.sidebar'</span>);</span><br></pre></td></tr></table></figure></li><li><p>缓存 jQuery 查询。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'.sidebar'</span>).hide();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  $(<span class="string">'.sidebar'</span>).css(&#123;</span><br><span class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setSidebar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $sidebar = $(<span class="string">'.sidebar'</span>);</span><br><span class="line">  $sidebar.hide();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line"></span><br><span class="line">  $sidebar.css(&#123;</span><br><span class="line">    <span class="string">'background-color'</span>: <span class="string">'pink'</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对 DOM 查询使用层叠 <code>$(&#39;.sidebar ul&#39;)</code> 或 父元素 &gt; 子元素 <code>$(&#39;.sidebar &gt; ul&#39;)</code>。 <a href="http://jsperf.com/jquery-find-vs-context-sel/16" target="_blank" rel="noopener">jsPerf</a></p></li><li><p>对有作用域的 jQuery 对象查询使用 <code>find</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'ul'</span>, <span class="string">'.sidebar'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">$(<span class="string">'.sidebar'</span>).find(<span class="string">'ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'.sidebar ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$(<span class="string">'.sidebar &gt; ul'</span>).hide();</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">$sidebar.find(<span class="string">'ul'</span>).hide();</span><br></pre></td></tr></table></figure></li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p><h2 id="ECMAScript-5-兼容性"><a href="#ECMAScript-5-兼容性" class="headerlink" title="ECMAScript 5 兼容性"></a><a name="ecmascript-5-compatibility">ECMAScript 5 兼容性</a></h2><ul><li>参考 <a href="https://twitter.com/kangax/" target="_blank" rel="noopener">Kangax</a> 的 ES5 <a href="http://kangax.github.com/es5-compat-table/" target="_blank" rel="noopener">兼容表</a>.</li></ul><p><strong><a href="#table-of-contents">⬆ 回到顶部</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;用更合理的方式写 JavaScript&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;&lt;a name=&quot;table-of-contents&quot;&gt;目录&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;

      
    
    </summary>
    
      <category term="前端规范" scheme="https://syhyz1990.github.io/categories/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/"/>
    
    
      <category term="JS,ECMAScript5" scheme="https://syhyz1990.github.io/tags/JS-ECMAScript5/"/>
    
  </entry>
  
  <entry>
    <title>移动端开发必读</title>
    <link href="https://syhyz1990.github.io/wiki/mobile-development.html"/>
    <id>https://syhyz1990.github.io/wiki/mobile-development.html</id>
    <published>2018-02-06T11:09:11.000Z</published>
    <updated>2018-06-05T08:23:06.518Z</updated>
    
    <content type="html"><![CDATA[<h2 id="移动端统计-from-BiosSun"><a href="#移动端统计-from-BiosSun" class="headerlink" title="移动端统计 (from BiosSun)"></a>移动端统计 (from BiosSun)</h2><p> 可基于下方所列出的统计数据来决定您要兼容的设备及浏览器。</p><p>  <a href="http://tongji.baidu.com/data/mobile/brand" title="百度移动设备统计" target="_blank" rel="noopener">百度移动统计</a></p><p>  <a href="http://www.umindex.com/" title="友盟指数" target="_blank" rel="noopener">友盟指数</a></p><p>  <a href="http://brow.data.cnzz.com/" title="CNZZ 桌面及移动端浏览器统计" target="_blank" rel="noopener">CNZZ 桌面及移动端浏览器统计</a></p><p>  <a href="https://www.netmarketshare.com/browser-market-share.aspx?qprid=0&amp;qpcustomd=1" title="全球移动端浏览器统计" target="_blank" rel="noopener">全球移动端浏览器统计</a></p><h2 id="工具类网站"><a href="#工具类网站" class="headerlink" title="工具类网站"></a>工具类网站</h2><p> <a href="http://html5please.com/" title="html5与css3技术应用评估" target="_blank" rel="noopener">HTML5 与 CSS3 技术应用评估</a></p><p> <a href="http://browserhacks.com/" title="各种奇妙的hack" target="_blank" rel="noopener">各种奇妙的hack</a></p><p> <a href="http://pixensity.com/list/" title="几乎所有设备的屏幕尺寸与像素密度表" target="_blank" rel="noopener">几乎所有设备的屏幕尺寸与像素密度表</a></p><p> <a href="http://screensiz.es/phone" title="移动设备参数表" target="_blank" rel="noopener">移动设备参数表</a></p><p> <a href="http://ivomynttinen.com/blog/the-ios-design-cheat-sheet-volume-2/" title="ios端移动设备参数速查" target="_blank" rel="noopener">ios端移动设备参数速查</a></p><p> <a href="http://www.quirksmode.org/compatibility.html" title="浏览器兼容表" target="_blank" rel="noopener">浏览器兼容表</a></p><p> <a href="https://deviceatlas.com/device-data/devices" title="移动设备查询器" target="_blank" rel="noopener">移动设备查询器</a></p><p> <a href="http://51degrees.codeplex.com/" title="移动设备适配库" target="_blank" rel="noopener">移动设备适配库</a></p><p> <a href="http://detectmobilebrowsers.com/" title="移动设备适配库2" target="_blank" rel="noopener">移动设备适配库2</a></p><p> <a href="https://deviceatlas.com/device-data/devices" title="viewport与设备尺寸在线检测器" target="_blank" rel="noopener">viewport与设备尺寸在线检测器</a></p><p> <a href="http://mobilehtml5.org/" title="html5移动端兼容性速查" target="_blank" rel="noopener">html5 移动端兼容性速查</a></p><p> <a href="http://www.fontsquirrel.com/tools/webfont-generator" title="在线转换字体" target="_blank" rel="noopener">在线转换字体</a></p><p> <a href="http://tools.css3.info/selectors-test/test.html" title="css3选择器测试" target="_blank" rel="noopener">css3 选择器测试</a></p><p> <a href="http://kangax.github.io/compat-table/es6/" title="测试浏览器对 ECMAScript6 的支持度" target="_blank" rel="noopener">测试浏览器对 ECMAScript6 的支持度</a></p><p> <a href="http://caniuse.com/" title="兼容性速查表" target="_blank" rel="noopener">兼容性速查表</a></p><p> <a href="http://www.browserscope.org/" title="浏览器的一些独特参数" target="_blank" rel="noopener">浏览器的一些独特参数</a></p><p> <a href="http://nmsdvid.com/snippets/" title="各种各样的媒体查询收集" target="_blank" rel="noopener">各种各样的媒体查询收集</a></p><p> <a href="http://css3lib.alloyteam.com/#animation/AnimatedButtons" title="css3动画在线制作器" target="_blank" rel="noopener">css3 动画在线制作器</a></p><p> <a href="http://www.colorzilla.com/gradient-editor/" title="css3渐变在线制作器" target="_blank" rel="noopener">css3 渐变在线制作器</a></p><p><a href="http://ww1.sinaimg.cn/bmiddle/c2c57f68jw1e4fh7dmw12j20fi2w6qe1.jpg" title="移动端手势表" target="_blank" rel="noopener">移动端手势表</a></p><p><a href="http://ued.ctrip.com/blog/wp-content/webkitcss/" title="webkit独有的样式分析" target="_blank" rel="noopener">webkit独有的样式分析</a></p><p><a href="https://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-Browser-Polyfills" target="_blank" rel="noopener">HTML5 Cross Browser Polyfills</a></p><p><a href="http://html5polyfill.com/" title="HTML5 POLYFILLS" target="_blank" rel="noopener">HTML5 POLYFILLS</a></p><h2 id="iphone6的那些事"><a href="#iphone6的那些事" class="headerlink" title="iphone6的那些事"></a>iphone6的那些事</h2><p><a href="http://wileam.com/iphone-6-screen-cn/" target="_blank" rel="noopener">iPhone 6 屏幕揭秘</a></p><h2 id="响应式测试工具"><a href="#响应式测试工具" class="headerlink" title="响应式测试工具"></a>响应式测试工具</h2><p>Firefox 浏览器内置了 <code>自定义设计视图</code> 的功能，可以通过 <code>Firefox-&gt;Web 开发者-&gt;自定义设计视图</code>（或者摁下 <code>Shift + Ctrl + m</code> ）。相比网络工具，运行更加流畅，无需联网。</p><p><a href="http://yujiangshui.com/document/css-media-queries-for-ipads-and-iphones-chinese-version/" target="_blank" rel="noopener">判断 iPad 和 iPhone 的版本和状态的 CSS 媒体查询代码</a></p><p><a href="http://lab.maltewassermann.com/viewport-resizer/" title="resize" target="_blank" rel="noopener">Viewport Resizer</a></p><p><a href="http://beta.screenqueri.es/" title="resize" target="_blank" rel="noopener">http://beta.screenqueri.es/</a></p><p><a href="http://responsivepx.com" title="resize" target="_blank" rel="noopener">http://responsivepx.com</a></p><p><a href="http://www.responsinator.com/" title="resize" target="_blank" rel="noopener">http://www.responsinator.com/</a></p><p><a href="http://resizemybrowser.com/" title="resize" target="_blank" rel="noopener">http://resizemybrowser.com/</a></p><p><a href="https://quirktools.com/screenfly/" title="resize" target="_blank" rel="noopener">https://quirktools.com/screenfly/</a></p><p>媒体查询常用样式表：</p><pre><code>&lt;link rel=&quot;stylesheet&quot; media=&quot;all and (orientation:portrait)&quot; href=&quot;portrait.css&quot;&gt;    // 竖放加载&lt;link rel=&quot;stylesheet&quot; media=&quot;all and (orientation:landscape)&quot;href=&quot;landscape.css&quot;&gt;   // 横放加载//竖屏时使用的样式&lt;style media=&quot;all and (orientation:portrait)&quot; type=&quot;text/css&quot;&gt;    #landscape { display: none; }&lt;/style&gt;//横屏时使用的样式&lt;style media=&quot;all and (orientation:landscape)&quot; type=&quot;text/css&quot;&gt;    #portrait { display: none; }&lt;/style&gt;</code></pre><h2 id="Web-app-开发的最佳实践与中文总结"><a href="#Web-app-开发的最佳实践与中文总结" class="headerlink" title="Web app 开发的最佳实践与中文总结"></a>Web app 开发的最佳实践与中文总结</h2><p><a href="http://blog.forecast.io/its-not-a-web-app-its-an-app-you-install-from-the-web/" target="_blank" rel="noopener">It’s not a web app. It’s an app you install from the web.</a></p><p><a href="http://lyric.im/best-practice-for-web-app-development/" target="_blank" rel="noopener">当前 WEB APP 开发的最佳实践</a></p><p><a href="https://www.icloud.com/keynote/AwBWCAESEJd5uucfBPGt6KPotb3tNfsaKm-Q7fqs2-4ojmPoPJuWZCvjYgKl5jEf1URdRgdgNHe38BTzeF3DK7q1ewMCUCAQEEIJ85mw21ii_AwybOqxoF-V02v51Vdg855ED4qVA_8bXr#Mobile_Webpage_如何自适应屏幕_2" target="_blank" rel="noopener">如何自适应网页屏幕</a><br>以及<a href="https://github.com/unbug/generator-webappstarter/blob/master/app/templates/app/src/util/MetaHandler.js" target="_blank" rel="noopener">配套的解决方案</a></p><p><a href="https://github.com/imweb/mobile/issues/2" target="_blank" rel="noopener">手Q开发过程中经验沉淀</a><br><a href="http://tech.meituan.com/WebViewPerf.html" target="_blank" rel="noopener">webview性能优化</a></p><h2 id="来自maxzhang的一些移动端经验总结干货"><a href="#来自maxzhang的一些移动端经验总结干货" class="headerlink" title="来自maxzhang的一些移动端经验总结干货"></a>来自<a href="https://github.com/maxzhang" title="ava" target="_blank" rel="noopener">maxzhang</a>的一些移动端经验总结干货</h2><p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/8" title="ava" target="_blank" rel="noopener">移动Web单页应用开发实践——页面结构化</a></p><p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/1" title="ava" target="_blank" rel="noopener">移动Web产品前端开发口诀——“快”</a></p><p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/7" title="ava" target="_blank" rel="noopener">移动Web开发，4行代码检测浏览器是否支持position:fixed</a></p><p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/4" title="ava" target="_blank" rel="noopener">使用border-image实现类似iOS7的1px底边</a></p><p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/2" title="ava" target="_blank" rel="noopener">移动端web页面使用position:fixed问题总结</a></p><p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/11" title="ava" target="_blank" rel="noopener">移动Web开发实践——解决position:fixed自适应BUG</a></p><p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/19" title="ava" target="_blank" rel="noopener">移动手机浏览器m3u8格式视频流播放支持程度测试</a></p><h2 id="本资料很多引用了指尖上的js系列"><a href="#本资料很多引用了指尖上的js系列" class="headerlink" title="本资料很多引用了指尖上的js系列"></a>本资料很多引用了指尖上的js系列</h2><p> <a href="http://www.cnblogs.com/pifoo/archive/2011/05/23/webkit-touch-event-1.html" title="article1" target="_blank" rel="noopener">指尖下的js ——多触式web前端开发之一：对于Touch的处理</a></p><p> <a href="http://www.cnblogs.com/pifoo/archive/2011/05/22/webkit-touch-event-2.html" title="article2" target="_blank" rel="noopener">指尖下的js ——多触式web前端开发之二：处理简单手势</a></p><p> <a href="http://www.cnblogs.com/pifoo/archive/2011/05/22/webkit-touch-event-3.html" title="article3" target="_blank" rel="noopener">指尖下的js —— 多触式web前端开发之三：处理复杂手势</a></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h3><p>meta标签大全 <a href="http://segmentfault.com/blog/ciaocc/1190000002407912" target="_blank" rel="noopener">http://segmentfault.com/blog/ciaocc/1190000002407912</a></p><p>meta标签，这些meta标签在开发webapp时起到非常重要的作用</p><pre><code>&lt;meta content=&quot;width=device-width; initial-scale=1.0; maximum-scale=1.0; user-scalable=0&quot; name=&quot;viewport&quot; /&gt;&lt;meta content=&quot;yes&quot; name=&quot;apple-mobile-web-app-capable&quot; /&gt;&lt;meta content=&quot;black&quot; name=&quot;apple-mobile-web-app-status-bar-style&quot; /&gt;&lt;meta content=&quot;telephone=no&quot; name=&quot;format-detection&quot; /&gt;</code></pre><p>第一个meta标签表示：强制让文档的宽度与设备的宽度保持1:1，并且文档最大的宽度比例是1.0，且不允许用户点击屏幕放大浏览；<br>尤其要注意的是content里多个属性的设置一定要用分号+空格来隔开，如果不规范将不会起作用。</p><p>注意根据 <a href="http://www.weibo.com/avajayam" title="ava" target="_blank" rel="noopener">public_00</a> 提供的资料补充，content 使用分号作为分隔，在老的浏览器是支持的，但不是规范写法。</p><p>规范的写法应该是使用逗号分隔，参考 <a href="http://developer.apple.com/library/safari/#documentation/appleapplications/reference/SafariHTMLRef/Articles/MetaTags.html" target="_blank" rel="noopener">Safari HTML Reference - Supported Meta Tags</a> 和 <a href="http://developer.android.com/guide/webapps/targeting.html" target="_blank" rel="noopener">Android - Supporting Different Screens in Web Apps</a></p><p>其中：</p><ul><li>width - viewport的宽度</li><li>height - viewport的高度</li><li>initial-scale - 初始的缩放比例</li><li>minimum-scale - 允许用户缩放到的最小比例</li><li>maximum-scale - 允许用户缩放到的最大比例</li><li>user-scalable - 用户是否可以手动缩放</li></ul><p>第二个meta标签是iphone设备中的safari私有meta标签，它表示：允许全屏模式浏览；<br>第三个meta标签也是iphone的私有标签，它指定的iphone中safari顶端的状态条的样式；<br>第四个meta标签表示：告诉设备忽略将页面中的数字识别为电话号码</p><p>在设置了initial-scale=1 之后，我们终于可以以1:1 的比例进行页面设计了。<br>关于viewport，还有一个很重要的概念是：iphone 的safari 浏览器完全没有滚动条，而且不是简单的“隐藏滚动条”，<br>是根本没有这个功能。iphone 的safari 浏览器实际上从一开始就完整显示了这个网页，然后用viewport 查看其中的一部分。<br>当你用手指拖动时，其实拖的不是页面，而是viewport。浏览器行为的改变不止是滚动条，交互事件也跟普通桌面不一样。<br>(请参考：指尖的下JS 系列文章)</p><p>更详细的 viewport 相关的知识也可以参考</p><p><a href="http://www.w3cplus.com/css/A-pixel-is-not-a-pixel-is-not-a-pixel.html" title="pixel" target="_blank" rel="noopener">此像素非彼像素</a></p><h2 id="适配类文章"><a href="#适配类文章" class="headerlink" title="适配类文章"></a>适配类文章</h2><p><a href="http://www.html-js.com/article/Mobile-terminal-H5-mobile-terminal-HD-multi-screen-adaptation-scheme%203041" title="pixel" target="_blank" rel="noopener">移动端高清、多屏适配方案</a></p><p><a href="http://www.html-js.com/article/2402" title="pixel" target="_blank" rel="noopener">手机淘宝的flexible设计与实现</a></p><h2 id="移动开发事件"><a href="#移动开发事件" class="headerlink" title="移动开发事件"></a>移动开发事件</h2><p><a href="http://wo.poco.cn/manson/post/id/268780" target="_blank" rel="noopener">手机浏览器常用手势动作监听封装</a></p><h3 id="手势事件"><a href="#手势事件" class="headerlink" title="手势事件"></a>手势事件</h3><ul><li>touchstart            //当手指接触屏幕时触发</li><li>touchmove           //当已经接触屏幕的手指开始移动后触发</li><li>touchend             //当手指离开屏幕时触发</li><li>touchcancel</li></ul><h3 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h3><ul><li>gesturestart          //当两个手指接触屏幕时触发</li><li>gesturechange      //当两个手指接触屏幕后开始移动时触发</li><li>gestureend</li></ul><h3 id="屏幕旋转事件"><a href="#屏幕旋转事件" class="headerlink" title="屏幕旋转事件"></a>屏幕旋转事件</h3><ul><li>onorientationchange    </li></ul><h3 id="检测触摸屏幕的手指何时改变方向"><a href="#检测触摸屏幕的手指何时改变方向" class="headerlink" title="检测触摸屏幕的手指何时改变方向"></a>检测触摸屏幕的手指何时改变方向</h3><ul><li>orientationchange      </li></ul><h3 id="touch事件支持的相关属性"><a href="#touch事件支持的相关属性" class="headerlink" title="touch事件支持的相关属性"></a>touch事件支持的相关属性</h3><ul><li>touches</li><li>targetTouches</li><li>changedTouches</li><li>clientX　　　　// X coordinate of touch relative to the viewport (excludes scroll offset)</li><li>clientY　　　　// Y coordinate of touch relative to the viewport (excludes scroll offset)</li><li>screenX　　　 // Relative to the screen</li><li>screenY 　　  // Relative to the screen</li><li>pageX　　 　　// Relative to the full page (includes scrolling)</li><li>pageY　　　　 // Relative to the full page (includes scrolling)</li><li>target　　　　 // Node the touch event originated from</li><li>identifier　　   // An identifying number, unique to each touch event</li><li>屏幕旋转事件：onorientationchange</li></ul><h3 id="判断屏幕是否旋转"><a href="#判断屏幕是否旋转" class="headerlink" title="判断屏幕是否旋转"></a>判断屏幕是否旋转</h3><pre><code>function orientationChange() {    switch(window.orientation) {    　　case 0:            alert(&quot;肖像模式 0,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);            break;    　　case -90:            alert(&quot;左旋 -90,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);            break;    　　case 90:            alert(&quot;右旋 90,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);            break;    　　case 180:        　　alert(&quot;风景模式 180,screen-width: &quot; + screen.width + &quot;; screen-height:&quot; + screen.height);        　　break;    };};</code></pre><h3 id="添加事件监听"><a href="#添加事件监听" class="headerlink" title="添加事件监听"></a>添加事件监听</h3><pre><code>addEventListener(&apos;load&apos;, function(){    orientationChange();    window.onorientationchange = orientationChange;});</code></pre><h3 id="JS-单击延迟"><a href="#JS-单击延迟" class="headerlink" title="JS 单击延迟"></a>JS 单击延迟</h3><p>click 事件因为要等待单击确认，会有 300ms 的延迟，体验并不是很好。</p><p>开发者大多数会使用封装的 tap 事件来代替click 事件，所谓的 tap 事件由 touchstart 事件 + touchmove 判断 + touchend 事件封装组成。</p><p> <a href="https://developers.google.com/mobile/articles/fast_buttons?hl=de-DE" title="article5" target="_blank" rel="noopener">Creating Fast Buttons for Mobile Web Applications</a></p><p> <a href="http://stackoverflow.com/questions/12238587/eliminate-300ms-delay-on-click-events-in-mobile-safari" title="article5" target="_blank" rel="noopener">Eliminate 300ms delay on click events in mobile Safari</a></p><h2 id="WebKit-CSS"><a href="#WebKit-CSS" class="headerlink" title="WebKit CSS:"></a>WebKit CSS:</h2><p><a href="http://ued.ctrip.com/blog/wp-content/webkitcss/index.html" target="_blank" rel="noopener">携程 UED 整理的 Webkit CSS 文档</a> ，全面、方便查询，下面为常用属性。</p><p>①“盒模型”的具体描述性质的包围盒块内容，包括边界，填充等等。</p><pre><code>-webkit-border-bottom-left-radius: radius;-webkit-border-top-left-radius: horizontal_radius vertical_radius;-webkit-border-radius: radius;      //容器圆角-webkit-box-sizing: sizing_model; 边框常量值：border-box/content-box-webkit-box-shadow: hoff voff blur color; //容器阴影（参数分别为：水平X 方向偏移量；垂直Y 方向偏移量；高斯模糊半径值；阴影颜色值）-webkit-margin-bottom-collapse: collapse_behavior; 常量值：collapse/discard/separate-webkit-margin-start: width;-webkit-padding-start: width;-webkit-border-image: url(borderimg.gif) 25 25 25 25 round/stretch round/stretch;-webkit-appearance: push-button;   //内置的CSS 表现，暂时只支持push-button</code></pre><p>②“视觉格式化模型”描述性质，确定了位置和大小的块元素。</p><pre><code>direction: rtlunicode-bidi: bidi-override; 常量：bidi-override/embed/normal</code></pre><p>③“视觉效果”描述属性，调整的视觉效果块内容，包括溢出行为，调整行为，能见度，动画，变换，和过渡。</p><pre><code>clip: rect(10px, 5px, 10px, 5px)resize: auto; 常量：auto/both/horizontal/none/verticalvisibility: visible; 常量: collapse/hidden/visible-webkit-transition: opacity 1s linear; 动画效果 ease/linear/ease-in/ease-out/ease-in-out-webkit-backface-visibility: visibler; 常量：visible(默认值)/hidden-webkit-box-reflect: right 1px; 镜向反转-webkit-box-reflect: below 4px -webkit-gradient(linear, left top, left bottom,from(transparent), color-stop(0.5, transparent), to(white));-webkit-mask-image: -webkit-gradient(linear, left top, left bottom, from(rgba(0,0,0,1)), to(rgba(0,0,0,0)));;   //CSS 遮罩/蒙板效果-webkit-mask-attachment: fixed; 常量：fixed/scroll-webkit-perspective: value; 常量：none(默认)-webkit-perspective-origin: left top;-webkit-transform: rotate(5deg);-webkit-transform-style: preserve-3d; 常量：flat/preserve-3d; (2D 与3D)</code></pre><p>④“生成的内容，自动编号，并列出”描述属性，允许您更改内容的一个组成部分，创建自动编号的章节和标题，和操纵的风格清单的内容。</p><pre><code>content: “Item” counter(section) ” “;This resets the counter.First section&gt;two sectionthree sectioncounter-increment: section 1;counter-reset: section;</code></pre><p>⑤“分页媒体”描述性能与外观的属性，控制印刷版本的网页，如分页符的行为。</p><pre><code>page-break-after: auto; 常量：always/auto/avoid/left/rightpage-break-before: auto; 常量：always/auto/avoid/left/rightpage-break-inside: auto; 常量：auto/avoid</code></pre><p>⑥“颜色和背景”描述属性控制背景下的块级元素和颜色的文本内容的组成部分。</p><pre><code>-webkit-background-clip: content; 常量：border/content/padding/text-webkit-background-origin: padding; 常量：border/content/padding/text-webkit-background-size: 55px; 常量：length/length_x/length_y</code></pre><p>⑦ “字型”的具体描述性质的文字字体的选择范围内的一个因素。报告还描述属性用于下载字体定义。</p><pre><code>unicode-range: U+00-FF, U+980-9FF;</code></pre><p>⑧“文本”描述属性的特定文字样式，间距和自动滚屏。</p><pre><code>text-shadow: #00FFFC 10px 10px 5px;text-transform: capitalize; 常量：capitalize/lowercase/none/uppercaseword-wrap: break-word; 常量：break-word/normal-webkit-marquee: right large infinite normal 10s; 常量：direction(方向) increment(迭代次数) repetition(重复) style(样式) speed(速度);-webkit-marquee-direction: ahead/auto/backwards/down/forwards/left/reverse/right/up-webkit-marquee-incrementt: 1-n/infinite(无穷次)-webkit-marquee-speed: fast/normal/slow-webkit-marquee-style: alternate/none/scroll/slide-webkit-text-fill-color: #ff6600; 常量：capitalize, lowercase, none, uppercase-webkit-text-security: circle; 常量：circle/disc/none/square-webkit-text-size-adjust: none; 常量:auto/none;-webkit-text-stroke: 15px #fff;-webkit-line-break: after-white-space; 常量：normal/after-white-space-webkit-appearance: caps-lock-indicator;-webkit-nbsp-mode: space; 常量： normal/space-webkit-rtl-ordering: logical; 常量：visual/logical-webkit-user-drag: element; 常量：element/auto/none-webkit-user-modify: read- only; 常量：read-write-plaintext-only/read-write/read-only-webkit-user-select: text; 常量：text/auto/none</code></pre><p>⑨“表格”描述的布局和设计性能表的具体内容。</p><pre><code>-webkit-border-horizontal-spacing: 2px;-webkit-border-vertical-spacing: 2px;-webkit-column-break-after: right; 常量：always/auto/avoid/left/right-webkit-column-break-before: right; 常量：always/auto/avoid/left/right–webkit-column-break-inside: logical; 常量：avoid/auto-webkit-column-count: 3; //分栏-webkit-column-rule: 1px solid #fff;style:dashed,dotted,double,groove,hidden,inset,none,outset,ridge,solid</code></pre><p>⑩“用户界面”描述属性，涉及到用户界面元素在浏览器中，如滚动文字区，滚动条，等等。报告还描述属性，范围以外的网页内容，如光标的标注样式和显示当您按住触摸触摸<br>目标，如在iPhone上的链接。</p><pre><code>-webkit-box-align: baseline,center,end,start,stretch 常量：baseline/center/end/start/stretch-webkit-box-direction: normal;常量：normal/reverse-webkit-box-flex: flex_valuet-webkit-box-flex-group: group_number-webkit-box-lines: multiple; 常量：multiple/single-webkit-box-ordinal-group: group_number-webkit-box-orient: block-axis; 常量：block-axis/horizontal/inline-axis/vertical/orientation–webkit-box-pack: alignment; 常量：center/end/justify/start</code></pre><p>动画过渡<br>这是 Webkit 中最具创新力的特性：使用过渡函数定义动画。</p><pre><code>-webkit-animation: title infinite ease-in-out 3s;animation 有这几个属性：-webkit-animation-name： //属性名，就是我们定义的keyframes-webkit-animation-duration：3s //持续时间-webkit-animation-timing-function： //过渡类型：ease/ linear(线性) /ease-in(慢到快)/ease-out(快到慢) /ease-in-out(慢到快再到慢) /cubic-bezier-webkit-animation-delay：10ms //动画延迟(默认0)-webkit-animation-iteration-count： //循环次数(默认1)，infinite 为无限-webkit-animation-direction： //动画方式：normal(默认 正向播放)； alternate(交替方向，第偶数次正向播放，第奇数次反向播放)</code></pre><p>这些同样是可以简写的。但真正让我觉的很爽的是keyframes，它能定义一个动画的转变过程供调用，过程为0%到100%或from(0%)到to(100%)。简单点说，只要你有想法，你想让元素在这个过程中以什么样的方式改变都是很简单的。</p><pre><code>-webkit-transform: 类型（缩放scale/旋转rotate/倾斜skew/位移translate）scale(num,num) 放大倍率。scaleX 和 scaleY(3)，可以简写为：scale(* , *)rotate(*deg) 转动角度。rotateX 和 rotateY，可以简写为：rotate(* , *)Skew(*deg) 倾斜角度。skewX 和skewY，可简写为：skew(* , *)translate(*,*) 坐标移动。translateX 和translateY，可简写为：translate(* , *)。</code></pre><h3 id="自定义滚动条-from-unknown"><a href="#自定义滚动条-from-unknown" class="headerlink" title="自定义滚动条 from unknown"></a>自定义滚动条 from unknown</h3><p> 有没有觉得浏览器自带的原始滚动条很不美观，同时也有看到很多网站的自定义滚动条显得高端，就连chrome32.0开发板都抛弃了原始的滚动条，美观多了。那webkit浏览器是如何自定义滚动条的呢？<br> 参考：</p><ul><li><a href="http://www.xuanfengge.com/css3-webkit-scrollbar.html" target="_blank" rel="noopener">http://www.xuanfengge.com/css3-webkit-scrollbar.html</a></li><li><p><a href="http://www.zhaoan.org/849.html" target="_blank" rel="noopener">http://www.zhaoan.org/849.html</a></p><blockquote><p>后记：有时候，我们开发H5页面时为了美观，可能会隐藏滚动条，那么此时只要使用如下CSS代码即可实现</p></blockquote><p>  ::-webkit-scrollbar {</p><pre><code>width: 0;height: 0;</code></pre><p>  }</p></li></ul><h3 id="页面描述"><a href="#页面描述" class="headerlink" title="页面描述"></a>页面描述</h3><pre><code>&lt;link rel=&quot;apple-touch-icon-precomposed&quot; href=&quot;http://www.xxx.com/App_icon_114.png&quot; /&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;72x72&quot; href=&quot;http://www.xxx.com/App_icon_72.png&quot; /&gt;&lt;link rel=&quot;apple-touch-icon-precomposed&quot; sizes=&quot;114x114&quot; href=&quot;http://www.xxx.com/App_icon_114.png&quot; /&gt;</code></pre><p>这个属性是当用户把连接保存到手机桌面时使用的图标，如果不设置，则会用网页的截图。有了这，就可以让你的网页像APP一样存在手机里了</p><pre><code>&lt;link rel=&quot;apple-touch-startup-image&quot; href=&quot;/img/startup.png&quot; /&gt;</code></pre><p>这个是APP启动画面图片，用途和上面的类似，如果不设置，启动画面就是白屏，图片像素就是手机全屏的像素</p><pre><code>&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black-translucent&quot; /&gt;</code></pre><p>这个描述是表示打开的web app的最上面的时间、信号栏是黑色的，当然也可以设置其它参数，详细参数说明请参照：<a href="https://developer.apple.com/library/safari/documentation/appleapplications/reference/SafariHTMLRef/Articles/MetaTags.html" target="_blank" rel="noopener">Safari HTML Reference - Supported Meta Tags</a></p><pre><code>&lt;meta name=&quot;apple-touch-fullscreen&quot; content=&quot;yes&quot; /&gt;&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;</code></pre><h2 id="常见的-iPhone-和-Android-屏幕参数。"><a href="#常见的-iPhone-和-Android-屏幕参数。" class="headerlink" title="常见的 iPhone 和 Android 屏幕参数。"></a>常见的 iPhone 和 Android 屏幕参数。</h2><ul><li>设备         分辨率        设备像素比率</li><li>Android LDPI    320×240    0.75</li><li>Iphone 3 &amp; Android MDPI    320×480    1</li><li>Android HDPI    480×800    1.5</li><li>Iphone 4    960×640    2.0</li></ul><p>iPhone 4的一个 CSS 像素实际上表现为一块 2×2 的像素。所以图片像是被放大2倍一样，模糊不清晰。</p><p>解决办法：</p><p>1、页面引用</p><pre><code>&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (-webkit-device-pixel-ratio: 0.75)&quot; href=&quot;ldpi.css&quot; /&gt;&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (-webkit-device-pixel-ratio: 1.0)&quot; href=&quot;mdpi.css&quot; /&gt;&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (-webkit-device-pixel-ratio: 1.5)&quot; href=&quot;hdpi.css&quot; /&gt;&lt;link rel=&quot;stylesheet&quot; media=&quot;screen and (-webkit-device-pixel-ratio: 2.0)&quot; href=&quot;retina.css&quot; /&gt;</code></pre><p>2、CSS文件里</p><pre><code>#header {    background:url(mdpi/bg.png);}@media screen and (-webkit-device-pixel-ratio: 1.5) {    /*CSS for high-density screens*/    #header {        background:url(hdpi/bg.png);    }}</code></pre><h2 id="移动-Web-开发经验技巧"><a href="#移动-Web-开发经验技巧" class="headerlink" title="移动 Web 开发经验技巧"></a>移动 Web 开发经验技巧</h2><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><h4 id="技术相关"><a href="#技术相关" class="headerlink" title="技术相关"></a>技术相关</h4><ul><li>离线缓存</li><li>css优化【3d动画优化】 </li><li>js优化 【js worker】</li><li>spdy,http2</li><li>service worker</li><li>入口dns预解析</li><li>域名收敛</li><li>cookie压缩</li><li>网速及网络情况侦测</li><li>webp</li></ul><h4 id="策略相关"><a href="#策略相关" class="headerlink" title="策略相关"></a>策略相关</h4><ul><li>前端资源压缩去重</li><li>首屏前置与资源lazyload</li><li>页面模板与数据分离</li><li>适当的base64,首屏css不建议使用</li><li>script 异步</li><li>后台智能加载下一页</li><li>图片渐进显示</li></ul><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://fex.baidu.com/blog/2014/05/build-performance-monitor-in-7-days/" target="_blank" rel="noopener">7 天打造前端性能监控系统</a></p><p><a href="http://velocity.oreilly.com.cn/2013/ppts/16_ms_optimization--web_front-end_performance_optimization.pdf" target="_blank" rel="noopener">16_ms_optimization—web_front-end_performance_optimization</a></p><p><a href="http://velocity.oreilly.com.cn/2011/index.php?func=session&amp;name=%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A" target="_blank" rel="noopener">velocity 2011 移动互联网应用的性能优化</a></p><p><a href="https://github.com/lx7575000/Translation/blob/master/%EF%BC%88%E8%AF%91%EF%BC%89Medium%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%BC%8F/%EF%BC%88%E8%AF%91%EF%BC%89Medium%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%BC%8F.md" target="_blank" rel="noopener">Medium图片加载模式</a></p><p><a href="https://lwdgit.github.io/editor.md/" target="_blank" rel="noopener">Web性能权威指南</a></p><p><a href="https://developers.google.com/web/fundamentals/performance/?hl=zh-cn" target="_blank" rel="noopener">Google 性能优化</a></p><p><a href="https://imququ.com/post/http2-resource.html" target="_blank" rel="noopener">http2资料汇总</a></p><p><a href="http://www.html5rocks.com/zh/tutorials/appcache/beginner/" target="_blank" rel="noopener">离线缓存使用规范</a></p><p><a href="http://www.cnblogs.com/qq309240790/p/5252992.html" target="_blank" rel="noopener">12步创建高性能Web APP</a></p><p><a href="https://jakearchibald.com/2016/link-in-body/" target="_blank" rel="noopener">css加载方式</a></p><p><a href="https://www.ampproject.org/docs/get_started/about-amp.html" target="_blank" rel="noopener">Google AMP (AMP is a way to build web pages for static content that render fast)</a></p><p><a href="https://www.ampproject.org/docs/get_started/about-amp.html" target="_blank" rel="noopener">缓存最佳实践</a></p><p><a href="http://www.html5rocks.com/zh/tutorials/speed/layers/" target="_blank" rel="noopener">以层为基础的渲染加速－chrome</a></p><p><a href="http://www.w3cplus.com/animation/animation-performance.html" target="_blank" rel="noopener">css3动画性能优化原理</a></p><h3 id="点击与click事件"><a href="#点击与click事件" class="headerlink" title="点击与click事件"></a>点击与click事件</h3><p>对于a标记的点击导航，默认是在onclick事件中处理的。而移动客户端对onclick的响应相比PC浏览器有着明显的几百毫秒延迟。</p><p>在移动浏览器中对触摸事件的响应顺序应当是：</p><pre><code>ontouchstart -&gt; ontouchmove -&gt; ontouchend -&gt; onclick</code></pre><p>因此，如果确实要加快对点击事件的响应，就应当绑定ontouchend事件。</p><p>使用click会出现绑定点击区域闪一下的情况，解决：给该元素一个样式如下</p><pre><code>-webkit-tap-highlight-color: rgba(0,0,0,0);</code></pre><p>如果不使用click，也不能简单的用touchstart或touchend替代，需要用touchstart的模拟一个click事件，并且不能发生touchmove事件，或者用zepto中的tap（轻击）事件。</p><pre><code>body{    -webkit-overflow-scrolling: touch;}</code></pre><p>用iphone或ipad浏览很长的网页滚动时的滑动效果很不错吧？不过如果是一个div，然后设置 <code>height:200px;overflow:auto;</code>的话，可以滚动但是完全没有那滑动效果，很郁闷吧？</p><p>我看到很多网站为了实现这一效果，用了第三方类库，最常用的是iscroll（包括新浪手机页，百度等）<br>我一开始也使用，不过自从用了<code>-webkit-overflow-scrolling: touch;</code>样式后，就完全可以抛弃第三方类库了，把它加在body{}区域，所有的overflow需要滚动的都可以生效了。</p><p>另外有一篇比较全的移动端点击解决方案 <a href="http://www.zhihu.com/question/28979857" target="_blank" rel="noopener">http://www.zhihu.com/question/28979857</a></p><h3 id="锁定-viewport"><a href="#锁定-viewport" class="headerlink" title="锁定 viewport"></a>锁定 viewport</h3><pre><code>ontouchmove=&quot;event.preventDefault()&quot; //锁定viewport，任何屏幕操作不移动用户界面（弹出键盘除外）。</code></pre><h3 id="利用-Media-Query监听"><a href="#利用-Media-Query监听" class="headerlink" title="利用 Media Query监听"></a>利用 Media Query监听</h3><p>Media Query 相信大部分人已经使用过了。其实 JavaScript可以配合 Media Query这么用：</p><pre><code>var mql = window.matchMedia(&quot;(orientation: portrait)&quot;);mql.addListener(handleOrientationChange);handleOrientationChange(mql);function handleOrientationChange(mql) {  if (mql.matches) {    alert(&apos;The device is currently in portrait orientation &apos;)  } else {    alert(&apos;The device is currently in landscape orientation&apos;)  }}</code></pre><p>借助了 Media Query 接口做的事件监听，所以很强大！</p><p>也可以通过获取 CSS 值来使用 Media Query 判断设备情况，详情请看：<a href="http://yujiangshui.com/use-javascript-css-media-queries-detect-device-state/" target="_blank" rel="noopener">JavaScript 依据 CSS Media Queries 判断设备的方法</a>。</p><h3 id="使用gpu判断iphone型号"><a href="#使用gpu判断iphone型号" class="headerlink" title="使用gpu判断iphone型号"></a>使用gpu判断iphone型号</h3><p>参考 <a href="http://www.sohu.com/a/157376672_505818" target="_blank" rel="noopener">http://www.sohu.com/a/157376672_505818</a></p><p><a href="https://developer.apple.com/library/content/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/HardwareGPUInformation/HardwareGPUInformation.html" target="_blank" rel="noopener">https://developer.apple.com/library/content/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/HardwareGPUInformation/HardwareGPUInformation.html</a></p><p>每一代 iOS 设备的 GPU 型号都是不同的，比如 iPhone 6 是 A8，而 iPhone 6s 就是 A9。可以通过识别 GPU 的型号来辨别设备的型号。<br>有些设备 GPU 型号完全相同，比如 iPhone 6s ，iPhone 6s Plus ， iPhone SE 。它们用的都是 Apple A9 GPU ，这个时候可以利用它们的分辨率不同来进行区分。</p><p>实例代码 <a href="https://github.com/joyqi/mobile-device-js" target="_blank" rel="noopener">https://github.com/joyqi/mobile-device-js</a></p><h3 id="rem最佳实践"><a href="#rem最佳实践" class="headerlink" title="rem最佳实践"></a>rem最佳实践</h3><p>rem是非常好用的一个属性，可以根据html来设定基准值，而且兼容性也很不错。不过有的时候还是需要对一些莫名其妙的浏览器优雅降级。以下是两个实践</p><ol><li><a href="http://jsbin.com/vaqexuge/4/edit" target="_blank" rel="noopener">http://jsbin.com/vaqexuge/4/edit</a>  这有个demo，发现chrome当font-size小于12时，rem会按照12来计算。因此设置基准值要考虑这一点</li><li>可以用以下的代码片段保证在低端浏览器下也不会出问题</li></ol><pre><code>html { font-size: 62.5%; }body { font-size: 14px; font-size: 1.4rem; } /* =14px */h1   { font-size: 24px; font-size: 2.4rem; } /* =24px */</code></pre><h3 id="被点击元素的外观变化，可以使用样式来设定："><a href="#被点击元素的外观变化，可以使用样式来设定：" class="headerlink" title="被点击元素的外观变化，可以使用样式来设定："></a>被点击元素的外观变化，可以使用样式来设定：</h3><pre><code>-webkit-tap-highlight-color: 颜色</code></pre><h3 id="iphoneX-适配"><a href="#iphoneX-适配" class="headerlink" title="iphoneX 适配"></a>iphoneX 适配</h3><p><a href="http://www.w3cplus.com/mobile/designing-websites-for-iphone-x.html" target="_blank" rel="noopener">http://www.w3cplus.com/mobile/designing-websites-for-iphone-x.html</a></p><h3 id="检测判断-iPhone-iPod"><a href="#检测判断-iPhone-iPod" class="headerlink" title="检测判断 iPhone/iPod"></a>检测判断 iPhone/iPod</h3><p>开发特定设备的移动网站，首先要做的就是设备侦测了。下面是使用Javascript侦测iPhone/iPod的UA，然后转向到专属的URL。</p><pre><code>if((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPod/i))) {　　if (document.cookie.indexOf(&quot;iphone_redirect=false&quot;) == -1) {　　　　window.location = &quot;http://m.example.com&quot;;　　}}</code></pre><h3 id="判断软键盘弹出"><a href="#判断软键盘弹出" class="headerlink" title="判断软键盘弹出"></a>判断软键盘弹出</h3><ul><li><p>android上，当软键盘状态改变的时候，会触发window的resize事件，所以我们可以进入页面的时候保存一次window.innerHeight的值，当window的resize事件触发的时候，比较window.innerHeight的值与前一次保存的window.innerHeight的值大小来判断软键盘的收拢和弹出状态。</p><p>  var winHeight = window.innerHeight;<br>  if (isAndroid) {</p><pre><code>window.addEventListener(&apos;resize&apos;, function(e) {    var tempHeight = window.innerHeight    if (tempHeight &lt; winHeight) {        bShowRec = false;    } else {        bShowRec = true;    }});</code></pre><p>  }</p></li><li><p>ios上，软键盘状态改变的时候，不会触发window的resize事件，但是当软键盘的“完成”按钮被点击的时候，会触发onblur事件。所以正常通过onfocus和onblur事件来判断就行。</p></li></ul><p>虽然Javascript是可以在水果设备上运行的，但是用户还是可以禁用。它也会造成客户端刷新和额外的数据传输，所以下面是服务器端侦测和转向：</p><pre><code>if(strstr($_SERVER[&apos;HTTP_USER_AGENT&apos;],&apos;iPhone&apos;) || strstr($_SERVER[&apos;HTTP_USER_AGENT&apos;],&apos;iPod&apos;)) {　　header(&apos;Location: http://yoursite.com/iphone&apos;);　　exit();}</code></pre><h3 id="阻止旋转屏幕时自动调整字体大小"><a href="#阻止旋转屏幕时自动调整字体大小" class="headerlink" title="阻止旋转屏幕时自动调整字体大小"></a>阻止旋转屏幕时自动调整字体大小</h3><pre><code>html, body, form, fieldset, p, div, h1, h2, h3, h4, h5, h6 {-webkit-text-size-adjust:none;}</code></pre><h3 id="禁止body滚动"><a href="#禁止body滚动" class="headerlink" title="禁止body滚动"></a>禁止body滚动</h3><pre><code>document.body.ontouchmove=function(e){ e.preventDefault(); }</code></pre><h3 id="页面长按，高亮全选文本"><a href="#页面长按，高亮全选文本" class="headerlink" title="页面长按，高亮全选文本"></a>页面长按，高亮全选文本</h3><pre><code>&lt;http://blog.csdn.net/freshlover/article/details/40432247&gt;</code></pre><h3 id="模拟-hover伪类"><a href="#模拟-hover伪类" class="headerlink" title="模拟:hover伪类"></a>模拟:hover伪类</h3><p>因为iPhone并没有鼠标指针，所以没有hover事件。那么CSS :hover伪类就没用了。但是iPhone有Touch事件，onTouchStart 类似 onMouseOver，onTouchEnd 类似 onMouseOut。所以我们可以用它来模拟hover。使用Javascript：</p><pre><code>var myLinks = document.getElementsByTagName(&apos;a&apos;);for(var i = 0; i &lt; myLinks.length; i++){　　myLinks[i].addEventListener(’touchstart’, function(){this.className = “hover”;}, false);　　myLinks[i].addEventListener(’touchend’, function(){this.className = “”;}, false);}</code></pre><p>然后用CSS增加hover效果：</p><pre><code>a:hover, a.hover { /* 你的hover效果 */ }</code></pre><p>这样设计一个链接，感觉可以更像按钮。并且，这个模拟可以用在任何元素上。</p><h3 id="Flexbox-布局"><a href="#Flexbox-布局" class="headerlink" title="Flexbox 布局"></a>Flexbox 布局</h3><p> <a href="http://jsbin.com/ibuwol/2/edit" title="article5" target="_blank" rel="noopener">Flex 模板和实例</a></p><p> <a href="http://www.w3cplus.com/blog/666.html" title="article6" target="_blank" rel="noopener">深入了解 Flexbox 伸缩盒模型</a></p><p> <a href="http://yehao.diandian.com/post/2013-09-15/40052216426" target="_blank" rel="noopener">CSS Flexbox Intro</a></p><p><a href="http://www.w3.org/TR/css3-flexbox/" target="_blank" rel="noopener">http://www.w3.org/TR/css3-flexbox/</a></p><h3 id="3dTouch相关"><a href="#3dTouch相关" class="headerlink" title="3dTouch相关"></a>3dTouch相关</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Force_Touch_events" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Force_Touch_events</a></p><p><a href="https://aotu.io/notes/2016/09/28/3d-touch/" target="_blank" rel="noopener">https://aotu.io/notes/2016/09/28/3d-touch/</a></p><h3 id="pwa与service-worker"><a href="#pwa与service-worker" class="headerlink" title="pwa与service worker"></a>pwa与service worker</h3><p><a href="https://segmentfault.com/a/1190000005641692" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005641692</a>  pwa介绍</p><p><a href="https://zhuanlan.zhihu.com/p/20040372" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/20040372</a>  service woker介绍</p><p><a href="http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207243549&amp;idx=1&amp;sn=4ebe4beb8123f1b5ab58810ac8bc5994&amp;scene=0#rd" target="_blank" rel="noopener">http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=207243549&amp;idx=1&amp;sn=4ebe4beb8123f1b5ab58810ac8bc5994&amp;scene=0#rd</a>  微信与其它app的推送技术介绍</p><p><a href="https://segmentfault.com/a/1190000005346689" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005346689</a> pwa资料整理</p><p><a href="https://segmentfault.com/a/1190000010911535" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010911535</a> pwa 最新资讯</p><h3 id="居中问题"><a href="#居中问题" class="headerlink" title="居中问题"></a>居中问题</h3><p>居中是移动端跟pc端共同的噩梦。这里有两种兼容性比较好的新方案。</p><ul><li><p>table布局法</p><p>  .box{</p><pre><code>text-align:center;display:table-cell;vertical-align:middle;</code></pre><p>  }</p></li><li><p>老版本flex布局法</p><p>  .box{</p><pre><code>display:-webkit-box;-webkit-box-pack: center;-webkit-box-align: center;text-align:center;</code></pre><p>  }</p></li></ul><p>以上两种其实分别是retchat跟ionic的布局基石。</p><p>这里有更详细的更多的选择<a href="http://www.zhouwenbin.com/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/" target="_blank" rel="noopener">http://www.zhouwenbin.com/%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</a> 来自周文彬的博客</p><h3 id="h5底部输入框被键盘遮挡问题"><a href="#h5底部输入框被键盘遮挡问题" class="headerlink" title="h5底部输入框被键盘遮挡问题"></a>h5底部输入框被键盘遮挡问题</h3><p>h5页面有个很蛋疼的问题就是，当输入框在最底部，点击软键盘后输入框会被遮挡。</p><p>可以使用这个api，在点击input的时候调用即可 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollIntoView</a></p><p>如果切换输入法，由于不同输入法高度不同，又会出现被遮挡问题。由于无法捕获切换输入法的事件，因此可以开一个计时器，不断执行sscrollintoview即可。</p><h3 id="移动端实现标题文字截断"><a href="#移动端实现标题文字截断" class="headerlink" title="移动端实现标题文字截断"></a>移动端实现标题文字截断</h3><p><a href="http://www.75team.com/archives/611" target="_blank" rel="noopener">http://www.75team.com/archives/611</a></p><h3 id="ios实现复制到剪贴板"><a href="#ios实现复制到剪贴板" class="headerlink" title="ios实现复制到剪贴板"></a>ios实现复制到剪贴板</h3><pre><code>var $input = $(&apos; some input/textarea &apos;);$input.val(result);if (navigator.userAgent.match(/ipad|ipod|iphone/i)) {  var el = $input.get(0);  var editable = el.contentEditable;  var readOnly = el.readOnly;  el.contentEditable = true;  el.readOnly = false;  var range = document.createRange();  range.selectNodeContents(el);  var sel = window.getSelection();  sel.removeAllRanges();  sel.addRange(range);  el.setSelectionRange(0, 999999);  el.contentEditable = editable;  el.readOnly = readOnly;} else {  $input.select();}document.execCommand(&apos;copy&apos;);$input.blur();</code></pre><h2 id="placeholder–line-height"><a href="#placeholder–line-height" class="headerlink" title="placeholder–line-height"></a>placeholder–line-height</h2><p> input 的placeholder会出现文本位置偏上的情况：PC端设置line-height等于height能够对齐，而移动端仍然是偏上，解决是设置line-height：normal，（stackoverflow也可查到这种解决办法）。</p><h3 id="处理-Retina-双倍屏幕"><a href="#处理-Retina-双倍屏幕" class="headerlink" title="处理 Retina 双倍屏幕"></a>处理 Retina 双倍屏幕</h3><p> <a href="http://miekd.com/articles/using-css-sprites-to-optimize-your-website-for-retina-displays/" title="article5" target="_blank" rel="noopener">（经典）Using CSS Sprites to optimize your website for Retina Displays</a></p><p> <a href="http://www.w3cplus.com/css/css-background-size-graphics.html" title="article5" target="_blank" rel="noopener">使用CSS3的background-size优化苹果的Retina屏幕的图像显示</a></p><p> <a href="http://www.w3cplus.com/css/using-css-sprites-to-optimize-your-website-for-retina-displays.html" title="article5" target="_blank" rel="noopener">使用 CSS sprites 来优化你的网站在 Retina 屏幕下显示</a></p><p> <a href="http://alexthorpe.com/uncategorized/css-sprites-for-retina-display-devices/683/" title="article5" target="_blank" rel="noopener">（案例）CSS IMAGE SPRITES FOR RETINA (HIRES) DEVICES</a></p><h3 id="input类型为date情况下不支持placeholder（来自于江水）"><a href="#input类型为date情况下不支持placeholder（来自于江水）" class="headerlink" title="input类型为date情况下不支持placeholder（来自于江水）"></a>input类型为date情况下不支持placeholder（来自于江水）</h3><p>这其实是浏览器自己的处理。因为浏览器会针对此类型 input 增加 datepicker 模块。</p><p>对 input type date 使用 placeholder 的目的是为了让用户更准确的输入日期格式，iOS 上会有 datepicker 不会显示 placeholder 文字，但是为了统一表单外观，往往需要显示。Android 部分机型没有 datepicker 也不会显示 placeholder 文字。</p><p>桌面端（Mac）</p><ul><li>Safari 不支持 datepicker，placeholder 正常显示。</li><li>Firefox 不支持 datepicker，placeholder 正常显示。</li><li>Chrome 支持 datepicker，显示 年、月、日 格式，忽略 placeholder。</li></ul><p>移动端</p><ul><li>iPhone5 iOS7 有 datepicker 功能，但是不显示 placeholder。</li><li>Andorid 4.0.4 无 datepicker 功能，不显示 placeholder</li></ul><p>解决方法：</p><pre><code>&lt;input placeholder=&quot;Date&quot; class=&quot;textbox-n&quot; type=&quot;text&quot; onfocus=&quot;(this.type=&apos;date&apos;)&quot;  id=&quot;date&quot;&gt;</code></pre><p>因为text是支持placeholder的。因此当用户focus的时候自动把type类型改变为date，这样既有placeholder也有datepicker了</p><p>###iphone系列媒体查询</p><p>@media only screen and (min-device-width: 320px){<br>         //针对iPhone 3<br>}  </p><p>@media only screen and (min-device-width: 320px)and (-webkit-min-device-pixel-ratio: 2) {<br>         //针对iPhone 4, 5c,5s, 所有iPhone6的放大模式，个别iPhone6的标准模式<br>}<br>@media only screen and (min-device-width: 375px)and (-webkit-min-device-pixel-ratio: 2) {<br>//针对大多数iPhone6的标准模式<br>}  </p><p>@media only screen and (min-device-width: 375px)and (-webkit-min-device-pixel-ratio: 3) {<br>//针对所有iPhone6+的放大模式  </p><p>}<br>@media only screen and (min-device-width:412px) and (-webkit-min-device-pixel-ratio: 3) {<br>//针对所有iPhone6+的标准模式,414px写为412px是由于三星Nexus 6为412px，可一并处理  </p><p>}  </p><h3 id="判断照片的横竖排列"><a href="#判断照片的横竖排列" class="headerlink" title="判断照片的横竖排列"></a>判断照片的横竖排列</h3><p>有这样一种需求，需要判断用户照片是横着拍出来的还是竖着拍出来的，这里需要使用照片得exif信息：</p><pre><code>$(&quot;input&quot;).change(function() {    var file = this.files[0];    fr   = new FileReader;    fr.onloadend = function() {        var exif = EXIF.readFromBinaryFile(new BinaryFile(this.result));        alert(exif.Orientation);    };    fr.readAsBinaryString(file);});</code></pre><p>可以使用这两个库 来取exif信息<a href="http://www.nihilogic.dk/labs/binaryajax/binaryajax.js" target="_blank" rel="noopener">http://www.nihilogic.dk/labs/binaryajax/binaryajax.js</a> <a href="http://www.nihilogic.dk/labs/exif/exif.js" target="_blank" rel="noopener">http://www.nihilogic.dk/labs/exif/exif.js</a></p><h3 id="Android上当viewport的width大于device-width时出现文字无故折行的解决办法"><a href="#Android上当viewport的width大于device-width时出现文字无故折行的解决办法" class="headerlink" title="Android上当viewport的width大于device-width时出现文字无故折行的解决办法"></a>Android上当viewport的width大于device-width时出现文字无故折行的解决办法</h3><p><a href="http://www.iunbug.com/archives/2013/04/23/798.html" target="_blank" rel="noopener">http://www.iunbug.com/archives/2013/04/23/798.html</a></p><h3 id="白屏解决与优化方案"><a href="#白屏解决与优化方案" class="headerlink" title="白屏解决与优化方案"></a>白屏解决与优化方案</h3><p>当前很多无线页面都使用前端模板进行数据渲染，那么在糟糕的网速情况下，一进去页面，看到的不是白屏就是 loading，这成为白屏问题。</p><p>此问题发生的原因基本可以归结为网速跟静态资源</p><p>1、css文件加载需要一些时间，在加载的过程中页面是空白的。 解决：可以考虑将css代码前置和内联。<br>2、首屏无实际的数据内容，等待异步加载数据再渲染页面导致白屏。 解决：在首屏直接同步渲染html，后续的滚屏等再采用异步请求数据和渲染html。<br>3、首屏内联js的执行会阻塞页面的渲染。 解决：尽量不在首屏html代码中放置内联脚本。（来自翔歌）</p><p>解决方案</p><p>根本原因是客户端渲染的无力，因此最简单的方法是在服务器端，使用模板引擎渲染所有页面。同时</p><p> 1减少文件加载体积，如html压缩，js压缩<br> 2加快js执行速度 比如常见的无限滚动的页面，可以使用js先渲染一个屏幕范围内的东西<br> 3提供一些友好的交互，比如提供一些假的滚动条<br> 4使用本地存储处理静态文件。</p><h3 id="h5-小特效实践"><a href="#h5-小特效实践" class="headerlink" title="h5 小特效实践"></a>h5 小特效实践</h3><h4 id="加速度感应（摇一摇）"><a href="#加速度感应（摇一摇）" class="headerlink" title="加速度感应（摇一摇）"></a>加速度感应（摇一摇）</h4><p> if (window.DeviceMotionEvent) {<br>     window.addEventListener(‘devicemotion’,deviceMotionHandler, false);<br> }<br> var speed = 30;//speed<br> var x = y = z = lastX = lastY = lastZ = 0;<br> function deviceMotionHandler(eventData) {<br>     var acceleration =event.accelerationIncludingGravity;<br>     x = acceleration.x;<br>     y = acceleration.y;<br>     z = acceleration.z;<br>     if(Math.abs(x-lastX) &gt; speed || Math.abs(y-lastY) &gt; speed || Math.abs(z-lastZ) &gt; speed) {<br>         alert(‘别摇那么大力嘛…’);<br>         // your code here<br>     }<br>     lastX = x;<br>     lastY = y;<br>     lastZ = z;<br> }</p><h4 id="抽奖转盘"><a href="#抽奖转盘" class="headerlink" title="抽奖转盘"></a>抽奖转盘</h4><h4 id="刮彩票"><a href="#刮彩票" class="headerlink" title="刮彩票"></a>刮彩票</h4><h4 id="全景效果"><a href="#全景效果" class="headerlink" title="全景效果"></a>全景效果</h4><h4 id="描边动画"><a href="#描边动画" class="headerlink" title="描边动画"></a>描边动画</h4><h4 id="翻书"><a href="#翻书" class="headerlink" title="翻书"></a>翻书</h4><h3 id="如何实现打开已安装的app，若未安装则引导用户安装"><a href="#如何实现打开已安装的app，若未安装则引导用户安装" class="headerlink" title="如何实现打开已安装的app，若未安装则引导用户安装?"></a>如何实现打开已安装的app，若未安装则引导用户安装?</h3><p>来自 <a href="http://gallery.kissyui.com/redirectToNative/1.2/guide/index.html" target="_blank" rel="noopener">http://gallery.kissyui.com/redirectToNative/1.2/guide/index.html</a> kissy mobile<br>通过iframe src发送请求打开app自定义url scheme，如taobao://home（淘宝首页） 、etao://scan（一淘扫描）);<br>如果安装了客户端则会直接唤起，直接唤起后，之前浏览器窗口（或者扫码工具的webview）推入后台；<br>如果在指定的时间内客户端没有被唤起，则js重定向到app下载地址。<br>大概实现代码如下</p><pre><code>goToNative:function(){    if(!body) {            setTimeout(function(){                doc.body.appendChild(iframe);            }, 0);        } else {            body.appendChild(iframe);        }setTimeout(function() {            doc.body.removeChild(iframe);            gotoDownload(startTime);//去下载，下载链接一般是itunes app store或者apk文件链接            /**             * 测试时间设置小于800ms时，在android下的UC浏览器会打开native app时并下载apk，             * 测试android+UC下打开native的时间最好大于800ms;             */        }, 800);}</code></pre><p>需要注意的是 如果是android chrome 25版本以后，在iframe src不会发送请求，<br>原因如下<a href="https://developers.google.com/chrome/mobile/docs/intents" target="_blank" rel="noopener">https://developers.google.com/chrome/mobile/docs/intents</a> ，通过location href使用intent机制拉起客户端可行并且当前页面不跳转。</p><pre><code>window.location = &apos;intent://&apos; + schemeUrl + &apos;#Intent;scheme=&apos; + scheme + &apos;;package=&apos; + self.package + &apos;;end&apos;;</code></pre><p>补充一个来自三水清的详细讲解 <a href="http://js8.in/2013/12/16/ios%E4%BD%BF%E7%94%A8schema%E5%8D%8F%E8%AE%AE%E8%B0%83%E8%B5%B7app/" target="_blank" rel="noopener">http://js8.in/2013/12/16/ios%E4%BD%BF%E7%94%A8schema%E5%8D%8F%E8%AE%AE%E8%B0%83%E8%B5%B7app/</a></p><p>在微信、微博、QQ、Safari唤起App的解决方案汇总 ： <a href="https://mp.weixin.qq.com/s/YAnlEBMZP_e91MXjPbAp-w" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/YAnlEBMZP_e91MXjPbAp-w</a></p><h3 id="active的兼容-来自薛端阳"><a href="#active的兼容-来自薛端阳" class="headerlink" title="active的兼容(来自薛端阳)"></a>active的兼容(来自薛端阳)</h3><p>今天发现，要让a链接的CSS active伪类生效，只需要给这个a链接的touch系列的任意事件touchstart/touchend绑定一个空的匿名方法即可hack成功</p><pre><code>&lt;style&gt;a {color: #000;}a:active {color: #fff;}&lt;/style&gt;&lt;a herf=”asdasd”&gt;asdasd&lt;/a&gt;&lt;script&gt;var a=document.getElementsByTagName(‘a’);for(var i=0;i&lt;a.length;i++){a[i].addEventListener(‘touchstart’,function(){},false);}&lt;/script&gt;</code></pre><h3 id="视频播放的各种技术"><a href="#视频播放的各种技术" class="headerlink" title="视频播放的各种技术"></a>视频播放的各种技术</h3><p><a href="http://taobaofed.org/blog/2016/05/23/video-player/" target="_blank" rel="noopener">http://taobaofed.org/blog/2016/05/23/video-player/</a></p><h3 id="消除transition闪屏"><a href="#消除transition闪屏" class="headerlink" title="消除transition闪屏"></a>消除transition闪屏</h3><p>两个方法：使用css3动画的时尽量利用3D加速，从而使得动画变得流畅。动画过程中的动画闪白可以通过 backface-visibility 隐藏。</p><pre><code>-webkit-transform-style: preserve-3d;/*设置内嵌的元素在 3D 空间如何呈现：保留 3D*/-webkit-backface-visibility: hidden;/*（设置进行转换的元素的背面在面对用户时是否可见：隐藏）*/</code></pre><h3 id="测试是否支持svg图片"><a href="#测试是否支持svg图片" class="headerlink" title="测试是否支持svg图片"></a>测试是否支持svg图片</h3><pre><code>document.implementation.hasFeature(&quot;http:// www.w3.org/TR/SVG11/feature#Image&quot;, &quot;1.1&quot;)</code></pre><h2 id="考虑兼容“隐私模式”-from-http-blog-youyo-name-archives-smarty-phones-webapp-deverlop-advance-html"><a href="#考虑兼容“隐私模式”-from-http-blog-youyo-name-archives-smarty-phones-webapp-deverlop-advance-html" class="headerlink" title="考虑兼容“隐私模式”(from http://blog.youyo.name/archives/smarty-phones-webapp-deverlop-advance.html)"></a>考虑兼容“隐私模式”(from <a href="http://blog.youyo.name/archives/smarty-phones-webapp-deverlop-advance.html" target="_blank" rel="noopener">http://blog.youyo.name/archives/smarty-phones-webapp-deverlop-advance.html</a>)</h2><p>ios的safari提供一种“隐私模式”，如果你的webapp考虑兼容这个模式，那么在使用html5的本地存储的一种————localStorage时，可能因为“隐私模式”下没有权限读写localstorge而使代码抛出错误，导致后续的js代码都无法运行了。</p><p>既然在safari的“隐私模式”下，没有调用localStorage的权限，首先想到的是先判断是否支持localStorage，代码如下：</p><pre><code>if(&apos;localStorage&apos; in window){    //需要使用localStorage的代码写在这}else{    //不支持的提示和向下兼容代码}</code></pre><p>测试发现，即使在safari的“隐私模式”下，’localStorage’ in window的返回值依然为true，也就是说，if代码块内部的代码依然会运行，问题没有得到解决。<br>接下来只能相当使用try catch了，虽然这是一个不太推荐被使用的方法，使用try catch捕获错误，使后续的js代码可以继续运行，代码如下：</p><pre><code>try{    if(&apos;localStorage&apos; in window){         //需要使用localStorage的代码写在这    }else{         //不支持的提示和向下兼容代码    }}catch(e){    // 隐私模式相关提示代码和不支持的提示和向下兼容代码}</code></pre><p>所以，提醒大家注意，在需要兼容ios的safari的“隐私模式”的情况下，本地存储相关的代码需要使用try catch包裹并降级兼容。</p><h3 id="安卓手机点击锁定页面效果问题"><a href="#安卓手机点击锁定页面效果问题" class="headerlink" title="安卓手机点击锁定页面效果问题"></a>安卓手机点击锁定页面效果问题</h3><p>有些安卓手机，页面点击时会停止页面的javascript，css3动画等的执行，这个比较蛋疼。不过可以用阻止默认事件解决。详细见<br><a href="http://stackoverflow.com/questions/10246305/android-browser-touch-events-stop-display-being-updated-inc-canvas-elements-h" target="_blank" rel="noopener">http://stackoverflow.com/questions/10246305/android-browser-touch-events-stop-display-being-updated-inc-canvas-elements-h</a></p><pre><code>function touchHandlerDummy(e){    e.preventDefault();    return false;}document.addEventListener(&quot;touchstart&quot;, touchHandlerDummy, false);document.addEventListener(&quot;touchmove&quot;, touchHandlerDummy, false);document.addEventListener(&quot;touchend&quot;, touchHandlerDummy, false);</code></pre><h3 id="消除ie10里面的那个叉号"><a href="#消除ie10里面的那个叉号" class="headerlink" title="消除ie10里面的那个叉号"></a>消除ie10里面的那个叉号</h3><p><a href="http://msdn.microsoft.com/en-us/library/windows/apps/hh767361.aspx" title="article4" target="_blank" rel="noopener">IE Pseudo-elements</a></p><pre><code>input:-ms-clear{display:none;}</code></pre><h3 id="关于ios与os端字体的优化-横竖屏会出现字体加粗不一致等"><a href="#关于ios与os端字体的优化-横竖屏会出现字体加粗不一致等" class="headerlink" title="关于ios与os端字体的优化(横竖屏会出现字体加粗不一致等)"></a>关于ios与os端字体的优化(横竖屏会出现字体加粗不一致等)</h3><p><a href="http://blog.sina.com.cn/s/blog_6da647a601011u4v.html" title="article5" target="_blank" rel="noopener">mac下网页中文字体优化</a></p><p><a href="http://stackoverflow.com/questions/3220662/uiwebview-font-is-thinner-in-portrait-than-landscape" title="article5" target="_blank" rel="noopener">UIWebView font is thinner in portrait than landscape</a></p><h2 id="判断用户是否是“将网页添加到主屏后，再从主屏幕打开这个网页”的"><a href="#判断用户是否是“将网页添加到主屏后，再从主屏幕打开这个网页”的" class="headerlink" title="判断用户是否是“将网页添加到主屏后，再从主屏幕打开这个网页”的"></a>判断用户是否是“将网页添加到主屏后，再从主屏幕打开这个网页”的</h2><pre><code>navigator.standalone</code></pre><h3 id="隐藏地址栏-amp-处理事件的时候，防止滚动条出现："><a href="#隐藏地址栏-amp-处理事件的时候，防止滚动条出现：" class="headerlink" title="隐藏地址栏 &amp; 处理事件的时候，防止滚动条出现："></a>隐藏地址栏 &amp; 处理事件的时候，防止滚动条出现：</h3><pre><code>// 隐藏地址栏  &amp; 处理事件的时候 ，防止滚动条出现addEventListener(&apos;load&apos;, function(){        setTimeout(function(){ window.scrollTo(0, 1); }, 100);});</code></pre><h3 id="ios7-可以通过meta标签的minimal来隐藏地址栏了"><a href="#ios7-可以通过meta标签的minimal来隐藏地址栏了" class="headerlink" title="ios7 可以通过meta标签的minimal来隐藏地址栏了"></a>ios7 可以通过meta标签的minimal来隐藏地址栏了</h3><p><a href="http://darkblue.sdf.org/weblog/ios-7-dot-1-mobile-safari-minimal-ui.html" target="_blank" rel="noopener">http://darkblue.sdf.org/weblog/ios-7-dot-1-mobile-safari-minimal-ui.html</a></p><h3 id="判断是否为iPhone："><a href="#判断是否为iPhone：" class="headerlink" title="判断是否为iPhone："></a>判断是否为iPhone：</h3><pre><code>// 判断是否为 iPhone ：function isAppleMobile() {    return (navigator.platform.indexOf(&apos;iPhone&apos;) != -1);};</code></pre><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage:"></a>localStorage:</h3><pre><code>var v = localStorage.getItem(&apos;n&apos;) ? localStorage.getItem(&apos;n&apos;) : &quot;&quot;;   // 如果名称是  n 的数据存在 ，则将其读出 ，赋予变量  v  。localStorage.setItem(&apos;n&apos;, v);                                           // 写入名称为 n、值为  v  的数据localStorage.removeItem(&apos;n&apos;);        // 删除名称为  n  的数据</code></pre><h3 id="使用特殊链接："><a href="#使用特殊链接：" class="headerlink" title="使用特殊链接："></a>使用特殊链接：</h3><p>如果你关闭自动识别后 ，又希望某些电话号码能够链接到 iPhone 的拨号功能 ，那么可以通过这样来声明电话链接 ,</p><pre><code>&lt;a href=&quot;tel:12345654321&quot;&gt;打电话给我&lt;/a&gt;&lt;a href=&quot;sms:12345654321&quot;&gt;发短信&lt;/a&gt;</code></pre><p>或用于单元格：</p><pre><code>&lt;td onclick=&quot;location.href=&apos;tel:122&apos;&quot;&gt;</code></pre><h3 id="自动大写与自动修正"><a href="#自动大写与自动修正" class="headerlink" title="自动大写与自动修正"></a>自动大写与自动修正</h3><p>要关闭这两项功能，可以通过autocapitalize 与autocorrect 这两个选项：</p><pre><code>&lt;input type=&quot;text&quot; autocapitalize=&quot;off&quot; autocorrect=&quot;off&quot; /&gt;</code></pre><h3 id="不让-Android-识别邮箱"><a href="#不让-Android-识别邮箱" class="headerlink" title="不让 Android 识别邮箱"></a>不让 Android 识别邮箱</h3><pre><code>&lt;meta content=&quot;email=no&quot; name=&quot;format-detection&quot; /&gt;</code></pre><h3 id="禁止-iOS-弹出各种操作窗口"><a href="#禁止-iOS-弹出各种操作窗口" class="headerlink" title="禁止 iOS 弹出各种操作窗口"></a>禁止 iOS 弹出各种操作窗口</h3><pre><code>-webkit-touch-callout:none</code></pre><h3 id="禁止用户选中文字"><a href="#禁止用户选中文字" class="headerlink" title="禁止用户选中文字"></a>禁止用户选中文字</h3><pre><code>-webkit-user-select:none</code></pre><h3 id="动画效果中，使用-translate-比使用定位性能高"><a href="#动画效果中，使用-translate-比使用定位性能高" class="headerlink" title="动画效果中，使用 translate 比使用定位性能高"></a>动画效果中，使用 translate 比使用定位性能高</h3><p><a href="http://paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/" target="_blank" rel="noopener">Why Moving Elements With Translate() Is Better Than Pos:abs Top/left</a></p><h3 id="webgl导致app闪退"><a href="#webgl导致app闪退" class="headerlink" title="webgl导致app闪退"></a>webgl导致app闪退</h3><p>iOS 客户端切到后台后如果 webgl 在canvas上渲染会导致客户端crash。原因是 iOS 下使用 webgl 渲染时，WebCore 会调用到 OpenGL ES 进行渲染，而苹果发现有在后台调用 OpenGL ES，就会直接结束 App。相关文档 <a href="https://developer.apple.com/library/content/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/ImplementingaMultitasking-awareOpenGLESApplication/ImplementingaMultitasking-awareOpenGLESApplication.html" target="_blank" rel="noopener">https://developer.apple.com/library/content/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/ImplementingaMultitasking-awareOpenGLESApplication/ImplementingaMultitasking-awareOpenGLESApplication.html</a>。</p><p>解决方案：一般的客户端容器技术（phonegap weex等）都提供了监测app切换的事件，在事件中主动暂停/恢复 webgl 的渲染即可</p><h3 id="拿到滚动条"><a href="#拿到滚动条" class="headerlink" title="拿到滚动条"></a>拿到滚动条</h3><pre><code>window.scrollYwindow.scrollX</code></pre><p> 比如要绑定一个touchmove的事件，正常的情况下类似这样(来自呼吸二氧化碳)</p><pre><code>$(&apos;div&apos;).on(&apos;touchmove&apos;, function(){//.….code{});</code></pre><p>而如果中间的code需要处理的东西多的话，fps就会下降影响程序顺滑度，而如果改成这样</p><pre><code>$(&apos;div&apos;).on(&apos;touchmove&apos;, function(){setTimeout(function(){//.….code},0);{});</code></pre><p>把代码放在setTimeout中，会发现程序变快.</p><h3 id="关于-iOS-系统中，Web-APP-启动图片在不同设备上的适应性设置"><a href="#关于-iOS-系统中，Web-APP-启动图片在不同设备上的适应性设置" class="headerlink" title="关于 iOS 系统中，Web APP 启动图片在不同设备上的适应性设置"></a>关于 iOS 系统中，Web APP 启动图片在不同设备上的适应性设置</h3><p><a href="http://stackoverflow.com/questions/4687698/mulitple-apple-touch-startup-image-resolutions-for-ios-web-app-esp-for-ipad/10011893#10011893" target="_blank" rel="noopener">http://stackoverflow.com/questions/4687698/mulitple-apple-touch-startup-image-resolutions-for-ios-web-app-esp-for-ipad/10011893#10011893</a></p><h3 id="position-sticky与position-fixed布局"><a href="#position-sticky与position-fixed布局" class="headerlink" title="position:sticky与position:fixed布局"></a>position:sticky与position:fixed布局</h3><p><a href="http://www.zhouwenbin.com/positionsticky-%E7%B2%98%E6%80%A7%E5%B8%83%E5%B1%80/" target="_blank" rel="noopener">http://www.zhouwenbin.com/positionsticky-%E7%B2%98%E6%80%A7%E5%B8%83%E5%B1%80/</a><br><a href="http://www.zhouwenbin.com/sticky%E6%A8%A1%E6%8B%9F%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">http://www.zhouwenbin.com/sticky%E6%A8%A1%E6%8B%9F%E9%97%AE%E9%A2%98/</a></p><h3 id="关于-iOS-系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格"><a href="#关于-iOS-系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格" class="headerlink" title="关于 iOS 系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格"></a>关于 iOS 系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格</h3><p>可以通过正则去掉</p><pre><code>this.value = this.value.replace(/\u2006/g, &apos;&apos;);</code></pre><h3 id="关于android-webview中，input元素输入时出现的怪异情况"><a href="#关于android-webview中，input元素输入时出现的怪异情况" class="headerlink" title="关于android webview中，input元素输入时出现的怪异情况"></a>关于android webview中，input元素输入时出现的怪异情况</h3><p>见下图</p><p><img src="http://cdn.bielousov.com/wp-content/uploads/2012/08/android-input-label-text-issue.png" alt="怪异图"></p><p>Android Web 视图,至少在 HTC EVO 和三星的 Galaxy Nexus 中，文本输入框在输入时表现的就像占位符。情况为一个类似水印的东西在用户输入区域，一旦用户开始输入便会消失(见图片)。</p><p>在 Android 的默认样式下当输入框获得焦点后，若存在一个绝对定位或者 fixed 的元素，布局会被破坏，其他元素与系统输入字段会发生重叠(如搜索图标将消失为搜索字段)，可以观察到布局与原始输入字段有偏差(见截图)。</p><p>这是一个相当复杂的问题，以下简单布局可以重现这个问题:</p><pre><code>&lt;label for=&quot;phone&quot;&gt;Phone: *&lt;/label&gt;&lt;input type=&quot;tel&quot; name=&quot;phone&quot; id=&quot;phone&quot; minlength=&quot;10&quot; maxlength=&quot;10&quot; inputmode=&quot;latin digits&quot; required=&quot;required&quot; /&gt;</code></pre><p>解决方法</p><pre><code>-webkit-user-modify: read-write-plaintext-only</code></pre><p>详细参考<a href="http://www.bielousov.com/2012/android-label-text-appears-in-input-field-as-a-placeholder/" target="_blank" rel="noopener">http://www.bielousov.com/2012/android-label-text-appears-in-input-field-as-a-placeholder/</a><br>注意，该属性会导致中文不能输入词组，只能单个字。感谢鬼哥与飞（游勇飞）贡献此问题与解决方案</p><p>另外，在position:fixed后的元素里，尽量不要使用输入框。更多的bug可参考<br><a href="http://www.cosdiv.com/page/M0/S882/882353.html" target="_blank" rel="noopener">http://www.cosdiv.com/page/M0/S882/882353.html</a></p><p>依旧无法解决（摩托罗拉ME863手机），则使用input:text类型而非password类型，并设置其设置  -webkit-text-security: disc; 隐藏输入密码从而解决。</p><h3 id="JS动态生成的select下拉菜单在Android2-x版本的默认浏览器里不起作用"><a href="#JS动态生成的select下拉菜单在Android2-x版本的默认浏览器里不起作用" class="headerlink" title="JS动态生成的select下拉菜单在Android2.x版本的默认浏览器里不起作用"></a>JS动态生成的select下拉菜单在Android2.x版本的默认浏览器里不起作用</h3><p>解决方法删除了overflow-x:hidden; 然后在JS生成下来菜单之后focus聚焦，这两步操作之后解决了问题。(来自岛都-小Qi)</p><p>参考<a href="http://stackoverflow.com/questions/4697908/html-select-control-disabled-in-android-webview-in-emulator" target="_blank" rel="noopener">http://stackoverflow.com/questions/4697908/html-select-control-disabled-in-android-webview-in-emulator</a></p><h3 id="Andriod-上去掉语音输入按钮"><a href="#Andriod-上去掉语音输入按钮" class="headerlink" title="Andriod 上去掉语音输入按钮"></a>Andriod 上去掉语音输入按钮</h3><pre><code>input::-webkit-input-speech-button {display: none}</code></pre><h2 id="IE10-的特殊鼠标事件"><a href="#IE10-的特殊鼠标事件" class="headerlink" title="IE10 的特殊鼠标事件"></a>IE10 的特殊鼠标事件</h2><p><a href="http://www.mansonchor.com/blog/blog_detail_73.html" title="article5" target="_blank" rel="noopener">IE10 事件监听</a></p><h2 id="iOS-输入框最佳实践"><a href="#iOS-输入框最佳实践" class="headerlink" title="iOS 输入框最佳实践"></a>iOS 输入框最佳实践</h2><p><a href="http://stackoverflow.com/questions/11219242/mobile-friendly-input-of-a-digits-spaces-string-a-credit-card-number" target="_blank" rel="noopener">Mobile-friendly input of a digits + spaces string (a credit card number)</a></p><p><a href="http://stackoverflow.com/questions/8216278/html5-input-type-number-vs-tel" target="_blank" rel="noopener">HTML5 input type number vs tel</a></p><p><a href="http://stackoverflow.com/questions/6178556/iphone-numeric-keyboard-for-text-input" target="_blank" rel="noopener">iPhone: numeric keyboard for text input</a></p><p><a href="https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/KeyboardManagement/KeyboardManagement.html" target="_blank" rel="noopener">Text Programming Guide for iOS - Managing the Keyboard</a></p><p><a href="http://www.miketaylr.com/code/input-type-attr.html" target="_blank" rel="noopener">HTML5 inputs and attribute support</a></p><h2 id="往返缓存问题"><a href="#往返缓存问题" class="headerlink" title="往返缓存问题"></a>往返缓存问题</h2><p>点击浏览器的回退，有时候不会自动执行js，特别是在mobilesafari中。这与<strong>往返缓存(bfcache)</strong>有关系。有很多hack的处理方法，可以参考</p><p><a href="http://stackoverflow.com/questions/24046/the-safari-back-button-problem" target="_blank" rel="noopener">http://stackoverflow.com/questions/24046/the-safari-back-button-problem</a></p><p><a href="http://stackoverflow.com/questions/11979156/mobile-safari-back-button" target="_blank" rel="noopener">http://stackoverflow.com/questions/11979156/mobile-safari-back-button</a></p><h2 id="不暂停的计时器（safari的进程冻结）"><a href="#不暂停的计时器（safari的进程冻结）" class="headerlink" title="不暂停的计时器（safari的进程冻结）"></a>不暂停的计时器（safari的进程冻结）</h2><p><a href="https://www.imququ.com/post/ios-none-freeze-timer.html" target="_blank" rel="noopener">https://www.imququ.com/post/ios-none-freeze-timer.html</a><br>或者可以用postmessage方式:<br>主页面:</p><pre><code>// 解决ios safari tab在后台会遭遇进程冻结问题// http://www.apple.com/safari/#gallery-icloud-tabs// Safari takes advantage of power-saving technologies such as App Nap, which puts background Safari tabs into a low-power state until you start using them again. In addition, Safari Power Saver conserves battery life by intelligently pausing web videos and other plug‑in content when they’re not front and center on the web pages you visit. All told, Safari on OS X Mavericks lets you browse up to an hour longer than with Chrome or Firefox.1var work;function startWorker() {    if (typeof(Worker) !== &quot;undefined&quot;) {        if (typeof(work) == &quot;undefined&quot;) {            work = new Worker(&quot;/workers.js&quot;);        }        work.onmessage = function(event) {            // document.getElementById(&quot;result-count&quot;).innerHTML = event.data.count;            // document.getElementById(&quot;result-url&quot;).innerHTML = event.data.targetURL;            if (target &amp;&amp; event.data.targetURL != &quot;&quot;) target.location.href = event.data.targetURL;        };    } else {        console.log(&apos;does not support Web Workers...&apos;);    }}function stopWorker() {    work.terminate();}startWorker();</code></pre><p>worker:</p><pre><code>// 解决ios safari tab在后台会遭遇进程冻结问题// http://www.apple.com/safari/#gallery-icloud-tabs// Safari takes advantage of power-saving technologies such as App Nap, which puts background Safari tabs into a low-power state until you start using them again. In addition, Safari Power Saver conserves battery life by intelligently pausing web videos and other plug‑in content when they’re not front and center on the web pages you visit. All told, Safari on OS X Mavericks lets you browse up to an hour longer than with Chrome or Firefox.1importScripts(&apos;/socket.io/socket.io.js&apos;);var count = 0,    targetURL = &apos;&apos;    ;var socket = io.connect(&apos;/&apos;);socket.on(&apos;navigate&apos;, function (data) {  count = count++;  postMessage({targetURL:data.url,count:count});});</code></pre><h2 id="Web移动端Fixed布局的解决方案"><a href="#Web移动端Fixed布局的解决方案" class="headerlink" title="Web移动端Fixed布局的解决方案"></a>Web移动端Fixed布局的解决方案</h2><p><a href="http://efe.baidu.com/blog/mobile-fixed-layout/" target="_blank" rel="noopener">http://efe.baidu.com/blog/mobile-fixed-layout/</a></p><h2 id="ios上background-attachment-fixed不能正常工作"><a href="#ios上background-attachment-fixed不能正常工作" class="headerlink" title="ios上background-attachment:fixed不能正常工作"></a>ios上background-attachment:fixed不能正常工作</h2><p>参考 <a href="http://stackoverflow.com/questions/20443574/fixed-background-image-with-ios7" target="_blank" rel="noopener">http://stackoverflow.com/questions/20443574/fixed-background-image-with-ios7</a></p><h2 id="在高清屏幕上实现-1px-的几种方案"><a href="#在高清屏幕上实现-1px-的几种方案" class="headerlink" title="在高清屏幕上实现 1px 的几种方案"></a>在高清屏幕上实现 1px 的几种方案</h2><ul><li><a href="http://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html" target="_blank" rel="noopener">http://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html</a></li><li><a href="http://www.cnblogs.com/lunarorbitx/p/5287309.html" target="_blank" rel="noopener">http://www.cnblogs.com/lunarorbitx/p/5287309.html</a></li></ul><h2 id="如何让音频跟视频在ios跟android上自动播放"><a href="#如何让音频跟视频在ios跟android上自动播放" class="headerlink" title="如何让音频跟视频在ios跟android上自动播放"></a>如何让音频跟视频在ios跟android上自动播放</h2><pre><code>&lt;audio autoplay &gt;&lt;source  src=&quot;audio/alarm1.mp3&quot; type=&quot;audio/mpeg&quot;&gt;&lt;/audio&gt;</code></pre><p>系统默认情况下 audio的autoplay属性是无法生效的，这也是手机为节省用户流量做的考虑。<br>如果必须要自动播放，有两种方式可以解决。</p><p>1.捕捉一次用户输入后，让音频加载，下次即可播放。</p><pre><code>//play and pause it oncedocument.addEventListener(&apos;touchstart&apos;, function () {    document.getElementsByTagName(&apos;audio&apos;)[0].play();    document.getElementsByTagName(&apos;audio&apos;)[0].pause();});</code></pre><p>这种方法需要捕获一次用户的点击事件来促使音频跟视频加载。当加载后，你就可以用javascript控制音频的播放了，如调用audio.play()</p><p>2.利用iframe加载资源</p><pre><code>var ifr=document.createElement(&quot;iframe&quot;);ifr.setAttribute(&apos;src&apos;, &quot;http://mysite.com/myvideo.mp4&quot;);ifr.setAttribute(&apos;width&apos;, &apos;1px&apos;);ifr.setAttribute(&apos;height&apos;, &apos;1px&apos;);ifr.setAttribute(&apos;scrolling&apos;, &apos;no&apos;);ifr.style.border=&quot;0px&quot;;document.body.appendChild(ifr);</code></pre><p>这种方式其实跟第一种原理是一样的。当资源加载了你就可以控制播放了，但是这里使用iframe来加载，相当于直接触发资源加载。<br>注意，使用创建audio标签并让其加载的方式是不可行的。<br>慎用这种方法，会对用户造成很糟糕的影响。。</p><h2 id="iOS-6-跟-iPhone-5-的那些事"><a href="#iOS-6-跟-iPhone-5-的那些事" class="headerlink" title="iOS 6 跟 iPhone 5 的那些事"></a>iOS 6 跟 iPhone 5 的那些事</h2><h3 id="IP5-的媒体查询"><a href="#IP5-的媒体查询" class="headerlink" title="IP5 的媒体查询"></a>IP5 的媒体查询</h3><pre><code>@media (device-height: 568px) and (-webkit-min-device-pixel-ratio: 2) {/* iPhone 5 or iPod Touch 5th generation */}</code></pre><h3 id="使用媒体查询，提供不同的启动图片："><a href="#使用媒体查询，提供不同的启动图片：" class="headerlink" title="使用媒体查询，提供不同的启动图片："></a>使用媒体查询，提供不同的启动图片：</h3><pre><code>&lt;link href=&quot;startup-568h.png&quot; rel=&quot;apple-touch-startup-image&quot; media=&quot;(device-height: 568px)&quot;&gt;&lt;link href=&quot;startup.png&quot; rel=&quot;apple-touch-startup-image&quot; sizes=&quot;640x920&quot; media=&quot;(device-height: 480px)&quot;&gt;</code></pre><h3 id="拍照上传"><a href="#拍照上传" class="headerlink" title="拍照上传"></a>拍照上传</h3><pre><code>&lt;input type=file accept=&quot;video/*&quot;&gt;&lt;input type=file accept=&quot;image/*&quot;&gt;</code></pre><p>不支持其他类型的文件 ，如音频，Pages文档或PDF文件。 也没有getUserMedia摄像头的实时流媒体支持。</p><h3 id="可以使用的-HTML5-高级-api"><a href="#可以使用的-HTML5-高级-api" class="headerlink" title="可以使用的 HTML5 高级 api"></a>可以使用的 HTML5 高级 api</h3><ul><li>multipart POST 表单提交上传</li><li>XMLHttpRequest 2 AJAX 上传（甚至进度支持）</li><li>文件 API ，在 iOS 6 允许 JavaScript 直接读取的字节数和客户端操作文件。</li></ul><h3 id="智能应用程序横幅"><a href="#智能应用程序横幅" class="headerlink" title="智能应用程序横幅"></a>智能应用程序横幅</h3><p>有了智能应用程序横幅，当网站上有一个相关联的本机应用程序时，Safari浏览器可以显示一个横幅。 如果用户没有安装这个应用程序将显示“安装”按钮，或已经安装的显示“查看”按钮可打开它。</p><p>在 iTunes Link Maker 搜索我们的应用程序和应用程序ID。</p><pre><code>&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=9999999&quot;&gt;</code></pre><p>可以使用 app-argument 提供字符串值，如果参加iTunes联盟计划，可以添加元标记数据</p><pre><code>&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=9999999, app-argument=xxxxxx&quot;&gt;&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=9999999, app-argument=xxxxxx, affiliate-data=partnerId=99&amp;siteID=XXXX&quot;&gt;</code></pre><p>横幅需要156像素（设备是312 hi-dpi）在顶部，直到用户在下方点击内容或关闭按钮，你的网站才会展现全部的高度。 它就像HTML的DOM对象，但它不是一个真正的DOM。</p><p>CSS3 滤镜</p><pre><code>-webkit-filter: blur(5px) grayscale (.5) opacity(0.66) hue-rotate(100deg);</code></pre><p>交叉淡变</p><pre><code>background-image: -webkit-cross-fade(url(&quot;logo1.png&quot;), url(&quot;logo2.png&quot;), 50%);</code></pre><p>Safari中的全屏幕</p><p>除了chrome-less 主屏幕meta标签，现在的iPhone和iPod Touch（而不是在iPad）支持全屏幕模式的窗口。 没有办法强制全屏模式，它需要由用户启动（工具栏上的最后一个图标）。需要引导用户按下屏幕上的全屏图标来激活全屏效果。 可以使用onresize事件检测是否用户切换到全屏幕。</p><p>支持requestAnimationFrameAPI</p><p>支持image-set,retina屏幕的利器</p><pre><code>-webkit-image-set(url(low.png) 1x, url(hi.jpg) 2x)</code></pre><p>应用程序缓存限制增加至25MB。</p><p>Web View（pseudobrowsers，PhoneGap/Cordova应用程序，嵌入式浏览器） 上Javascript运行比Safari慢3.3倍（或者说，Nitro引擎在Safari浏览器是Web应用程序是3.3倍速度）。</p><p>autocomplete属性的输入遵循DOM规范</p><p>来自DOM4的Mutation Observers已经实现。 您可以使用WebKitMutationObserver构造器捕获DOM的变化</p><p>Safari不再总是对用 -webkit-transform:preserve-3d 的元素创建硬件加速</p><p>支持window.selection 的Selection API</p><p>Canvas更新 ：createImageData有一个参数，现在有两个新的功能做好准备，用webkitGetImageDataHD和webkitPutImageDataHD提供高分辨率图像 。</p><p>更新SVG处理器和事件构造函数</p><h2 id="IOS7的大更新"><a href="#IOS7的大更新" class="headerlink" title="IOS7的大更新"></a>IOS7的大更新</h2><p><a href="http://jinlong.github.io/blog/2013/09/23/safari-ios7-html5-problems-apis-review/#jtss-tsina" target="_blank" rel="noopener">iOS 7 的 Safari 和 HTML5：问题，变化和新 API</a>(张金龙翻译)</p><p><a href="http://www.sencha.com/blog/the-html5-scorecard-the-good-the-bad-and-the-ugly-in-ios7" title="ios7的一些bug" target="_blank" rel="noopener">iOS 7 的一些坑(英文)</a></p><p><a href="http://www.mobilexweb.com/blog/safari-ios7-html5-problems-apis-review" title="ios7的一些bug" target="_blank" rel="noopener">ios7的一些坑2(英文)</a></p><h2 id="IOS10的一些更新"><a href="#IOS10的一些更新" class="headerlink" title="IOS10的一些更新"></a>IOS10的一些更新</h2><ul><li>禁止缩放，<code>meta</code>不再支持<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"initial-scale=1.0, user-scalable=no"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>需要监听<code>touchmove</code>来实现禁止缩放<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'touchmove'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event = event.originalEvent || event;</span><br><span class="line">    <span class="keyword">if</span>(event.scale &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        event.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><p>相关链接：<a href="https://stackoverflow.com/questions/37808180/disable-viewport-zooming-ios-10-safari" target="_blank" rel="noopener">disable viewport zooming iOS 10 safari?</a></p><h2 id="webview相关"><a href="#webview相关" class="headerlink" title="webview相关"></a>webview相关</h2><h3 id="Cache开启和设置"><a href="#Cache开启和设置" class="headerlink" title="Cache开启和设置"></a>Cache开启和设置</h3><pre><code>browser.getSettings().setAppCacheEnabled(true);browser.getSettings().setAppCachePath(&quot;/data/data/[com.packagename]/cache&quot;);browser.getSettings().setAppCacheMaxSize(5*1024*1024); // 5MB</code></pre><h3 id="LocalStorage相关设置"><a href="#LocalStorage相关设置" class="headerlink" title="LocalStorage相关设置"></a>LocalStorage相关设置</h3><pre><code>browser.getSettings().setDatabaseEnabled(true);browser.getSettings().setDomStorageEnabled(true);String databasePath = browser.getContext().getDir(&quot;databases&quot;, Context.MODE_PRIVATE).getPath();browser.getSettings().setDatabasePath(databasePath);//Android　webview的LocalStorage有个问题，关闭APP或者重启后，就清楚了，所以需要browser.getSettings().setDatabase相关的操作，把LocalStoarge存到DB中myWebView.setWebChromeClient(new WebChromeClient(){　　　 @Override　　　 public void onExceededDatabaseQuota(String url, String databaseIdentifier, long currentQuota, long estimatedSize, long totalUsedQuota, WebStorage.QuotaUpdater quotaUpdater)　　　 {　　　　　　　 quotaUpdater.updateQuota(estimatedSize * 2);　　　 }}</code></pre><h3 id="浏览器自带缩放按钮取消显示"><a href="#浏览器自带缩放按钮取消显示" class="headerlink" title="浏览器自带缩放按钮取消显示"></a>浏览器自带缩放按钮取消显示</h3><pre><code>browser.getSettings().setBuiltInZoomControls(false);</code></pre><h2 id="几个比较好的实践"><a href="#几个比较好的实践" class="headerlink" title="几个比较好的实践"></a>几个比较好的实践</h2><p>使用localstorage缓存html</p><p>使用lazyload，还要记得lazyload占位图虽然小，但是最好能提前加载到缓存</p><p>延时加载执行js</p><p>主要原因就在于Android Webview的onPageFinished事件，Android端一般是用这个事件来标识页面加载完成并显示的，也就是说在此之前，会一直loading，但是Android的OnPageFinished事件会在Javascript脚本执行完成之后才会触发。如果在页面中使用JQuery，会在处理完DOM对象，执行完$(document).ready(function() {});事件自会后才会渲染并显示页面。</p><h3 id="manifest与缓存相关"><a href="#manifest与缓存相关" class="headerlink" title="manifest与缓存相关:"></a>manifest与缓存相关:</h3><p><a href="http://www.alloyteam.com/2013/12/web-cache-6-hybrid-app-tailored-cache/" target="_blank" rel="noopener">http://www.alloyteam.com/2013/12/web-cache-6-hybrid-app-tailored-cache/</a><br>相关解决方案<br><a href="http://mt.tencent.com/" target="_blank" rel="noopener">http://mt.tencent.com/</a></p><h2 id="移动端调适篇"><a href="#移动端调适篇" class="headerlink" title="移动端调适篇"></a>移动端调适篇</h2><h3 id="手机抓包与配host"><a href="#手机抓包与配host" class="headerlink" title="手机抓包与配host"></a>手机抓包与配host</h3><p>在PC上，我们可以很方便地配host，但是手机上如何配host，这是一个问题。</p><p>这里主要使用fiddler和远程代理，实现手机配host的操作，具体操作如下：</p><p>首先，保证PC和移动设备在同一个局域网下；</p><p>PC上开启fiddler，并在设置中勾选“allow remote computers to connect”</p><ol><li><p>首先，保证PC和移动设备在同一个局域网下；</p></li><li><p>PC上开启fiddler，并在设置中勾选“allow remote computers to connect”<br><img src="https://github.com/hoosin/mobile-web-favorites/raw/master/img/01.png" alt="fiddler"></p></li><li><p>手机上设置代理，代理IP为PC的IP地址，端口为8888（这是fiddler的默认端口）。通常手机上可以直接设置代理，如果没有，可以去下载一个叫ProxyDroid的APP来实现代理的设置。</p></li><li><p>此时你会发现，用手机上网，走的其实是PC上的fiddler，所有的请求包都会在fiddler中列出来，配合willow使用，即可实现配host，甚至是反向代理的操作。</p></li></ol><p>也可以用CCProxy之类软件，还有一种方法就是买一个随身wifi，然后手机连接就可以了！</p><h3 id="高级抓包"><a href="#高级抓包" class="headerlink" title="高级抓包"></a>高级抓包</h3><p><a href="http://danqingdani.blog.163.com/blog/static/1860941952012112353515306/?suggestedreading&amp;wumii" title="iPhone上使用Burp Suite捕捉HTTPS通信包方法" target="_blank" rel="noopener">iPhone上使用Burp Suite捕捉HTTPS通信包方法</a></p><p><a href="http://danqingdani.blog.163.com/blog/static/1860941952012101331848980/" title="mobile app 通信分析方法小议（iOS/Android)" target="_blank" rel="noopener">mobile app 通信分析方法小议（iOS/Android)</a></p><p><a href="http://danqingdani.blog.163.com/blog/static/1860941952012111954741585/" title="实时抓取移动设备上的通信包(ADVsock2pipe+Wireshark+nc+tcpdump)" target="_blank" rel="noopener">实时抓取移动设备上的通信包(ADVsock2pipe+Wireshark+nc+tcpdump)</a></p><h3 id="静态资源缓存问题"><a href="#静态资源缓存问题" class="headerlink" title="静态资源缓存问题"></a>静态资源缓存问题</h3><p>一般用代理软件代理过来的静态资源可以设置nocache避免缓存，但是有的手机比较诡异，会一直缓存住css等资源文件。由于静态资源一般都是用版本号管理的，我们以charles为例子来处理这个问题</p><p>charles 选择静态的html页面文件-saveResponse。之后把这个文件保存一下，修改一下版本号。之后继续发请求，<br>刚才的html页面文件 右键选择 –map local 选择我们修改过版本号的html文件即ok。这其实也是fiddler远程映射并修改文件的一个应用场景。</p><h3 id="安卓模拟器和真机区别"><a href="#安卓模拟器和真机区别" class="headerlink" title="安卓模拟器和真机区别"></a>安卓模拟器和真机区别</h3><p><a href="http://www.farsight.com.cn/news/emb105.htm" target="_blank" rel="noopener">http://www.farsight.com.cn/news/emb105.htm</a></p><p><a href="http://testerhome.com/topics/388" target="_blank" rel="noopener">http://testerhome.com/topics/388</a></p><p><a href="http://www.cnblogs.com/zdz8207/archive/2012/01/30/2332436.html" target="_blank" rel="noopener">http://www.cnblogs.com/zdz8207/archive/2012/01/30/2332436.html</a></p><h2 id="移动浏览器篇"><a href="#移动浏览器篇" class="headerlink" title="移动浏览器篇"></a>移动浏览器篇</h2><h3 id="微信浏览器"><a href="#微信浏览器" class="headerlink" title="微信浏览器"></a>微信浏览器</h3><p>微信浏览器的调试技巧<a href="http://www.html-js.com/article/WeChat-cock-burst-perfect-debugging-WeChat-WebView-x5%203076" target="_blank" rel="noopener">http://www.html-js.com/article/WeChat-cock-burst-perfect-debugging-WeChat-WebView-x5%203076</a></p><p>微信浏览器的各种bug汇总 （x5内核） <a href="http://www.qianduan.net/qqliu-lan-qi-x5nei-he-wen-ti-hui-zong/" target="_blank" rel="noopener">http://www.qianduan.net/qqliu-lan-qi-x5nei-he-wen-ti-hui-zong/</a></p><p>因为微信浏览器屏蔽了一部分链接图片，所以需要引导用户去打开新页面，可以用以下方式判断微信浏览器的ua</p><pre><code>function is_weixn(){    var ua = navigator.userAgent.toLowerCase();    if(ua.match(/MicroMessenger/i)==&quot;micromessenger&quot;) {        return true;    } else {        return false;    }}</code></pre><p>后端判断也很简单，比如php</p><pre><code>function is_weixin(){    if ( strpos($_SERVER[&apos;HTTP_USER_AGENT&apos;], &apos;MicroMessenger&apos;) !== false ) {            return true;    }      return false;}</code></pre><p><a href="https://github.com/maxzhang/maxzhang.github.com/issues/31" target="_blank" rel="noopener">https://github.com/maxzhang/maxzhang.github.com/issues/31</a> 微信浏览器踩坑，来自maxZhang <a href="https://github.com/maxzhang" target="_blank" rel="noopener">https://github.com/maxzhang</a></p><p>###【UC浏览器】video标签脱离文档流</p><p>场景：<video>标签的父元素(祖辈元素)设置transform样式后，<video>标签会脱离文档流。</video></video></p><p>测试环境：UC浏览器 8.7/8.6 + Android 2.3/4.0 。</p><p>Demo：<a href="http://t.cn/zj3xiyu" target="_blank" rel="noopener">http://t.cn/zj3xiyu</a></p><p>解决方案：不使用transform属性。translate用top、margin等属性替代。</p><p>###【UC浏览器】video标签总在最前</p><p>场景：<video>标签总是在最前（可以理解为video标签的z-index属性是Max）。</video></p><p>测试环境：UC浏览器 8.7/8.6 + Android 2.3/4.0 。</p><p>###【UC浏览器】position:fixed 属性在UC浏览器的奇葩现象</p><p>场景：设置了position: fixed 的元素会遮挡z-index值更高的同辈元素。</p><p>　　　在8.6的版本,这个情况直接出现。</p><p>　　　在8.7之后的版本,当同辈元素的height大于713这个「神奇」的数值时,才会被遮挡。</p><p>测试环境：UC浏览器 8.8_beta/8.7/8.6 + Android 2.3/4.0 。</p><p>Demo：<a href="http://t.cn/zYLTSg6" target="_blank" rel="noopener">http://t.cn/zYLTSg6</a></p><p>###【UC浏览器】rem 不能正确计算的问题</p><p>场景：使用以下代码，横竖屏操作后，rem并没有被重新计算，一开始以为是页面没有重绘，强制重绘页面后，发现问题并没有解决。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> docEl = doc.documentElement,</span><br><span class="line">        resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</span><br><span class="line">        recalc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> clientWidth = docEl.clientWidth;</span><br><span class="line">            <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">            docEl.style.fontSize = <span class="number">100</span> * (clientWidth / <span class="number">320</span>) + <span class="string">'px'</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    recalc();</span><br><span class="line">    <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</span><br><span class="line">    win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</span><br><span class="line">    doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><p>测试环境：UC浏览器 V10.9 + Android 6.0+ 。</p><p>解决方案：手动在head中插入style，给html设置font-size,并使用 !important 增加优先级，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> docEl = doc.documentElement,</span><br><span class="line">        resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</span><br><span class="line">        recalc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> clientWidth = docEl.clientWidth;</span><br><span class="line">            <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">var</span> style;</span><br><span class="line">            <span class="keyword">if</span>(style=<span class="built_in">document</span>.getElementById(<span class="string">"hackUcRem"</span>))&#123;</span><br><span class="line">                style.parentNode.removeChild(style);</span><br><span class="line">            &#125;</span><br><span class="line">            style = <span class="built_in">document</span>.createElement(<span class="string">"style"</span>);</span><br><span class="line">            style.id=<span class="string">"hackUcRem"</span>;</span><br><span class="line">            <span class="built_in">document</span>.head.appendChild(style);</span><br><span class="line">            style.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"html&#123;font-size:"</span> + <span class="number">100</span> * (clientWidth / <span class="number">320</span>) + <span class="string">"px !important;&#125;"</span>));</span><br><span class="line">            docEl.style.fontSize = <span class="number">100</span> * (clientWidth / <span class="number">320</span>) + <span class="string">'px'</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    recalc();</span><br><span class="line">    <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</span><br><span class="line">    win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</span><br><span class="line">    doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure></p><p>###【QQ手机浏览器】不支持HttpOnly</p><p>场景：带有HttpOnly属性的Cookie，在QQ手机浏览器版本从4.0开始失效。JavaScript可以直接读取设置了HttpOnly的Cookie值。</p><p>测试环境：QQ手机浏览器 4.0/4.1/4.2 + Android 4.0 。</p><p>###【MIUI原生浏览器】浏览器地址栏hash不改变</p><p>场景：location.hash 被赋值后，地址栏的地址不会改变。</p><p>　　　但实际上 location.href 已经更新了，通过JavaScript可以顺利获取到更新后的地址。</p><p>　　　虽然不影响正常访问，但用户无法将访问过程中改变hash后的地址存为书签。</p><p>测试环境：MIUI 4.0</p><p>###【Chrome Mobile】fixed元素无法点击</p><p> 场景：父元素设置position: fixed;</p><p>　　　子元素设置position: absolute;</p><p>　　　此时，如果父元素/子元素还设置了overflow: hidden 则出现“父元素遮挡该子元素“的bug。</p><p>　　　视觉(view)层并没有出现遮挡，只是无法触发绑定在该子元素上的事件。可理解为：「看到点不到」。</p><p>补充： 页面往下滚动，触发position: fixed;的特性时，才会出现这个bug，在最顶不会出现。</p><p>测试平台： 小米1S，Android4.0的Chrome18</p><p>demo： <a href="http://maplejan.sinaapp.com/demo/fixed_chromemobile.html" target="_blank" rel="noopener">http://maplejan.sinaapp.com/demo/fixed_chromemobile.html</a></p><p>解决办法： 把父元素和子元素的overflow: hidden去掉。</p><p>以上来源于  <a href="http://www.cnblogs.com/maplejan/archive/2013/04/26/3045928.html" target="_blank" rel="noopener">http://www.cnblogs.com/maplejan/archive/2013/04/26/3045928.html</a></p><h2 id="库的使用实践"><a href="#库的使用实践" class="headerlink" title="库的使用实践"></a>库的使用实践</h2><h3 id="zepto-js"><a href="#zepto-js" class="headerlink" title="zepto.js"></a>zepto.js</h3><p> <a href="http://chaoskeh.com/blog/some-experience-of-using-zepto.html" title="zepto" target="_blank" rel="noopener">zepto的一篇使用注意点讲解</a></p><p> <a href="http://blog.youyo.name/archives/zepto-tap-click-through-research.html" title="zepto" target="_blank" rel="noopener">zepto的著名的tap“点透”bug</a></p><p> <a href="http://www.cnblogs.com/sky000/archive/2013/03/29/2988952.html" title="zepto" target="_blank" rel="noopener">zepto源码注释</a></p><h3 id="使用zeptojs内嵌到android-webview影响正常滚动时"><a href="#使用zeptojs内嵌到android-webview影响正常滚动时" class="headerlink" title="使用zeptojs内嵌到android webview影响正常滚动时"></a>使用zeptojs内嵌到android webview影响正常滚动时</h3><p><a href="https://github.com/madrobby/zepto/blob/master/src/touch.js" target="_blank" rel="noopener">https://github.com/madrobby/zepto/blob/master/src/touch.js</a> 去掉61行,其实就是使用原生的滚动</p><h3 id="iscroll4"><a href="#iscroll4" class="headerlink" title="iscroll4"></a>iscroll4</h3><p> iscroll4 的几个bug(来自 <a href="http://www.mansonchor.com/blog/blog_detail_64.html" target="_blank" rel="noopener">http://www.mansonchor.com/blog/blog_detail_64.html</a> 内有详细讲解)</p><p>1.滚动容器点击input框、select等表单元素时没有响应】</p><pre><code>onBeforeScrollStart: function (e) { e.preventDefault(); }</code></pre><p>改为</p><pre><code>onBeforeScrollStart: function (e) { var nodeType = e.explicitOriginalTarget © e.explicitOriginalTarget.nodeName.toLowerCase():(e.target © e.target.nodeName.toLowerCase():&apos;&apos;);if(nodeType !=&apos;select&apos;&amp;&amp; nodeType !=&apos;option&apos;&amp;&amp; nodeType !=&apos;input&apos;&amp;&amp; nodeType!=&apos;textarea&apos;) e.preventDefault(); }</code></pre><p>2.往iscroll容器内添加内容时，容器闪动的bug</p><p>源代码的</p><pre><code>has3d = &apos;WebKitCSSMatrix&apos; in window &amp;&amp; &apos;m11&apos; in new WebKitCSSMatrix()</code></pre><p>改成</p><pre><code>has3d = false</code></pre><p>在配置iscroll时，useTransition设置成false</p><p>3.过长的滚动内容，导致卡顿和app直接闪退</p><ol><li>不要使用checkDOMChanges。虽然checkDOMChanges很方便，定时检测容器长度是否变化来refresh，但这也意味着你要消耗一个Interval的内存空间</li><li>隐藏iscroll滚动条，配置时设置hScrollbar和vScrollbar为false。</li><li>不得已的情况下，去掉各种效果，momentum、useTransform、useTransition都设置为false</li></ol><p>4.左右滚动时，不能正确响应正文上下拉动</p><p>iscroll的闪动问题也与渲染有关系，可以参考<br> <a href="http://www.iunbug.com/archives/2012/09/19/411.html" title="iscroll4" target="_blank" rel="noopener">运用webkit绘制渲染页面原理解决iscroll4闪动的问题</a><br><a href="http://blog.csdn.net/gcz564539969/article/details/9156141" title="iscroll5" target="_blank" rel="noopener">iscroll4升级到5要注意的问题</a></p><h3 id="iscroll或者滚动类框架滚动时不点击的方法"><a href="#iscroll或者滚动类框架滚动时不点击的方法" class="headerlink" title="iscroll或者滚动类框架滚动时不点击的方法"></a>iscroll或者滚动类框架滚动时不点击的方法</h3><p>可以使用以下的解决方案(利用data-setapi)</p><pre><code>&lt;a ontouchmove=&quot;this.s=1&quot; ontouchend=&quot;this.s || window.open(this.dataset.href),this.s=0&quot; target=&quot;_blank&quot; data-href=&quot;http://www.hao123.com/topic/pig&quot;&gt;黄浦江死猪之谜&lt;/a&gt;</code></pre><p>也可以用这种方法</p><pre><code>$(document).delegate(&apos;[data-target]&apos;, &apos;touchmove&apos;, function () {    $(this).attr(&apos;moving&apos;,&apos;moving&apos;);})$(document).delegate(&apos;[data-target]&apos;, &apos;touchend&apos;, function () {    if ($(this).attr(&apos;moving&apos;) !== &apos;moving&apos;) {     //做你想做的。。        $(this).attr(&apos;moving&apos;, &apos;notMoving&apos;);    } else {        $(this).attr(&apos;moving&apos;, &apos;notMoving&apos;);    }})</code></pre><h2 id="移动端字体问题"><a href="#移动端字体问题" class="headerlink" title="移动端字体问题"></a>移动端字体问题</h2><p><a href="http://zhuanlan.zhihu.com/zhezhexiong/19565895" target="_blank" rel="noopener">知乎专栏 - [无线手册-4] dp、sp、px傻傻分不清楚[完整]</a></p><p><a href="http://www.sencha.com/blog/resolution-independent-mobile-ui" target="_blank" rel="noopener">Resolution Independent Mobile UI</a></p><p><a href="http://stackoverflow.com/questions/12058574/pixel-density-retina-display-and-font-size-in-css" target="_blank" rel="noopener">Pixel density, retina display and font-size in CSS</a></p><p><a href="http://bjango.com/articles/min-device-pixel-ratio/" target="_blank" rel="noopener">Device pixel density tests</a></p><h2 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h2><p>手机浏览器也是浏览器，在ajax调用外部api的时候也存在跨域问题。当然利用 PhoneGap 打包后，由于协议不一样就不存在跨域问题了。<br>但页面通常是需要跟后端进行调试的。一般会报类似</p><pre><code>XMLHttpRequest cannot load XXXOrigin null is not allowed by Access-Control-Allow-Origin.</code></pre><p>以及</p><pre><code>XMLHttpRequest cannot load http://. Request header field Content-Type is not allowed by Access-Control-Allow-Headers.&quot;</code></pre><p>这时候可以让后端加上两个http头</p><pre><code>Access-Control-Allow-Origin &quot;*&quot;Access-Control-Allow-Headers &quot;Origin, X-Requested-With, Content-Type, Accept&quot;</code></pre><p>第一个头可以避免跨域问题，第二个头可以方便ajax请求设置content-type等配置项</p><p>这个会存在一些安全问题，可以参考这个问题的讨论 <a href="http://www.zhihu.com/question/22992229" target="_blank" rel="noopener">http://www.zhihu.com/question/22992229</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;移动端统计-from-BiosSun&quot;&gt;&lt;a href=&quot;#移动端统计-from-BiosSun&quot; class=&quot;headerlink&quot; title=&quot;移动端统计 (from BiosSun)&quot;&gt;&lt;/a&gt;移动端统计 (from BiosSun)&lt;/h2&gt;&lt;p&gt; 可
      
    
    </summary>
    
      <category term="前端规范" scheme="https://syhyz1990.github.io/categories/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS初始化样式</title>
    <link href="https://syhyz1990.github.io/wiki/css-reset.html"/>
    <id>https://syhyz1990.github.io/wiki/css-reset.html</id>
    <published>2017-12-09T06:05:33.000Z</published>
    <updated>2018-06-05T08:22:01.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*! normalize.css v8.0.0 | MIT License | github.com/necolas/normalize.css */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Document</span></span><br><span class="line"><span class="comment">   ========================================================================== */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. Correct the line height in all browsers.</span></span><br><span class="line"><span class="comment"> * 2. Prevent adjustments of font size after orientation changes in iOS.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.15</span>; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">-webkit-text-size-adjust</span>: <span class="number">100%</span>; <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Sections</span></span><br><span class="line"><span class="comment">   ========================================================================== */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Remove the margin in all browsers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Correct the font size and margin on `h1` elements within `section` and</span></span><br><span class="line"><span class="comment"> * `article` contexts in Chrome, Firefox, and Safari.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0.67em</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Grouping content</span></span><br><span class="line"><span class="comment">   ========================================================================== */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. Add the correct box sizing in Firefox.</span></span><br><span class="line"><span class="comment"> * 2. Show the overflow in Edge and IE.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">hr</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: content-box; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">overflow</span>: visible; <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. Correct the inheritance and scaling of font size in all browsers.</span></span><br><span class="line"><span class="comment"> * 2. Correct the odd `em` font sizing in all browsers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">pre</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: monospace, monospace; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1em</span>; <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Text-level semantics</span></span><br><span class="line"><span class="comment">   ========================================================================== */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Remove the gray background on active links in IE 10.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. Remove the bottom border in Chrome 57-</span></span><br><span class="line"><span class="comment"> * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">abbr</span><span class="selector-attr">[title]</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">text-decoration</span>: underline; <span class="comment">/* 2 */</span></span><br><span class="line">  <span class="attribute">text-decoration</span>: underline dotted; <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Add the correct font weight in Chrome, Edge, and Safari.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">b</span>,</span><br><span class="line"><span class="selector-tag">strong</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. Correct the inheritance and scaling of font size in all browsers.</span></span><br><span class="line"><span class="comment"> * 2. Correct the odd `em` font sizing in all browsers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">kbd</span>,</span><br><span class="line"><span class="selector-tag">samp</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: monospace, monospace; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1em</span>; <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Add the correct font size in all browsers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">small</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">80%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Prevent `sub` and `sup` elements from affecting the line height in</span></span><br><span class="line"><span class="comment"> * all browsers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sub</span>,</span><br><span class="line"><span class="selector-tag">sup</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">75%</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sub</span> &#123;</span><br><span class="line">  <span class="attribute">bottom</span>: -<span class="number">0.25em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">sup</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">0.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Embedded content</span></span><br><span class="line"><span class="comment">   ========================================================================== */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Remove the border on images inside links in IE 10.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">border-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Forms</span></span><br><span class="line"><span class="comment">   ========================================================================== */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. Change the font styles in all browsers.</span></span><br><span class="line"><span class="comment"> * 2. Remove the margin in Firefox and Safari.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">optgroup</span>,</span><br><span class="line"><span class="selector-tag">select</span>,</span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: inherit; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100%</span>; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.15</span>; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>; <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Show the overflow in IE.</span></span><br><span class="line"><span class="comment"> * 1. Show the overflow in Edge.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">input</span> &#123; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">overflow</span>: visible;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Remove the inheritance of text transform in Edge, Firefox, and IE.</span></span><br><span class="line"><span class="comment"> * 1. Remove the inheritance of text transform in Firefox.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">select</span> &#123; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">text-transform</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Correct the inability to style clickable types in iOS and Safari.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-attr">[type="button"]</span>,</span><br><span class="line"><span class="selector-attr">[type="reset"]</span>,</span><br><span class="line"><span class="selector-attr">[type="submit"]</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: button;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Remove the inner border and padding in Firefox.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">::-moz-focus-inner</span>,</span><br><span class="line"><span class="selector-attr">[type="button"]</span><span class="selector-pseudo">::-moz-focus-inner</span>,</span><br><span class="line"><span class="selector-attr">[type="reset"]</span><span class="selector-pseudo">::-moz-focus-inner</span>,</span><br><span class="line"><span class="selector-attr">[type="submit"]</span><span class="selector-pseudo">::-moz-focus-inner</span> &#123;</span><br><span class="line">  <span class="attribute">border-style</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Restore the focus styles unset by the previous rule.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">:-moz-focusring</span>,</span><br><span class="line"><span class="selector-attr">[type="button"]</span><span class="selector-pseudo">:-moz-focusring</span>,</span><br><span class="line"><span class="selector-attr">[type="reset"]</span><span class="selector-pseudo">:-moz-focusring</span>,</span><br><span class="line"><span class="selector-attr">[type="submit"]</span><span class="selector-pseudo">:-moz-focusring</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">1px</span> dotted ButtonText;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Correct the padding in Firefox.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">fieldset</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.35em</span> <span class="number">0.75em</span> <span class="number">0.625em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. Correct the text wrapping in Edge and IE.</span></span><br><span class="line"><span class="comment"> * 2. Correct the color inheritance from `fieldset` elements in IE.</span></span><br><span class="line"><span class="comment"> * 3. Remove the padding so developers are not caught out when they zero out</span></span><br><span class="line"><span class="comment"> *    `fieldset` elements in all browsers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">legend</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">color</span>: inherit; <span class="comment">/* 2 */</span></span><br><span class="line">  <span class="attribute">display</span>: table; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>; <span class="comment">/* 3 */</span></span><br><span class="line">  <span class="attribute">white-space</span>: normal; <span class="comment">/* 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Add the correct vertical alignment in Chrome, Firefox, and Opera.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">progress</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Remove the default vertical scrollbar in IE 10+.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. Add the correct box sizing in IE 10.</span></span><br><span class="line"><span class="comment"> * 2. Remove the padding in IE 10.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[type="checkbox"]</span>,</span><br><span class="line"><span class="selector-attr">[type="radio"]</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>; <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Correct the cursor style of increment and decrement buttons in Chrome.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[type="number"]</span><span class="selector-pseudo">::-webkit-inner-spin-button</span>,</span><br><span class="line"><span class="selector-attr">[type="number"]</span><span class="selector-pseudo">::-webkit-outer-spin-button</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. Correct the odd appearance in Chrome and Safari.</span></span><br><span class="line"><span class="comment"> * 2. Correct the outline style in Safari.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[type="search"]</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: textfield; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">outline-offset</span>: -<span class="number">2px</span>; <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Remove the inner padding in Chrome and Safari on macOS.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[type="search"]</span><span class="selector-pseudo">::-webkit-search-decoration</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. Correct the inability to style clickable types in iOS and Safari.</span></span><br><span class="line"><span class="comment"> * 2. Change font properties to `inherit` in Safari.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-pseudo">::-webkit-file-upload-button</span> &#123;</span><br><span class="line">  <span class="attribute">-webkit-appearance</span>: button; <span class="comment">/* 1 */</span></span><br><span class="line">  <span class="attribute">font</span>: inherit; <span class="comment">/* 2 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Interactive</span></span><br><span class="line"><span class="comment">   ========================================================================== */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Add the correct display in Edge, IE 10+, and Firefox.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">details</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Add the correct display in all browsers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">summary</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: list-item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Misc</span></span><br><span class="line"><span class="comment">   ========================================================================== */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Add the correct display in IE 10+.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">template</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Add the correct display in IE 10.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[hidden]</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span>, <span class="selector-tag">div</span>, <span class="selector-tag">span</span>, <span class="selector-tag">applet</span>, <span class="selector-tag">object</span>, <span class="selector-tag">iframe</span>,</span><br><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span>, <span class="selector-tag">blockquote</span>, <span class="selector-tag">pre</span>,</span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">abbr</span>, <span class="selector-tag">acronym</span>, <span class="selector-tag">address</span>, <span class="selector-tag">big</span>, <span class="selector-tag">cite</span>, <span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">del</span>, <span class="selector-tag">dfn</span>, <span class="selector-tag">em</span>, <span class="selector-tag">img</span>, <span class="selector-tag">ins</span>, <span class="selector-tag">kbd</span>, <span class="selector-tag">q</span>, <span class="selector-tag">s</span>, <span class="selector-tag">samp</span>,</span><br><span class="line"><span class="selector-tag">small</span>, <span class="selector-tag">strike</span>, <span class="selector-tag">strong</span>, <span class="selector-tag">sub</span>, <span class="selector-tag">sup</span>, <span class="selector-tag">tt</span>, <span class="selector-tag">var</span>,</span><br><span class="line"><span class="selector-tag">b</span>, <span class="selector-tag">u</span>, <span class="selector-tag">i</span>, <span class="selector-tag">center</span>,</span><br><span class="line"><span class="selector-tag">dl</span>, <span class="selector-tag">dt</span>, <span class="selector-tag">dd</span>, <span class="selector-tag">ol</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>, <span class="selector-tag">form</span>, <span class="selector-tag">label</span>, <span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">table</span>, <span class="selector-tag">caption</span>, <span class="selector-tag">tbody</span>, <span class="selector-tag">tfoot</span>, <span class="selector-tag">thead</span>, <span class="selector-tag">tr</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">canvas</span>, <span class="selector-tag">details</span>, <span class="selector-tag">embed</span>,</span><br><span class="line"><span class="selector-tag">figure</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">footer</span>, <span class="selector-tag">header</span>,</span><br><span class="line"><span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">output</span>, <span class="selector-tag">ruby</span>, <span class="selector-tag">section</span>, <span class="selector-tag">summary</span>,</span><br><span class="line"><span class="selector-tag">time</span>, <span class="selector-tag">mark</span>, <span class="selector-tag">audio</span>, <span class="selector-tag">video</span>, <span class="selector-tag">input</span></span><br><span class="line">  <span class="selector-tag">margin</span>: 0</span><br><span class="line">  <span class="selector-tag">padding</span>: 0</span><br><span class="line">  <span class="selector-tag">border</span>: 0</span><br><span class="line">  <span class="selector-tag">font-size</span>: 100%</span><br><span class="line">  <span class="selector-tag">font-weight</span>: <span class="selector-tag">normal</span></span><br><span class="line">  <span class="selector-tag">vertical-align</span>: <span class="selector-tag">baseline</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* HTML5 display-role reset for older browsers */</span></span><br><span class="line"><span class="selector-tag">article</span>, <span class="selector-tag">aside</span>, <span class="selector-tag">details</span>, <span class="selector-tag">figcaption</span>, <span class="selector-tag">figure</span>,</span><br><span class="line"><span class="selector-tag">footer</span>, <span class="selector-tag">header</span>, <span class="selector-tag">menu</span>, <span class="selector-tag">nav</span>, <span class="selector-tag">section</span></span><br><span class="line">  <span class="selector-tag">display</span>: <span class="selector-tag">block</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span></span><br><span class="line">  <span class="selector-tag">line-height</span>: 1</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">blockquote</span>, <span class="selector-tag">q</span></span><br><span class="line">  <span class="selector-tag">quotes</span>: <span class="selector-tag">none</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">blockquote</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">blockquote</span><span class="selector-pseudo">:after</span>,</span><br><span class="line"><span class="selector-tag">q</span><span class="selector-pseudo">:before</span>, <span class="selector-tag">q</span><span class="selector-pseudo">:after</span></span><br><span class="line">  <span class="selector-tag">content</span>: <span class="selector-tag">none</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span></span><br><span class="line">  <span class="selector-tag">border-collapse</span>: <span class="selector-tag">collapse</span></span><br><span class="line">  <span class="selector-tag">border-spacing</span>: 0</span><br><span class="line"></span><br><span class="line"><span class="comment">/* custom */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span></span><br><span class="line">  <span class="selector-tag">color</span>: <span class="selector-id">#7e8c8d</span></span><br><span class="line">  <span class="selector-tag">-webkit-backface-visibility</span>: <span class="selector-tag">hidden</span></span><br><span class="line">  <span class="selector-tag">text-decoration</span>: <span class="selector-tag">none</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span></span><br><span class="line">  <span class="selector-tag">list-style</span>: <span class="selector-tag">none</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span></span><br><span class="line">  <span class="selector-tag">-webkit-text-size-adjust</span>: <span class="selector-tag">none</span></span><br><span class="line">  <span class="selector-tag">-webkit-tap-highlight-color</span>: <span class="selector-tag">rgba</span>(0, 0, 0, 0)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PC端&quot;&gt;&lt;a href=&quot;#PC端&quot; class=&quot;headerlink&quot; title=&quot;PC端&quot;&gt;&lt;/a&gt;PC端&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
      <category term="代码片段" scheme="https://syhyz1990.github.io/categories/%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    
    
      <category term="CSS" scheme="https://syhyz1990.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>PHP类库</title>
    <link href="https://syhyz1990.github.io/wiki/php-class.html"/>
    <id>https://syhyz1990.github.io/wiki/php-class.html</id>
    <published>2017-06-20T09:20:03.000Z</published>
    <updated>2018-06-05T08:59:09.719Z</updated>
    
    <content type="html"><![CDATA[<p>收集整理一些常用的PHP类库, 资源以及技巧. 以便在工作中迅速的查找所需…</p><hr><ul><li>这个列表中的内容有来自 <a href="https://github.com/ziadoz/awesome-php" target="_blank" rel="noopener">awesome-php</a> 的翻译, 有来自开发者周刊以及个人的积累等.</li></ul><hr><h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><blockquote><p>PHP相关的有参考价值的社区,博客,网站,文章,书籍,视频等资源</p></blockquote><ul><li><p><strong>PHP网站(PHP Websites)</strong></p><ul><li><a href="http://www.phptherightway.com/" target="_blank" rel="noopener">PHP The Right Way</a> - 一个PHP实践的快速参考指导</li><li><a href="https://phpbestpractices.org/" target="_blank" rel="noopener">PHP Best Practices</a> - 一个PHP最佳实践</li><li><a href="https://github.com/jupeter/clean-code-php" target="_blank" rel="noopener">Clean Code PHP</a> - 一个PHP 编码标准</li><li><a href="http://www.phpweekly.com/archive.html" target="_blank" rel="noopener">PHP Weekly News</a> - 一个PHP 周刊</li><li><a href="http://securingphp.com/" target="_blank" rel="noopener">Securing PHP</a> - 有关PHP安全相关</li><li><a href="http://www.php-fig.org/" target="_blank" rel="noopener">PHP FIG</a> - PHP框架交互小组<ul><li><a href="https://psr.phphub.org" target="_blank" rel="noopener">PSR 中文翻译</a></li></ul></li><li><a href="http://www.phpschool.io/" target="_blank" rel="noopener">PHP School</a> - 一个开源的PHP学习资源</li><li><a href="http://phptrends.com/" target="_blank" rel="noopener">PHPTrends</a> - 一些快速发展的PHP类库检索</li><li><a href="https://ryancao.gitbooks.io/php-developer-prepares/content/" target="_blank" rel="noopener">PHP 开发者实践</a></li></ul></li><li><p><strong>推荐文章(Recommended Article)</strong></p><ul><li><p><a href="https://paragonie.com/blog/2017/12/2018-guide-building-secure-php-software" target="_blank" rel="noopener">The 2018 Guide to Building Secure PHP Software</a></p><ul><li>中文翻译: <a href="https://laravel-china.org/articles/7235/2018-php-application-security-design" target="_blank" rel="noopener">2018 PHP 应用程序安全设计指北</a></li></ul></li><li><p><a href="https://github.com/elarity/advanced-php" target="_blank" rel="noopener">advanced-php</a> - PHP多进程、socket等相关文章</p></li></ul></li><li><p><strong>其他网站(Other Websites)</strong></p><ul><li><a href="https://www.owasp.org/index.php/Main_Page" target="_blank" rel="noopener">The Open Web Application Security Project (OWASP)</a> - 一个开源软件安全社区</li><li><a href="https://websec.io/" target="_blank" rel="noopener">WebSec IO</a> - 一个web 安全社区</li><li><a href="http://semver.org/lang/zh-CN/" target="_blank" rel="noopener">Semantic Versioning</a> - 语义化版本</li><li><a href="https://www.atlassian.com/git/" target="_blank" rel="noopener">Atlassian Git Tutorials</a> - 一系列的Git教程</li><li><a href="https://serversforhackers.com/" target="_blank" rel="noopener">Servers for Hackers </a> - 有关服务器运维相关</li><li><a href="https://github.com/stanzhai/be-a-professional-programmer" target="_blank" rel="noopener">be-a-professional-programmer</a> - 成为专业程序员路上用到的各种优秀资料、神器及框架</li></ul></li><li><p><strong>PHP书籍(PHP Books)</strong></p><ul><li><a href="http://shop.oreilly.com/product/0636920033868.do" target="_blank" rel="noopener">Modern PHP</a> - 作者是<a href="http://www.phptherightway.com/" target="_blank" rel="noopener">PHP 之道</a>的发起人和<a href="http://www.slimframework.com/" target="_blank" rel="noopener">Slim框架</a>的作者<ul><li><a href="http://about.ac/books/modern-php/" target="_blank" rel="noopener">Modern PHP（中文版）</a></li></ul></li><li><a href="http://daylerees.com/php-pandas/" target="_blank" rel="noopener">PHP Pandas</a> </li><li><a href="https://github.com/devlinkcn/ppts_for_php2017" target="_blank" rel="noopener">ppts_for_php2017</a> - 2017 第三届PHP全球开发者大会PPT/Keynote</li><li><a href="https://github.com/mirahman/PHP-Data-Structure-and-Algorithms" target="_blank" rel="noopener">PHP-Data-Structure-and-Algorithms</a></li></ul></li><li><p><strong>其他书籍(Other Books)</strong></p><ul><li><a href="http://linuxcommand.org/" target="_blank" rel="noopener">The Linux Command Line</a> - Linux 命令行教程</li><li><a href="https://github.com/davideuler/architecture.of.internet-product" target="_blank" rel="noopener">architecture.of.internet-product</a> - 互联网公司技术架构</li><li><a href="https://github.com/xingshaocheng/architect-awesome" target="_blank" rel="noopener">architect-awesome</a> - 后端架构师技术图谱</li></ul></li></ul><hr><h2 id="依赖管理-Dependency-Management"><a href="#依赖管理-Dependency-Management" class="headerlink" title="依赖管理( Dependency Management )"></a>依赖管理( Dependency Management )</h2><blockquote><p>用于依赖管理的包和框架</p></blockquote><ul><li><a href="https://getcomposer.org/" target="_blank" rel="noopener">Composer</a> / <a href="https://packagist.org/" target="_blank" rel="noopener">Packagist</a> - 一个包和依赖管理器.</li><li><a href="https://github.com/composer/installers" target="_blank" rel="noopener">Composer Installers</a> - 一个多框架Composer库安装器</li><li><a href="https://github.com/FriendsOfPHP/pickle" target="_blank" rel="noopener">pickle</a> - PHP扩展安装器</li><li><a href="http://melody.sensiolabs.org/" target="_blank" rel="noopener">Melody</a> - A tool to build one file Composer scripts.</li></ul><h2 id="框架-Frameworks"><a href="#框架-Frameworks" class="headerlink" title="框架( Frameworks )"></a>框架( Frameworks )</h2><blockquote><p>Web开发框架</p></blockquote><ul><li><a href="http://symfony.com/" target="_blank" rel="noopener">Symfony2</a> - 由独立组件构成的框架(SP2)</li><li><a href="http://framework.zend.com/" target="_blank" rel="noopener">Zend Framework 2</a> - 同样是由独立组件构成的框架(ZF2)</li><li><a href="http://laravel.com/" target="_blank" rel="noopener">Laravel 5</a> - 简洁优雅的PHP Web开发框架(L5)</li><li><a href="http://auraphp.com/" target="_blank" rel="noopener">Aura PHP</a> - 独立组件的框架</li><li><a href="https://github.com/yiisoft/yii2/" target="_blank" rel="noopener">Yii2</a> - 用于开发大型Web应用的高性能PHP框架</li><li><a href="http://nette.org/" target="_blank" rel="noopener">Nette</a> - 同样是由独立组件构成的框架</li><li><a href="http://www.ppi.io/" target="_blank" rel="noopener">PPI Framework 2</a> - 一个交互性的框架</li><li><a href="http://cakephp.org/" target="_blank" rel="noopener">CakePHP</a> - 一个高效的应用开发框架(CP)</li><li><a href="http://phalconphp.com/en/" target="_blank" rel="noopener">Phalcon</a> - 一个作为C扩展的框架</li><li><a href="http://php.net/manual/zh/book.yaf.php" target="_blank" rel="noopener">Yaf</a> - 鸟哥的C扩展的框架<ul><li><a href="https://github.com/LinkedDestiny/swoole-yaf" target="_blank" rel="noopener">swoole-yaf</a> - 基于 Swoole 及 Yaf 的开发框架</li><li><a href="https://github.com/qieangel2013/yaf" target="_blank" rel="noopener">yaf</a> - 另一个基于 Swoole 及 Yaf 的开发框架</li></ul></li><li><a href="https://github.com/tmtbe/SwooleDistributed" target="_blank" rel="noopener">SwooleDistributed</a> - swoole 分布式全栈框架</li><li><a href="https://github.com/youzan/zan" target="_blank" rel="noopener">Zan PHP Framework</a> - 有赞开源的 PHP 框架</li><li><a href="https://github.com/pinguo/php-msf" target="_blank" rel="noopener">php-msf</a> - Camera360开源的微服务框架</li><li><a href="https://github.com/Tencent/Biny" target="_blank" rel="noopener">Biny</a> - Biny是一款高性能的超轻量级PHP框架</li><li><a href="https://github.com/swoft-cloud/swoft/" target="_blank" rel="noopener">Swoft Framework</a> - 基于Swoole原生协程，新时代PHP高性能协程框架</li></ul><h2 id="组件-Components"><a href="#组件-Components" class="headerlink" title="组件( Components )"></a>组件( Components )</h2><ul><li><a href="http://auraphp.com/" target="_blank" rel="noopener">Aura Components</a> - 一个PHP5.4的组件包</li><li><a href="http://hoa-project.net/En/" target="_blank" rel="noopener">Hoa Project</a> - 一个PHP组件集合</li></ul><h2 id="配置-Configuration"><a href="#配置-Configuration" class="headerlink" title="配置( Configuration )"></a>配置( Configuration )</h2><blockquote><p>加载配置文件的类库和扩展</p></blockquote><ul><li><a href="https://github.com/laruence/yaconf" target="_blank" rel="noopener">Yaconf</a> - 一个高性能的配置管理扩展</li><li><a href="https://github.com/hassankhan/config" target="_blank" rel="noopener">config</a> - 一个轻量级的配置加载器, 支持 PHP, INI, XML, JSON, YAML files</li><li><a href="https://github.com/zendframework/zend-config" target="_blank" rel="noopener">Zend-config</a></li><li><a href="https://github.com/vlucas/phpdotenv" target="_blank" rel="noopener">phpdotenv</a> - 读取.env中全局的最高优先级变量</li></ul><h2 id="微框架-Micro-Frameworks"><a href="#微框架-Micro-Frameworks" class="headerlink" title="微框架( Micro Frameworks )"></a>微框架( Micro Frameworks )</h2><blockquote><p>微型框架和路由</p></blockquote><ul><li><a href="http://silex.sensiolabs.org/" target="_blank" rel="noopener">Silex</a> - 基于Symphony2组件的微型框架<ul><li><a href="https://github.com/fabpot/Silex-Skeleton" target="_blank" rel="noopener">Silex Skeleton</a> - 用于Silex的项目框架</li><li><a href="https://github.com/silexphp/Silex-WebProfiler" target="_blank" rel="noopener">Silex Web Profiler</a> - 用于Silex的Web调试工具条</li></ul></li><li><a href="http://www.slimframework.com/" target="_blank" rel="noopener">Slim</a> - 另一个简单的微型框架<ul><li><a href="https://github.com/xssc/awesome-slim" target="_blank" rel="noopener">awesome-slim</a></li><li><a href="https://github.com/codeguy/Slim-Skeleton" target="_blank" rel="noopener">Slim Skeleton</a> - 用于Slim的框架</li><li><a href="https://github.com/codeguy/Slim-Views" target="_blank" rel="noopener">Slim View</a> - Slim的自定义视图集</li><li><a href="https://github.com/codeguy/Slim-Middleware" target="_blank" rel="noopener">Slim Middleware</a> - Slim的自定义中间件集合</li><li><a href="https://github.com/JingwenTian/slim-skeleton" target="_blank" rel="noopener">slim-skeleton</a> - Slim基础上实现了MVC及一些组件</li><li><a href="https://github.com/damianopetrungaro/slim-boilerplate" target="_blank" rel="noopener">slim-boilerplate</a></li></ul></li><li><a href="http://bulletphp.com/" target="_blank" rel="noopener">Bullet PHP</a> - 用于构建REST APIs的微型框架</li><li><a href="http://lumen.laravel.com/" target="_blank" rel="noopener">Lumen</a> - 基于Laravel的微型框架</li><li><a href="https://github.com/alexbilbie/Proton" target="_blank" rel="noopener">Proton</a> - 一个微型PHP框架</li><li><a href="https://github.com/bixuehujin/blink" target="_blank" rel="noopener">blink</a> - 一个为构建 “long running” 服务而生的 Web 微型高性能框架</li></ul><h2 id="路由-Routers"><a href="#路由-Routers" class="headerlink" title="路由( Routers )"></a>路由( Routers )</h2><ul><li><a href="https://github.com/nikic/FastRoute" target="_blank" rel="noopener">Fast Route</a> - 一个高效路由库</li><li><a href="https://github.com/thephpleague/route" target="_blank" rel="noopener">Route</a> - 基于Fast Route的路由库</li><li><a href="https://github.com/c9s/Pux" target="_blank" rel="noopener">Pux</a> - 另一个高效的路由库</li><li><a href="https://github.com/chriso/klein.php" target="_blank" rel="noopener">Klein</a> - 一个灵活的路由库</li><li><a href="https://github.com/NoahBuscher/Macaw" target="_blank" rel="noopener">Macaw</a> - 一个简单的 PHP 路由器，超级精简、快速而且很性感。</li></ul><h2 id="模板引擎-Templating"><a href="#模板引擎-Templating" class="headerlink" title="模板引擎( Templating )"></a>模板引擎( Templating )</h2><blockquote><p>模板和词法分析的库与工具</p></blockquote><ul><li><a href="http://twig.sensiolabs.org/" target="_blank" rel="noopener">Twig</a> - 一种综合的模板语言</li><li><a href="https://github.com/asm89/twig-cache-extension" target="_blank" rel="noopener">Twig Cache Extension</a> - 用于Twig的模板片段缓存库</li><li><a href="https://github.com/bobthecow/mustache.php" target="_blank" rel="noopener">Mustache</a> - PHP实现的Mustache模板语言</li><li><a href="https://github.com/weierophinney/phly_mustache" target="_blank" rel="noopener">Phly Mustache</a> - 另一个PHP实现的Mustache模板语言</li><li><a href="https://github.com/arnaud-lb/MtHaml" target="_blank" rel="noopener">MtHaml</a> - PHP实现的HAML模板语言</li><li><a href="http://phptal.org/" target="_blank" rel="noopener">PHPTAL</a> - PHP实现的TAL模板语言</li><li><a href="http://platesphp.com/" target="_blank" rel="noopener">Plates</a> - 一个原始的PHP模板库</li><li><a href="https://github.com/pyrocms/lex" target="_blank" rel="noopener">Lex</a> - 一个轻量级模板解析器</li><li><a href="https://github.com/auraphp/Aura.View" target="_blank" rel="noopener">Aura.View</a> - Provides TemplateView and TwoStepView</li></ul><h2 id="静态站生成器-Static-Site-Generators"><a href="#静态站生成器-Static-Site-Generators" class="headerlink" title="静态站生成器( Static Site Generators )"></a>静态站生成器( Static Site Generators )</h2><blockquote><p>生成Web页面内容的预处理工具</p></blockquote><ul><li><a href="http://sculpin.io/" target="_blank" rel="noopener">Sculpin</a> - 将Markdown和Twig转换为静态HTML的工具</li><li><a href="http://phrozn.info/" target="_blank" rel="noopener">Phrozn</a> - 另一款ithub将Textile、Markdown和Twig转为HTML的工具</li><li><a href="http://spress.yosymfony.com/" target="_blank" rel="noopener">Spress</a> </li><li><a href="http://couscous.io/" target="_blank" rel="noopener">Couscous</a> - 将Markdown 文档转换成 HTML 发布到Github Page 的工具</li></ul><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><blockquote><p>用于HTTP和抓取网站的库</p></blockquote><ul><li><a href="https://github.com/guzzle/guzzle" target="_blank" rel="noopener">Guzzle</a> - 一个完整的HTTP客户端</li><li><a href="https://github.com/kriswallsmith/Buzz" target="_blank" rel="noopener">Buzz</a> - 另一个HTTP客户端</li><li><a href="https://github.com/rmccue/Requests" target="_blank" rel="noopener">Requests</a> - 一个简单的HTTP库</li><li><a href="https://github.com/nategood/httpful" target="_blank" rel="noopener">HTTPFul</a> - 一个链式HTTP客户端</li><li><a href="https://github.com/fabpot/Goutte" target="_blank" rel="noopener">Goutte</a> - 一个简单的Web抓取器</li><li><a href="http://php-vcr.github.io/" target="_blank" rel="noopener">PHP VCR</a> - 一个录制和回放HTTP请求的库</li><li><a href="https://github.com/php-curl-class/php-curl-class" target="_blank" rel="noopener">php-curl-class</a> - PHP的Curl类</li><li><a href="https://github.com/kiddyuchina/Beanbun" target="_blank" rel="noopener">Beanbun</a> - 多进程网络爬虫框架</li><li><a href="https://github.com/php-mod/curl" target="_blank" rel="noopener">php-mod/curl</a> - PHP Curl Class</li></ul><h2 id="SOAP"><a href="#SOAP" class="headerlink" title="SOAP"></a>SOAP</h2><ul><li><a href="https://github.com/phpro/soap-client" target="_blank" rel="noopener">soap-client</a> - A general purpose SOAP client for PHP</li><li><a href="https://github.com/goetas-webservices/soap-client" target="_blank" rel="noopener">soap-client</a> - PHP implementation of SOAP 1.1 and 1.2 client specifications</li><li><a href="https://github.com/wsdl2phpgenerator/wsdl2phpgenerator" target="_blank" rel="noopener">wsdl2phpgenerator</a> - Simple utility and class library for generating php classes from a wsdl file.</li></ul><h2 id="中间件-Middlewares"><a href="#中间件-Middlewares" class="headerlink" title="中间件( Middlewares )"></a>中间件( Middlewares )</h2><blockquote><p>用于构建应用的类库的中间件</p></blockquote><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><blockquote><p>解析URL的库</p></blockquote><ul><li><a href="https://github.com/jwage/purl" target="_blank" rel="noopener">Purl</a> - 一个URL操作库</li><li><a href="https://github.com/jeremykendall/php-domain-parser" target="_blank" rel="noopener">PHP Domain Parser</a> - 一个本地的后缀解析器</li><li><a href="https://github.com/thephpleague/uri" target="_blank" rel="noopener">Uri</a> - 一个简单的URL操作库</li></ul><h2 id="邮件-Email"><a href="#邮件-Email" class="headerlink" title="邮件( Email )"></a>邮件( Email )</h2><blockquote><p>用于发送和解析Email的库</p></blockquote><ul><li><a href="http://swiftmailer.org/" target="_blank" rel="noopener">SwiftMailer</a> - 一个邮件程序的解决方案</li><li><a href="https://github.com/PHPMailer/PHPMailer" target="_blank" rel="noopener">PHPMailer</a> - 另一个邮件程序的解决方案</li><li><a href="https://github.com/nette/mail" target="_blank" rel="noopener">Nette Mail</a> - 一个简单优雅的邮件发送模块</li><li><a href="https://github.com/tedivm/Fetch" target="_blank" rel="noopener">Fetch</a> - 一个IMAP库</li><li><a href="https://github.com/willdurand/EmailReplyParser" target="_blank" rel="noopener">Email Reply Parser</a> - 一个邮件回复解析器库</li><li><a href="https://github.com/henrikbjorn/Stampie" target="_blank" rel="noopener">Stampie</a> - 关于邮件服务的库，比如SendGrid、PostMark、MailGun和Mandrill</li><li><a href="https://github.com/tijsverkoyen/CssToInlineStyles" target="_blank" rel="noopener">CssToInlineStyles</a> - 邮件模板中一个内联的CSS库</li><li><a href="https://github.com/nojacko/email-validator" target="_blank" rel="noopener">Email Validator</a> - 一个小巧的邮箱验证库</li></ul><h2 id="文件操作-Files"><a href="#文件操作-Files" class="headerlink" title="文件操作( Files )"></a>文件操作( Files )</h2><blockquote><p>关于文件处理和MIME类型检查</p></blockquote><ul><li><a href="https://github.com/KnpLabs/Gaufrette" target="_blank" rel="noopener">Gaufrette</a> - 一个文件流的抽象层</li><li><a href="https://github.com/FrenkyNet/Flysystem" target="_blank" rel="noopener">Flysystem</a> - 另一个文件流的抽象层</li><li><a href="https://github.com/dflydev/dflydev-canal" target="_blank" rel="noopener">Canal</a> - 一个检查互联网媒体类型的库</li><li><a href="https://github.com/dflydev/dflydev-apache-mime-types" target="_blank" rel="noopener">Apache MIME Types</a> - 一个解析Apache MIME类型的库</li><li><a href="https://github.com/versionable/Ferret" target="_blank" rel="noopener">Ferret</a> - 一个MIME检测库</li><li><a href="https://github.com/hoaproject/Mime" target="_blank" rel="noopener">Hoa Mime</a> - 另一个MIME检测库</li><li><a href="https://github.com/henrikbjorn/Lurker" target="_blank" rel="noopener">Lurker</a> - 一个资源跟踪库</li><li><a href="https://github.com/herrera-io/php-file-locator" target="_blank" rel="noopener">PHP File Locator</a> - 一个在大型项目中定位文件的库</li><li><a href="https://github.com/alchemy-fr/PHP-FFmpeg/" target="_blank" rel="noopener">PHP FFmpeg</a> - 一个用于FFmpeg视频包装的库</li><li><a href="https://github.com/thephpleague/csv" target="_blank" rel="noopener">CSV</a> - 一个CSV数据操作库</li></ul><h2 id="流-Stream"><a href="#流-Stream" class="headerlink" title="流( Stream )"></a>流( Stream )</h2><blockquote><p>处理流的库</p></blockquote><ul><li><a href="https://github.com/fzaninotto/Streamer" target="_blank" rel="noopener">Streamer</a> - 一个简单的面向对象流包装库</li></ul><h2 id="依赖注入-Dependency-Injection"><a href="#依赖注入-Dependency-Injection" class="headerlink" title="依赖注入( Dependency Injection )"></a>依赖注入( Dependency Injection )</h2><blockquote><p>实现依赖注入设计模式的库</p></blockquote><ul><li><a href="http://pimple.sensiolabs.org/" target="_blank" rel="noopener">Pimple</a> - 一个小的依赖注入容器</li><li><a href="https://github.com/container-interop" target="_blank" rel="noopener">container-interop</a> - Containers interoperability</li><li><a href="https://github.com/rdlowrey/Auryn" target="_blank" rel="noopener">Auryn</a> - 另一个小的依赖注入容器</li><li><a href="https://github.com/thephpleague/container" target="_blank" rel="noopener">Container</a> - 另一个灵活的依赖注入容器</li><li><a href="http://php-di.org/" target="_blank" rel="noopener">PHP DI</a> - 一个使用标注实现的依赖注入</li><li><a href="https://github.com/symfony/DependencyInjection" target="_blank" rel="noopener">Acclimate</a> - 依赖注入容器和服务定位器的通用接口</li><li><a href="https://github.com/symfony/DependencyInjection" target="_blank" rel="noopener">Symfony DI</a> - 一个的依赖注入组件(SF2)</li><li><a href="https://github.com/fabpot/twittee" target="_blank" rel="noopener">Twittee</a></li><li><a href="https://github.com/laracasts/simple-di-container" target="_blank" rel="noopener">simple di container</a></li><li><a href="https://github.com/marcelog/Ding" target="_blank" rel="noopener">Ding</a></li><li><a href="https://github.com/yiisoft/di" target="_blank" rel="noopener">di</a> - Yii DI container and injector</li></ul><h2 id="图像-Imagery"><a href="#图像-Imagery" class="headerlink" title="图像( Imagery )"></a>图像( Imagery )</h2><blockquote><p>处理图像的库</p></blockquote><ul><li><a href="http://imagine.readthedocs.org/en/latest/index.html" target="_blank" rel="noopener">Imagine</a> - 一个图像处理库</li><li><a href="https://github.com/Sybio/ImageWorkshop" target="_blank" rel="noopener">PHP Image Workshop</a> - 另一个图像处理库</li><li><a href="https://github.com/Intervention/image" target="_blank" rel="noopener">Intervention Image</a> - 同样还是一个图像处理库</li><li><a href="https://github.com/Sybio/GifFrameExtractor" target="_blank" rel="noopener">GIF Frame Extractor</a> - 一个提取GIF动画帧信息的库</li><li><a href="https://github.com/Sybio/GifCreator" target="_blank" rel="noopener">GIF Creator</a> - 从多幅图片中创建GIF动画的库</li><li><a href="https://github.com/nmcteam/image-with-text" target="_blank" rel="noopener">Image With Text</a> - 在图像中嵌入文本的库</li><li><a href="https://github.com/php-loep/color-extractor" target="_blank" rel="noopener">Color Extractor</a> - 从图像中提取颜色的库</li><li><a href="https://github.com/thephpleague/glide" target="_blank" rel="noopener">Glide</a> - 一个按需的图片处理库</li><li><a href="https://github.com/psliwa/image-optimizer" target="_blank" rel="noopener">Image Optimizer</a> - 一个优化图片的库</li><li><a href="https://github.com/masterexploder/PHPThumb" target="_blank" rel="noopener">PHPThumb</a> - 缩略图处理库</li><li><a href="https://github.com/t0k4rt/phpqrcode" target="_blank" rel="noopener">phpqrcode</a> - 二维码生成库</li><li><a href="https://github.com/endroid/QrCode" target="_blank" rel="noopener">QrCode</a> - 另一个二维码生成库</li><li><a href="https://github.com/lsolesen/pel" target="_blank" rel="noopener">pel</a> - PHP Exif 库</li><li><a href="https://github.com/PHPExif/php-exif" target="_blank" rel="noopener">php-exif</a> - PHP Exif信息读取库</li><li><a href="https://github.com/Gregwar/Captcha" target="_blank" rel="noopener">Captcha</a> - 图形验证码</li></ul><h2 id="测试-Testing"><a href="#测试-Testing" class="headerlink" title="测试( Testing )"></a>测试( Testing )</h2><blockquote><p>测试代码库和生成测试数据的库</p></blockquote><ul><li><a href="https://github.com/sebastianbergmann/phpunit" target="_blank" rel="noopener">PHPUnit</a> - 一个单元测试框架</li><li><a href="https://github.com/sebastianbergmann/dbunit" target="_blank" rel="noopener">DBUnit</a> - PHPUnit的代码测试库</li><li><a href="https://github.com/brianium/paratest" target="_blank" rel="noopener">ParaTest</a> - PHPUnit的并行测试库</li><li><a href="https://github.com/phpspec/phpspec" target="_blank" rel="noopener">PHPSpec</a> - 根据规范的单元测试库</li><li><a href="https://github.com/Codeception/Codeception" target="_blank" rel="noopener">Codeception</a> - 一个全栈测试框架</li><li><a href="https://github.com/Codeception/AspectMock" target="_blank" rel="noopener">AspectMock</a> - PHPUnit/Codeception的模拟框架</li><li><a href="https://github.com/atoum/atoum" target="_blank" rel="noopener">Atoum</a> - 一个简单的测试库</li><li><a href="https://github.com/padraic/mockery" target="_blank" rel="noopener">Mockery</a> - 一个用于测试的模拟对象库</li><li><a href="https://github.com/mlively/Phake" target="_blank" rel="noopener">Phake</a> - 另一个用于测试的模拟对象库</li><li><a href="https://github.com/phpspec/prophecy" target="_blank" rel="noopener">Prophecy</a> - 一个强大的模拟框架</li><li><a href="https://github.com/fzaninotto/Faker" target="_blank" rel="noopener">Faker</a> - 一个伪数据生成库</li><li><a href="https://github.com/mauris/samsui" target="_blank" rel="noopener">Samsui</a> - 另一个伪数据生成库</li><li><a href="https://github.com/nelmio/alice" target="_blank" rel="noopener">Alice</a> - 用于生成复杂数据的库</li><li><a href="http://behat.org/" target="_blank" rel="noopener">Behat</a> - 一个行为驱动开发（BDD）的测试框架</li><li><a href="https://github.com/danielstjules/pho" target="_blank" rel="noopener">Pho</a> - 另一个行为驱动开发的测试框架</li><li><a href="http://mink.behat.org/" target="_blank" rel="noopener">Mink</a> - Web验收测试</li><li><a href="https://github.com/InterNations/http-mock" target="_blank" rel="noopener">HTTP Mock</a> - 一个在单元测试中模拟HTTP请求的库</li><li><a href="https://github.com/mikey179/vfsStream" target="_blank" rel="noopener">VFS Stream</a> - 一个用于测试的虚拟文件系统流包装</li><li><a href="https://github.com/adlawson/vfs.php" target="_blank" rel="noopener">VFS</a> - 另一个用于测试的虚拟文件系统</li><li><a href="http://locust.io/" target="_blank" rel="noopener">Locust</a> - 一个Python开发的现代负载测试库</li><li><a href="https://github.com/peridot-php/peridot" target="_blank" rel="noopener">Peridot</a> - 一个事件驱动的测试框架</li><li><a href="https://github.com/simpletest/simpletest" target="_blank" rel="noopener">SimpleTest</a> - Unit Testing for PHP</li></ul><h2 id="持续集成-Continuous-Integration"><a href="#持续集成-Continuous-Integration" class="headerlink" title="持续集成( Continuous Integration )"></a>持续集成( Continuous Integration )</h2><blockquote><p>持续集成的库和应用</p></blockquote><ul><li><a href="https://travis-ci.org/" target="_blank" rel="noopener">Travis CI</a> - 一个持续集成的平台</li><li><a href="https://semaphoreapp.com/" target="_blank" rel="noopener">SemaphoreCI</a> - 一个给开源程序和私有项目的持续集成平台</li><li><a href="http://www.phptesting.org/" target="_blank" rel="noopener">PHPCI</a> - 一个PHP的开源持续集成平台</li><li><a href="http://sismo.sensiolabs.org/" target="_blank" rel="noopener">Sismo</a> - 一个持续的测试服务器库</li><li><a href="http://jenkins-ci.org/" target="_blank" rel="noopener">Jenkins</a> - PHP支持的持续集成平台</li><li><a href="https://github.com/jolicode/JoliCi" target="_blank" rel="noopener">JoliCi</a> - PHP开发的由Docker支持的持续集成客户端</li></ul><h2 id="文档-Documentation"><a href="#文档-Documentation" class="headerlink" title="文档( Documentation )"></a>文档( Documentation )</h2><blockquote><p>生成项目文档的库</p></blockquote><ul><li><a href="https://github.com/fabpot/Sami" target="_blank" rel="noopener">Sami</a> - 一个API文档生成器</li><li><a href="https://github.com/apigen/apigen" target="_blank" rel="noopener">APIGen</a> - 另一个API文档生成器</li><li><a href="https://github.com/phpDocumentor/phpDocumentor2" target="_blank" rel="noopener">PHP Documentor 2</a> - 文档生成器</li><li><a href="http://phpdox.de/" target="_blank" rel="noopener">phpDox</a> - 一个PHP项目的文档生成器（不仅仅是API文档）</li><li><a href="https://github.com/zircote/swagger-php" target="_blank" rel="noopener">swagger-php</a> - A php swagger annotation and parsing library </li></ul><h2 id="安全-Security"><a href="#安全-Security" class="headerlink" title="安全( Security )"></a>安全( Security )</h2><blockquote><p>用于生成安全的随机数、加密数据、扫描漏洞, 令牌的库</p></blockquote><ul><li><a href="https://github.com/ezyang/htmlpurifier" target="_blank" rel="noopener">HTML Purifier</a> - 一个标准的HTML过滤器</li><li><a href="https://github.com/paragonie/random_compat" target="_blank" rel="noopener">random_compat</a> - PHP5.x生成安全的随机数的库(PHP7可用内置<code>random_bytes()</code>和<code>random_int()</code>函数)</li><li><a href="https://github.com/ircmaxell/RandomLib" target="_blank" rel="noopener">RandomLib</a> - 生成随机数和随机字符串的库</li><li><a href="https://github.com/pixeloution/true-random" target="_blank" rel="noopener">True Random</a> - 使用<a href="http://www.random.org生成随机数的库" target="_blank" rel="noopener">www.random.org生成随机数的库</a></li><li><a href="https://github.com/padraic/SecurityMultiTool" target="_blank" rel="noopener">SecurityMultiTool</a> - 一个PHP安全库</li><li><a href="https://github.com/phpseclib/phpseclib" target="_blank" rel="noopener">PHPSecLib</a> - 一个纯的PHP安全通信库</li><li><a href="https://github.com/timoh6/TCrypto" target="_blank" rel="noopener">TCrypto</a> - 一个简单的键值加密存储库</li><li><a href="https://github.com/PHPIDS/PHPIDS" target="_blank" rel="noopener">PHP IDS</a> - 一个结构化的PHP安全层</li><li><a href="https://github.com/Herzult/php-ssh" target="_blank" rel="noopener">PHP SSH</a> - 面向对象的SSH包装库</li><li><a href="https://github.com/psecio/iniscan" target="_blank" rel="noopener">IniScan</a> - 一个扫描PHP INI文件安全的工具</li><li><a href="https://security.sensiolabs.org/" target="_blank" rel="noopener">SensioLabs Security Check</a> -  一个根据安全建议检查Composer依赖的Web工具</li><li><a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project" target="_blank" rel="noopener">Zed</a> - 用于Web应用的集成渗透测试工具</li><li><a href="https://github.com/akirk/php-ratelimiter" target="_blank" rel="noopener">php-ratelimiter</a> </li><li><a href="https://github.com/xxtea/xxtea-php" target="_blank" rel="noopener">xxtea-php</a> - XXTEA encryption algorithm library for PHP.</li></ul><h2 id="密码-Passwords"><a href="#密码-Passwords" class="headerlink" title="密码( Passwords )"></a>密码( Passwords )</h2><blockquote><p>处理和存储密码的库和工具、各种编码的库</p></blockquote><ul><li><a href="https://github.com/ircmaxell/password_compat" target="_blank" rel="noopener">Password Compat</a> - 一个用于新的PHP5.5密码功能的兼容库</li><li><a href="http://www.openwall.com/phpass/" target="_blank" rel="noopener">phpass</a> - 一个便携式密码哈希框架</li><li><a href="https://github.com/ircmaxell/PHP-PasswordLib" target="_blank" rel="noopener">PHP Password Lib</a> - 一个用于生成和验证密码的库</li><li><a href="https://github.com/ircmaxell/password-policy" target="_blank" rel="noopener">Password Policy</a> - 一个PHP和JavaScript的密码规则库</li><li><a href="https://github.com/jeremykendall/password-validator" target="_blank" rel="noopener">Password Validator</a> - 验证和升级密码哈希的库</li><li><a href="https://github.com/bjeavons/zxcvbn-php" target="_blank" rel="noopener">Zxcvbn PHP</a> - 一个基于Zxcvbn JS的PHP显示密码强度估计库</li><li><a href="https://github.com/timoh6/GenPhrase" target="_blank" rel="noopener">GenPhrase</a> - 一个生成安全随机口令的库</li><li><a href="https://github.com/tuupola/base62" target="_blank" rel="noopener">base62</a> - base62编码库(短网址应用)</li><li><a href="https://github.com/stephen-hill/base58php" target="_blank" rel="noopener">base58php</a> - base58编码库(Bitcoin中使用的一种独特的编码方式，主要用于产生Bitcoin的钱包地址)</li><li><a href="https://github.com/tuupola/base85" target="_blank" rel="noopener">base85</a> - base85编码库(在base64的基础上进一步压缩数据量,应用于Adobe的PostScript语言和PDF文档格式)</li></ul><h2 id="代码分析-Code-Analysis"><a href="#代码分析-Code-Analysis" class="headerlink" title="代码分析( Code Analysis )"></a>代码分析( Code Analysis )</h2><blockquote><p>用于分析、解析和操作代码库的工具</p></blockquote><ul><li><a href="https://github.com/nikic/PHP-Parser" target="_blank" rel="noopener">PHP Parser</a> - 一个PHP编写的PHP解析器</li><li><a href="https://github.com/ircmaxell/PHPPHP" target="_blank" rel="noopener">PHPPHP</a> - 一个PHP实现的PHP虚拟机</li><li><a href="https://github.com/fieryprophet/php-sandbox" target="_blank" rel="noopener">PHPSandbox</a> - PHP的沙盒环境</li><li><a href="https://github.com/jakubledl/dissect" target="_blank" rel="noopener">Dissect</a> - 词法和语法分析的工具集合</li><li><a href="http://phpmd.org/" target="_blank" rel="noopener">PHP Mess Detector</a> - 一个扫描代码bug、次佳代码和未使用参数的库</li><li><a href="https://github.com/squizlabs/PHP_CodeSniffer" target="_blank" rel="noopener">PHP Code Sniffer</a> - 一个检测PHP、CSS和JS代码标准冲突的库</li><li><a href="https://github.com/sebastianbergmann/phpcpd" target="_blank" rel="noopener">PHPCPD</a> - 一个检测复制和粘贴代码的库</li><li><a href="https://github.com/scrutinizer-ci/php-analyzer" target="_blank" rel="noopener">PHP Analyser</a> - 一个分析PHP代码中错误的库</li><li><a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer" target="_blank" rel="noopener">PHP CS Fixer</a> - 一个代码标准库</li><li><a href="https://github.com/schmittjoh/php-manipulator" target="_blank" rel="noopener">PHP Manipulator</a> - 用于分析和修改PHP源代码的库</li><li><a href="https://github.com/Halleck45/PhpMetrics" target="_blank" rel="noopener">PHP Metrics</a> - 一个静态测量库</li><li><a href="https://github.com/QafooLabs/php-refactoring-browser" target="_blank" rel="noopener">PHP Refactoring Browser</a> - 一个用于重构PHP代码的命令行工具</li><li><a href="https://github.com/tomzx/php-semver-checker" target="_blank" rel="noopener">php-semver-checker</a> - 一个版本对比的命令行工具</li><li><a href="https://github.com/devster/ubench" target="_blank" rel="noopener">UBench</a> - 一个简单的小型基准测试库</li><li><a href="https://github.com/polyfractal/athletic" target="_blank" rel="noopener">Athletic</a> - 一个基于标注的基准测试库</li><li><a href="https://github.com/Trismegiste/Mondrian" target="_blank" rel="noopener">Mondrian</a> - 使用图论的代码分析工具</li><li><a href="https://scrutinizer-ci.com/" target="_blank" rel="noopener">Scrutinizer</a> - 检查PHP代码的Web工具</li><li><a href="https://github.com/sebastianbergmann/phploc" target="_blank" rel="noopener">PHPLOC</a> - 一个快速评估PHP项目大小的工具</li><li><a href="https://github.com/jbrooksuk/phpcheckstyle" target="_blank" rel="noopener">PHPCheckstyle</a> - 一个帮助遵守特定代码规则的工具</li><li><a href="https://github.com/mamuz/PhpDependencyAnalysis" target="_blank" rel="noopener">PhpDependencyAnalysis</a> - 一个创建可定制型依赖关系图表的工具</li><li><a href="http://codeclimate.com/" target="_blank" rel="noopener">Code Climate</a> - 自动化的code review</li><li><a href="https://github.com/JosephLenton/PHP-Error" target="_blank" rel="noopener">PHP Error</a> - 用于转换标准的 PHP 错误信息，主要用于开发过程中的调试</li><li><a href="https://github.com/vimeo/psalm" target="_blank" rel="noopener">psalm</a> - 一个帮助你识别代码里可能存在 bugs 的静态分析工具</li><li><a href="https://github.com/phan/phan" target="_blank" rel="noopener">phan</a> - 代码静态分析工具</li><li><a href="https://github.com/phpstan/phpstan" target="_blank" rel="noopener">phpstan</a> - 代码静态分析工具</li></ul><h2 id="结构-Architectural"><a href="#结构-Architectural" class="headerlink" title="结构( Architectural )"></a>结构( Architectural )</h2><blockquote><p>有关于设计模式,编程规范以及代码组织方式的库</p></blockquote><ul><li><a href="https://github.com/schmittjoh/php-option" target="_blank" rel="noopener">PHP Option</a> - 一个PHP选项类型的库</li><li><a href="https://github.com/bobthecow/Ruler" target="_blank" rel="noopener">Ruler</a> - 一个简单的无状态的产生环境规则的引擎</li><li><a href="http://yohan.giarel.li/Finite" target="_blank" rel="noopener">Finite</a> - 一个简单的PHP有限状态机</li><li><a href="https://github.com/igorw/compose" target="_blank" rel="noopener">Compose</a> - 一个功能组合库</li><li><a href="https://github.com/ircmaxell/monad-php" target="_blank" rel="noopener">Monad PHP</a> - 一个简单Monad库</li><li><a href="http://antecedent.github.io/patchwork/" target="_blank" rel="noopener">Patchwork</a> - 一个重新定义用户的函数库</li><li><a href="https://github.com/endel/galapagos" target="_blank" rel="noopener">Galapagos</a> - 语言转换进化</li><li><a href="https://github.com/domnikl/DesignPatternsPHP" target="_blank" rel="noopener">Design Patterns PHP</a> - 一个使用PHP实现的设计模式实例库</li><li><a href="https://github.com/lstrojny/functional-php" target="_blank" rel="noopener">Functional PHP</a> - 一个函数式编程库</li><li><a href="https://github.com/phine/lib-accessor" target="_blank" rel="noopener">Lib Accessor</a> - 一个简化访问的库</li><li><a href="https://github.com/nikic/iter" target="_blank" rel="noopener">Iter</a> - 一个使用生成器提供迭代原语的库</li></ul><h2 id="调试和性能-Debugging-and-Profiling"><a href="#调试和性能-Debugging-and-Profiling" class="headerlink" title="调试和性能( Debugging and Profiling )"></a>调试和性能( Debugging and Profiling )</h2><blockquote><p>调试代码的库和工具</p></blockquote><ul><li><a href="https://github.com/xdebug/xdebug" target="_blank" rel="noopener">xDebug</a> - 一个PHP的调试和分析工具</li><li><a href="https://github.com/filp/whoops" target="_blank" rel="noopener">whoops</a></li><li><a href="http://phpdebugbar.com/" target="_blank" rel="noopener">PHP Debug Bar</a> - 一个调试工具条</li><li><a href="https://github.com/Seldaek/php-console" target="_blank" rel="noopener">PHP Console</a> - Web调试控制台</li><li><a href="https://github.com/barbushin/php-console" target="_blank" rel="noopener">Barbushin PHP Console</a> -  一个使用Google Chrome的Web调试控制工具</li><li><a href="http://phpdbg.com/" target="_blank" rel="noopener">PHPDBG</a> - 一个交互性的PHP调试器</li><li><a href="https://github.com/nette/tracy" target="_blank" rel="noopener">Tracy</a> - 一个简单的错误检测、日志和时间测量库</li><li><a href="http://www.zend.com/en/products/server/z-ray" target="_blank" rel="noopener">Z-Ray</a> - 一个调试和性能分析的工具</li><li><a href="https://github.com/phacility/xhprof" target="_blank" rel="noopener">xHprof</a> - Facebook开源的PHP性能评测工具<ul><li><a href="https://github.com/longxinH/xhprof" target="_blank" rel="noopener">xhprof</a> - 基于官方版本fork的社区版本(支持PHP7)</li><li><a href="https://github.com/EvaEngine/xhprof.io" target="_blank" rel="noopener">xhprof.io</a> - 实现保存xhprof数据以及展示数据的UI</li><li><a href="https://github.com/perftools/xhgui" target="_blank" rel="noopener">xhgui</a> - 另一个保存xhprof数据以及展示数据的UI</li></ul></li><li><a href="http://blackfire.io" target="_blank" rel="noopener">Blackfire.io</a> - 一个低开销的代码探查器</li><li><a href="https://github.com/raveren/kint" target="_blank" rel="noopener">Kint</a> - 一个调试和性能分析的工具</li><li><a href="https://github.com/Qihoo360/phptrace" target="_blank" rel="noopener">phptrace</a> - 360开源的PHP执行跟踪工具</li><li><a href="https://github.com/patrickallaert/php-apm" target="_blank" rel="noopener">php-apm</a> - Application performance management for PHP application</li><li><a href="https://github.com/thephpleague/booboo" target="_blank" rel="noopener">BooBoo</a> - 集中异常捕获</li><li><a href="https://github.com/nunomaduro/collision" target="_blank" rel="noopener">Collision</a> - 命令行PHP应用程序的错误处理程序框架</li><li><a href="https://github.com/symfony/debug" target="_blank" rel="noopener">symfony/debug</a> - PHP debug调试库</li></ul><h2 id="构建工具-Build-Tools"><a href="#构建工具-Build-Tools" class="headerlink" title="构建工具( Build Tools )"></a>构建工具( Build Tools )</h2><blockquote><p>项目构建和自动化工具</p></blockquote><ul><li><a href="https://github.com/herrera-io/php-go" target="_blank" rel="noopener">Go</a> - 一个简单的PHP构建工具</li><li><a href="https://github.com/CHH/bob" target="_blank" rel="noopener">Bob</a> - 一个简单的项目自动化工具</li><li><a href="https://github.com/jaz303/phake" target="_blank" rel="noopener">Phake</a> -  一个PHP克隆库</li><li><a href="https://github.com/kherge/Box" target="_blank" rel="noopener">Box</a> - 用来构建PHAR文件的工具</li><li><a href="http://www.phing.info/" target="_blank" rel="noopener">Phing</a> - 依据Apache Ant的PHP项目构建系统</li></ul><h2 id="任务运行器-Task-Runners"><a href="#任务运行器-Task-Runners" class="headerlink" title="任务运行器( Task Runners )"></a>任务运行器( Task Runners )</h2><blockquote><p>自动运行任务的库</p></blockquote><ul><li><a href="http://taskphp.github.io/" target="_blank" rel="noopener">Task</a> - 依据Grunt和Gulp的纯PHP任务运行器</li><li><a href="https://github.com/Codegyre/Robo" target="_blank" rel="noopener">Robo</a> - 面向对象的PHP任务运行器</li><li><a href="http://bldr.io/" target="_blank" rel="noopener">Bldr</a> - 构建在Symfony组件上的PHP任务运行器</li></ul><h2 id="导航-Navigation"><a href="#导航-Navigation" class="headerlink" title="导航( Navigation )"></a>导航( Navigation )</h2><blockquote><p>构建导航结构的工具</p></blockquote><ul><li><a href="https://github.com/KnpLabs/KnpMenu" target="_blank" rel="noopener">KnpMenu</a> - 一个菜单库</li><li><a href="https://github.com/tackk/cartographer" target="_blank" rel="noopener">Cartographer</a> - 一个站点地图生成库</li></ul><h2 id="资源管理-Asset-Management"><a href="#资源管理-Asset-Management" class="headerlink" title="资源管理( Asset Management )"></a>资源管理( Asset Management )</h2><blockquote><p>用于管理、压缩和最小化网站资源的工具</p></blockquote><ul><li><a href="https://github.com/kriswallsmith/assetic" target="_blank" rel="noopener">Assetic</a> - 一个资源管理的管道库</li><li><a href="https://github.com/CHH/pipe" target="_blank" rel="noopener">Pipe</a> - 另一个资源管理的管道库</li><li><a href="https://github.com/meenie/munee" target="_blank" rel="noopener">Munee</a> - 一个资源优化库</li><li><a href="https://github.com/tedivm/JShrink" target="_blank" rel="noopener">JShrink</a> - 一个JavaScript的压缩库</li><li><a href="https://github.com/webmozart/puli" target="_blank" rel="noopener">Puli</a> - 一个检测资源绝对路径的库</li></ul><h2 id="地理定位-Geolocation"><a href="#地理定位-Geolocation" class="headerlink" title="地理定位( Geolocation )"></a>地理定位( Geolocation )</h2><blockquote><p>使用经纬度编码地址的库</p></blockquote><ul><li><a href="http://geocoder-php.org/" target="_blank" rel="noopener">GeoCoder</a> - 一个地理编码库</li><li><a href="https://github.com/php-loep/Geotools" target="_blank" rel="noopener">GeoTools</a> - 一个地理工具相关的库</li><li><a href="https://github.com/mjaschen/phpgeo" target="_blank" rel="noopener">PHPGeo</a> - 一个简单的地理库</li><li><a href="https://github.com/jmikola/geojson" target="_blank" rel="noopener">GeoJSON</a> - 一个GeoJSON的实现</li></ul><h2 id="日期与时间-Date-and-Time"><a href="#日期与时间-Date-and-Time" class="headerlink" title="日期与时间( Date and Time )"></a>日期与时间( Date and Time )</h2><blockquote><p>处理日期和时间的库</p></blockquote><ul><li><a href="https://github.com/briannesbitt/Carbon" target="_blank" rel="noopener">Carbon</a> - 一个简单的日期时间API扩展</li><li><a href="https://github.com/jasonlewis/expressive-date" target="_blank" rel="noopener">ExpressiveDate</a> - 另一个日期时间API扩展</li><li><a href="http://yohan.giarel.li/CalendR" target="_blank" rel="noopener">CalendR</a> - 一个日历管理的库</li><li><a href="https://github.com/jenssegers/date" target="_blank" rel="noopener">date</a> - 一个多语言的日期库</li><li><a href="https://github.com/fightbulc/moment.php" target="_blank" rel="noopener">moment.php</a></li></ul><h2 id="事件-Event"><a href="#事件-Event" class="headerlink" title="事件( Event )"></a>事件( Event )</h2><blockquote><p>事件驱动或非阻塞事件循环实现的库</p></blockquote><ul><li><a href="https://github.com/reactphp/react" target="_blank" rel="noopener">React</a> - 一个事件驱动的非阻塞I/O库</li><li><a href="https://github.com/asm89/Rx.PHP" target="_blank" rel="noopener">Rx.PHP</a> - 一个反应扩展库</li><li><a href="https://github.com/walkor/phpsocket.io" target="_blank" rel="noopener">phpsocket.io</a></li><li><a href="https://github.com/cboden/Ratchet" target="_blank" rel="noopener">Ratchet</a> - 一个Web套接字库</li><li><a href="https://github.com/hoaproject/Websocket" target="_blank" rel="noopener">Hoa WebSocket</a> - 另一个Web套接字库</li><li><a href="https://github.com/Wisembly/Elephant.io" target="_blank" rel="noopener">Elephant.io</a> - 另一个Web套接字库</li><li><a href="https://github.com/hoaproject/Eventsource" target="_blank" rel="noopener">Hoa EventSource</a> - 一个事件源库</li><li><a href="https://github.com/igorw/evenement" target="_blank" rel="noopener">Evenement</a> - 一个事件调度库</li><li><a href="https://github.com/thephpleague/event" target="_blank" rel="noopener">Event</a> - Event package for your app and/or domain.</li><li><a href="https://github.com/cakephp/event" target="_blank" rel="noopener">Cake Event</a> - 一个事件调度类库</li><li><a href="https://github.com/qandidate-labs/broadway" target="_blank" rel="noopener">Broadway</a> - 一个事件源和CQRS库</li></ul><h2 id="日志-Logging"><a href="#日志-Logging" class="headerlink" title="日志( Logging )"></a>日志( Logging )</h2><blockquote><p>用于生成和处理日志文件的库</p></blockquote><ul><li><a href="https://github.com/Seldaek/monolog" target="_blank" rel="noopener">Monolog</a> - 一个综合的日志类库</li><li><a href="https://github.com/katzgrau/KLogger" target="_blank" rel="noopener">KLogger</a> - 一个易于使用的PSR-3日志类</li><li><a href="https://github.com/jbroadway/analog" target="_blank" rel="noopener">Analog</a> - 一个机遇闭包的微型日志包</li><li><a href="https://github.com/neeke/seaslog" target="_blank" rel="noopener">SeasLog</a> - 一个高效的日志扩展</li></ul><h2 id="电子商务-E-commerce"><a href="#电子商务-E-commerce" class="headerlink" title="电子商务( E-commerce )"></a>电子商务( E-commerce )</h2><blockquote><p>用于支付和构建在线电子商务商店的库和应用</p></blockquote><ul><li><p><a href="https://github.com/thephpleague/omnipay" target="_blank" rel="noopener">OmniPay</a> - 一个多网关支付处理的框架</p><ul><li><a href="https://github.com/thephpleague/omnipay-paypal" target="_blank" rel="noopener">omnipay-paypal</a> - PayPal 支付</li><li><a href="https://github.com/lokielse/omnipay-wechatpay" target="_blank" rel="noopener">omnipay-wechatpay</a> - 微信支付</li><li><a href="https://github.com/lokielse/omnipay-unionpay" target="_blank" rel="noopener">omnipay-unionpay</a> - 银联支付</li><li><a href="https://github.com/lokielse/omnipay-alipay" target="_blank" rel="noopener">omnipay-alipay</a> - 支付宝支付</li><li><a href="https://github.com/phoenixg/omnipay-pingpp" target="_blank" rel="noopener">omnipay-pingpp</a> - ping++聚合支付</li><li><a href="https://github.com/zacksleo/omnipay-99bill" target="_blank" rel="noopener">omnipay-99bill</a> - 快钱支付</li></ul></li><li><p><a href="https://github.com/payum/payum" target="_blank" rel="noopener">Payum</a> - 一个用于支付的抽象库</p></li><li><a href="http://www.sylius.org/" target="_blank" rel="noopener">Sylius</a> - 一个开源的电子商务解决方案</li><li><a href="http://thelia.net/v2/" target="_blank" rel="noopener">Thelia</a> - 另一个开源的电子商务解决方案</li><li><a href="https://github.com/mathiasverraes/money" target="_blank" rel="noopener">Money</a> -  PHP实现的Fowler金钱模式</li><li><a href="https://github.com/sebastianbergmann/money" target="_blank" rel="noopener">Sebastian Money</a> - 一个处理货币价值的库</li><li><a href="https://github.com/florianv/swap" target="_blank" rel="noopener">Swap</a> - 一个汇率库</li></ul><h2 id="PDF"><a href="#PDF" class="headerlink" title="PDF"></a>PDF</h2><blockquote><p>处理PDF文件的库和软件</p></blockquote><ul><li><a href="https://github.com/KnpLabs/snappy" target="_blank" rel="noopener">Snappy</a> - 一个PDF和图像的生成库</li><li><a href="https://github.com/antialize/wkhtmltopdf" target="_blank" rel="noopener">WKHTMLToPDF</a> - 一个将HTML转换为PDF的工具</li><li><a href="https://github.com/psliwa/PHPPdf" target="_blank" rel="noopener">PHPPdf</a> - 一个将XML转化为PDF和图片的库</li><li><a href="https://github.com/mikehaertl/phpwkhtmltopdf" target="_blank" rel="noopener">phpwkhtmltopdf</a></li><li><a href="https://github.com/mikehaertl/php-pdftk" target="_blank" rel="noopener">php-pdftk</a> - A PDF conversion and form utility based on pdftk</li></ul><h2 id="Office"><a href="#Office" class="headerlink" title="Office"></a>Office</h2><blockquote><p>Office套装的各种文档的处理库</p></blockquote><ul><li><a href="https://github.com/PHPOffice/PHPWord" target="_blank" rel="noopener">PHPWord</a> - 处理Word文档的库</li><li><a href="https://github.com/PHPOffice/PHPExcel" target="_blank" rel="noopener">PHPExcel</a> - 处理Excel文档的库</li><li><a href="https://github.com/PHPOffice/PHPPowerPoint" target="_blank" rel="noopener">PHPPowerPoint</a> - 处理PPT幻灯片的库</li><li><a href="https://github.com/Wisembly/ExcelAnt" target="_blank" rel="noopener">ExcelAnt</a> - 操作Excel文档的库</li><li><a href="https://github.com/PHPOffice/PhpSpreadsheet" target="_blank" rel="noopener">PhpSpreadsheet</a> - 建议使用最新的PHPOffice维护的Excel 文档处理库</li><li><a href="https://github.com/viest/php-ext-excel-export" target="_blank" rel="noopener">php-ext-excel-export</a> - 操作Excel的 PHP 扩展</li></ul><h2 id="数据库-Database"><a href="#数据库-Database" class="headerlink" title="数据库( Database )"></a>数据库( Database )</h2><blockquote><p>使用对象关系映射（ORM）或数据映射技术的数据库交互库</p></blockquote><ul><li><a href="http://www.doctrine-project.org/" target="_blank" rel="noopener">Doctrine</a> - 一个完整的DBAL和ORM</li><li><a href="https://github.com/l3pp4rd/DoctrineExtensions" target="_blank" rel="noopener">Doctrine Extensions</a> - 一个Doctrine行为的扩展集合</li><li><a href="http://www.propelorm.org/" target="_blank" rel="noopener">Propel</a> - 一个快速的ORM，迁移和查询库</li><li><a href="https://github.com/illuminate/database" target="_blank" rel="noopener">Eloquent</a> - Laravel 5 ORM(L5)</li><li><a href="https://github.com/c9s/LazyRecord" target="_blank" rel="noopener">LazyRecord</a> - 一个快速的ORM</li><li><a href="https://github.com/etrepat/baum" target="_blank" rel="noopener">Baum</a> - 一个Eloquent的嵌套集合</li><li><a href="https://github.com/vlucas/spot2" target="_blank" rel="noopener">Spot2</a> - MySQL的ORM映射器</li><li><a href="http://redbeanphp.com/" target="_blank" rel="noopener">RedBean</a> - 一个轻量级、易配置的ORM</li><li><a href="https://github.com/chanmix51/Pomm" target="_blank" rel="noopener">Pomm</a> - 用于PostgreSQL的一个对象模型管理器</li><li><a href="https://github.com/Ocramius/ProxyManager" target="_blank" rel="noopener">ProxyManager</a> - 用于数据映射生成代理对象的工具集合</li><li><a href="https://github.com/cakephp/orm" target="_blank" rel="noopener">Cake ORM</a> - 对象关系映射器, 实现了使用数据映射模式(CP)</li><li><a href="http://medoo.in/" target="_blank" rel="noopener">Medoo</a> - 一个轻量级的加速开发的ORM</li><li><a href="https://github.com/auraphp/Aura.Sql" target="_blank" rel="noopener">Aura SQL</a> - SQL database access through PDO.</li><li><a href="https://github.com/paragonie/easydb" target="_blank" rel="noopener">EasyDB</a> - 数据库抽象层</li></ul><h2 id="迁移-Migrations"><a href="#迁移-Migrations" class="headerlink" title="迁移( Migrations )"></a>迁移( Migrations )</h2><blockquote><p>用于管理数据库模式和迁移的库</p></blockquote><ul><li><a href="https://github.com/davedevelopment/phpmig" target="_blank" rel="noopener">PHPMig</a> - 一个迁移管理库</li><li><a href="https://github.com/robmorgan/phinx" target="_blank" rel="noopener">Phinx</a> - 一个数据库迁移管理库</li><li><a href="https://github.com/icomefromthenet/Migrations" target="_blank" rel="noopener">Migrations</a> - 另一个迁移管理库</li><li><a href="http://docs.doctrine-project.org/projects/doctrine-migrations/en/latest/toc.html" target="_blank" rel="noopener">Doctrine Migrations</a> - 用于Doctrine的迁移库</li></ul><h2 id="非关系型数据库-NoSQL"><a href="#非关系型数据库-NoSQL" class="headerlink" title="非关系型数据库( NoSQL )"></a>非关系型数据库( NoSQL )</h2><blockquote><p>处理NoSQL后端的库</p></blockquote><ul><li>MongoDB<ul><li><a href="https://github.com/mongodb/mongo-php-library" target="_blank" rel="noopener">mongo-php-library</a> - MongoDB 官方PHP库</li><li><a href="https://github.com/alexbilbie/MongoQB" target="_blank" rel="noopener">MongoQB</a> - 一个MongoDB的查询构建库</li><li><a href="https://github.com/thephpleague/monga" target="_blank" rel="noopener">Monga</a> - 一个MongoDB的抽象库</li><li><a href="https://github.com/purekid/mongodm" target="_blank" rel="noopener">mongodm</a> - MongoDB ORM</li><li><a href="https://github.com/sokil/php-mongo" target="_blank" rel="noopener">php-mongo</a> - PHP ODM for MongoDB</li><li><a href="https://github.com/jenssegers/laravel-mongodb" target="_blank" rel="noopener">laravel-mongodb</a></li></ul></li><li>Redis<ul><li><a href="https://github.com/nrk/predis" target="_blank" rel="noopener">Predis</a> - 一个功能完全的Redis库</li><li><a href="https://github.com/CodisLabs/codis" target="_blank" rel="noopener">codis</a> - Codis 是一个分布式 Redis 解决方案</li><li><a href="https://github.com/twitter/twemproxy" target="_blank" rel="noopener">twemproxy</a> - 是twtter开源的一个redis和memcache代理服务器</li><li><a href="https://github.com/Qihoo360/pika" target="_blank" rel="noopener">pika</a> - Pika是一个可持久化的大容量redis存储服务</li></ul></li></ul><h2 id="队列-Queue"><a href="#队列-Queue" class="headerlink" title="队列( Queue )"></a>队列( Queue )</h2><blockquote><p>处理事件和任务队列的库</p></blockquote><ul><li><a href="https://github.com/php-enqueue/enqueue-dev" target="_blank" rel="noopener">enqueue-dev</a> - Message queue packages for PHP, Symfony, Laravel, Magento<ul><li><a href="https://github.com/php-enqueue/rdkafka" target="_blank" rel="noopener">enqueue/rdkafka</a></li><li><a href="https://github.com/php-enqueue/enqueue" target="_blank" rel="noopener">enqueue/enqueue</a></li><li><a href="https://github.com/php-enqueue/pheanstalk" target="_blank" rel="noopener">enqueue/pheanstalk</a></li><li><a href="https://github.com/php-enqueue/redis" target="_blank" rel="noopener">enqueue/redis</a></li></ul></li></ul><p><strong>队列服务框架</strong></p><ul><li><a href="https://github.com/apache/kafka" target="_blank" rel="noopener">Kafka</a> - 高吞吐量的分布式发布订阅消息系统</li><li><a href="https://github.com/rabbitmq/rabbitmq-server" target="_blank" rel="noopener">RabbitMQ</a> - 使用 erlang 编写的 AMQP (高级消息队列协议) 的服务实现</li><li><a href="https://github.com/apache/rocketmq/" target="_blank" rel="noopener">RocketMQ</a></li><li><a href="https://github.com/apache/activemq/" target="_blank" rel="noopener">ActiveMQ</a></li><li><a href="https://github.com/apache/qpid" target="_blank" rel="noopener">Qpid</a></li><li><a href="https://github.com/antirez/disque" target="_blank" rel="noopener">Disque</a> - 分布式内存队列</li><li><a href="https://github.com/kr/beanstalkd" target="_blank" rel="noopener">beanstalkd</a> - 一个高性能、轻量级的消息队列中间件</li></ul><p><strong>队列相关类库</strong></p><ul><li><a href="https://github.com/pda/pheanstalk" target="_blank" rel="noopener">Pheanstalk</a> - 一个Beanstalkd客户端库</li><li><a href="https://github.com/videlalvaro/php-amqplib" target="_blank" rel="noopener">PHP AMQP</a> - 一个纯PHP AMQP库</li><li><a href="https://github.com/videlalvaro/Thumper" target="_blank" rel="noopener">Thumper</a> - 一个RabbitMQ模式库</li><li><a href="https://github.com/bernardphp/bernard" target="_blank" rel="noopener">Bernard</a> - 一个多后端的抽象库</li><li><a href="https://github.com/chrisboulton/php-resque" target="_blank" rel="noopener">php-resque</a> - 基于redis的消息队列</li><li><a href="https://github.com/php-amqplib/php-amqplib" target="_blank" rel="noopener">php-amqplib</a> - 一个RabbitMQ客户端库</li><li><a href="https://github.com/weiboad/kafka-php" target="_blank" rel="noopener">kafka-php</a> - 一个kafka客户端库(Composer)</li><li><a href="https://github.com/arnaud-lb/php-rdkafka" target="_blank" rel="noopener">php-rdkafka</a> - 一个kafka客户端库(PECL)</li></ul><h2 id="搜索-Search"><a href="#搜索-Search" class="headerlink" title="搜索( Search )"></a>搜索( Search )</h2><blockquote><p>在数据中建立索引和执行查询相关的库和软件</p></blockquote><ul><li><a href="https://github.com/elasticsearch/elasticsearch-php" target="_blank" rel="noopener">ElasticSearch PHP</a> - 用于 <a href="http://www.elasticsearch.org/" target="_blank" rel="noopener">ElasticSearch</a> 的官方客户端库.</li><li><a href="https://github.com/ruflin/Elastica" target="_blank" rel="noopener">Elastica</a> - 另一个ElasticSearch的客户端库</li><li><a href="http://www.solarium-project.org/" target="_blank" rel="noopener">Solarium</a> - <a href="http://lucene.apache.org/solr/" target="_blank" rel="noopener">Solr</a> 的客户端库 .</li><li><a href="http://foolcode.github.io/SphinxQL-Query-Builder/" target="_blank" rel="noopener">SphinxQL query builder</a> - <a href="http://sphinxsearch.com/" target="_blank" rel="noopener">Sphinx</a> 搜索引擎的查询库  </li></ul><h2 id="命令行-Command-Line"><a href="#命令行-Command-Line" class="headerlink" title="命令行( Command Line )"></a>命令行( Command Line )</h2><blockquote><p>构建命令行工具的库</p></blockquote><ul><li><a href="https://github.com/symfony/console" target="_blank" rel="noopener">symfony/console</a> - Symfony命令行工作组件</li><li><a href="https://github.com/symfony/process" target="_blank" rel="noopener">symfony/process</a> - Symfony命令执行组件</li><li><a href="https://github.com/d11wtq/boris" target="_blank" rel="noopener">Boris</a> - 一个微型的PHP REPL</li><li><a href="https://github.com/bobthecow/psysh" target="_blank" rel="noopener">PsySH</a> - 另一个PHP REPL</li><li><a href="https://github.com/mcrumm/pecan" target="_blank" rel="noopener">Pecan</a> - 一个事件驱动，非阻塞的shell</li><li><a href="https://github.com/ulrichsg/getopt-php" target="_blank" rel="noopener">GetOpt</a> - 一个命令行选择解析器</li><li><a href="https://github.com/CHH/optparse" target="_blank" rel="noopener">OptParse</a> - 另一个命令行选择解析器</li><li><a href="https://github.com/nategood/commando" target="_blank" rel="noopener">Commando</a> - 一个简单的命令行选择解析器</li><li><a href="https://github.com/c9s/php-GetOptionKit" target="_blank" rel="noopener">GetOptionKit</a> - 同样还是一个命令行选择解析器</li><li><a href="https://github.com/mtdowling/cron-expression" target="_blank" rel="noopener">Cron Expression</a> -计算cron运行日期的库</li><li><a href="https://github.com/MrRio/shellwrap" target="_blank" rel="noopener">ShellWrap</a> - 一个简单的命令行包装库</li><li><a href="https://github.com/hoaproject/Console" target="_blank" rel="noopener">Hoa Console</a> - 另一个命令行库</li><li><a href="https://github.com/php-loep/shunt" target="_blank" rel="noopener">Shunt</a> -一个在多台远程机器上并行运行的命令行库</li><li><a href="https://github.com/Cilex/Cilex" target="_blank" rel="noopener">Cilex</a> - 构建命令行工具的小型框架</li><li><a href="https://github.com/thephpleague/climate" target="_blank" rel="noopener">CLImate</a> - 构建命令行工具的框架(可以输出颜色和特殊格式)</li><li><a href="github.com/webmozart/console">Webmozart Console</a></li><li><a href="https://github.com/mnapoli/silly" target="_blank" rel="noopener">Silly</a> - Silly CLI micro-framework based on Symfony Console</li><li><a href="https://github.com/mikehaertl/php-shellcommand" target="_blank" rel="noopener">php-shellcommand</a> - A simple object oriented interface to execute shell commands in PHP</li></ul><h2 id="定时任务-Crontab"><a href="#定时任务-Crontab" class="headerlink" title="定时任务( Crontab )"></a>定时任务( Crontab )</h2><blockquote><p>定时任务管理 crontab在 PHP 中的相关封装</p></blockquote><ul><li><a href="https://github.com/Indatus/dispatcher" target="_blank" rel="noopener">Dispatcher</a> - 基于Laravel的定时任务管理</li><li><a href="https://github.com/osgochina/swoole-crontab" target="_blank" rel="noopener">swoole-crontab</a> - 基于swoole的定时器程序，支持秒级处理</li><li><a href="https://github.com/jobbyphp/jobby" target="_blank" rel="noopener">jobby</a> -  一个 PHP 的定时任务管理器</li><li><a href="https://github.com/ajbdev/cronlingo" target="_blank" rel="noopener">cronlingo</a> - Express crontabs as human friendly phrases</li></ul><h2 id="身份验证-Authentication-and-Authorization"><a href="#身份验证-Authentication-and-Authorization" class="headerlink" title="身份验证( Authentication and Authorization )"></a>身份验证( Authentication and Authorization )</h2><blockquote><p>实现身份验证模式的库</p></blockquote><ul><li><a href="https://cartalyst.com/manual/sentinel/2.0" target="_blank" rel="noopener">Sentinel</a> - 一个身份验证和授权的框架</li><li><a href="https://cartalyst.com/manual/sentinel-social/2.0" target="_blank" rel="noopener">Sentinel Social</a> - 一个用于社交网络身份验证的库</li><li><a href="https://github.com/opauth/opauth" target="_blank" rel="noopener">Opauth</a> - 提供了 OAuth 认证的支持,提供统一标准的访问方法</li><li><a href="http://oauth2.thephpleague.com/" target="_blank" rel="noopener">OAuth2 Server</a> - 一个OAuth2身份验证服务器、资源服务器和客户端库</li><li><a href="http://bshaffer.github.io/oauth2-server-php-docs/" target="_blank" rel="noopener">OAuth2 Server</a> - 一个OAuth2服务器实现</li><li><a href="https://github.com/Lusitanian/PHPoAuthLib" target="_blank" rel="noopener">PHP oAuthLib</a> - 另一个OAuth库</li><li><a href="https://github.com/ruudk/twitteroauth" target="_blank" rel="noopener">TwitterOAuth</a> - 一个Twitter OAuth库</li><li><a href="https://github.com/lyrixx/twitter-sdk" target="_blank" rel="noopener">TwitterSDK</a> - 一个经过完全测试的Twitter SDK</li><li><a href="https://github.com/dflydev/dflydev-hawk" target="_blank" rel="noopener">Hawk</a> - 一个Hawk HTTP身份验证库</li><li><a href="https://github.com/hybridauth/hybridauth" target="_blank" rel="noopener">HybridAuth</a> - 一个开源的社交登录库</li><li><a href="https://github.com/BeatSwitch/lock" target="_blank" rel="noopener">Lock</a> - 一个 Access Control Lists (ACL) 系统库.</li><li><a href="https://github.com/thephpleague/oauth1-client" target="_blank" rel="noopener">OAuth 1.0 Client</a> - 一个 OAuth 1.0 客户端库.</li><li><a href="https://github.com/thephpleague/oauth2-client" target="_blank" rel="noopener">OAuth 2.0 Client</a> - 一个 OAuth 2.0 客户端库.</li><li><a href="http://github.com/cartalyst/sentry" target="_blank" rel="noopener">Sentry</a> - 认证和授权系统</li><li><a href="https://github.com/AlloVince/EvaOAuth" target="_blank" rel="noopener">EvaOAuth</a> - 统一接口的 OAuth 登录 PHP 类库</li><li><a href="http://jwt.io/" target="_blank" rel="noopener">JSON Web Token</a>- JSON网络令牌库<ul><li><a href="https://github.com/firebase/php-jwt" target="_blank" rel="noopener">php-jwt</a> </li><li><a href="https://github.com/lcobucci/jwt" target="_blank" rel="noopener">jwt</a></li><li><a href="https://github.com/namshi/jose" target="_blank" rel="noopener">jose</a> - JSON签名和加密的库</li><li><a href="https://github.com/tuupola/slim-jwt-auth" target="_blank" rel="noopener">slim-jwt-auth</a></li><li><a href="https://github.com/tymondesigns/jwt-auth" target="_blank" rel="noopener">jwt-auth</a></li></ul></li><li><a href="https://github.com/paragonie/sapient" target="_blank" rel="noopener">Sapient</a> - the Secure API ENgineering Toolkit API消息传递安全校验</li><li><a href="https://github.com/legalthings/sso" target="_blank" rel="noopener">legalthings/sso</a> - Simple Single Sign-On for PHP</li></ul><h2 id="标记-Markup"><a href="#标记-Markup" class="headerlink" title="标记( Markup )"></a>标记( Markup )</h2><blockquote><p>处理标记的库</p></blockquote><ul><li><a href="http://milesj.me/code/php/decoda" target="_blank" rel="noopener">Decoda</a> - 一个轻量级的标记解析库</li><li><a href="https://github.com/michelf/php-markdown" target="_blank" rel="noopener">PHP Markdown</a> - Markdown解析器</li><li><a href="https://github.com/thephpleague/commonmark" target="_blank" rel="noopener">CommonMark PHP</a> - 一个支持 <a href="http://spec.commonmark.org/" target="_blank" rel="noopener">CommonMark spec</a> 的Markdown解析器.</li><li><a href="https://github.com/erusev/parsedown" target="_blank" rel="noopener">Parsedown</a> - 一个Markdown解析器</li><li><a href="https://github.com/kzykhys/Ciconia" target="_blank" rel="noopener">Ciconia</a> - 一个支持Github风格的Markdown解析器</li><li><a href="https://github.com/cebe/markdown" target="_blank" rel="noopener">Cebe Markdown</a> - 一个快速、可扩展的Markdown解析器</li><li><a href="https://github.com/Masterminds/html5-php" target="_blank" rel="noopener">HTML5 PHP</a> - 一个HTML5解析和序列化的库</li><li><a href="https://github.com/heyupdate/Emoji" target="_blank" rel="noopener">Emoji</a> - 一个简单的处理emoji的类库</li><li><a href="https://github.com/iamcal/php-emoji" target="_blank" rel="noopener">php-emoji</a> - 一个emoji表情转换库</li></ul><h2 id="字符串-Strings"><a href="#字符串-Strings" class="headerlink" title="字符串( Strings )"></a>字符串( Strings )</h2><blockquote><p>解析和操纵字符串的库</p></blockquote><ul><li><a href="https://github.com/jenssegers/agent" target="_blank" rel="noopener">Agent</a> - A PHP desktop/mobile user agent parser, based on Mobiledetect.</li><li><a href="https://github.com/sensiolabs/ansi-to-html" target="_blank" rel="noopener">ANSI to HTML5</a> - 一个将ANSI转换为HTML5的库</li><li><a href="https://github.com/nicolas-grekas/Patchwork-UTF8" target="_blank" rel="noopener">Patchwork UTF-8</a> - 处理UTF-8格式字符串的便携库</li><li><a href="https://github.com/hoaproject/String" target="_blank" rel="noopener">Hoa String</a> - 另一个UTF-8格式的字符串库</li><li><a href="https://github.com/danielstjules/Stringy" target="_blank" rel="noopener">Stringy</a> - 一个多字节支持的字符串操纵库</li><li><a href="https://github.com/mikeemoo/ColorJizz-PHP" target="_blank" rel="noopener">Color Jizz</a> - 一个处理和转换颜色的库</li><li><a href="https://github.com/ramsey/uuid" target="_blank" rel="noopener">UUID</a> - 生成UUIDs的库</li><li><a href="https://github.com/cocur/slugify" target="_blank" rel="noopener">Slugify</a> - 一个将字符串转换为slug格式的库</li><li><a href="https://github.com/jbroadway/urlify" target="_blank" rel="noopener">Urlify</a> - 一个Django URLify.js的PHP端口</li><li><a href="https://github.com/kzykhys/Text" target="_blank" rel="noopener">Text</a> - 一个文本处理库</li><li><a href="https://github.com/jdorn/sql-formatter/" target="_blank" rel="noopener">SQL Formatter</a> - 一个用于格式化SQL语句的库</li><li><a href="https://github.com/tobie/ua-parser/tree/master/php" target="_blank" rel="noopener">UA Parser</a> - 一个解析UA(User Agent)字符串的库</li><li><a href="https://github.com/piwik/device-detector" target="_blank" rel="noopener">Device Detector</a> - 另一个解析UA(User Agent)字符串的库</li><li><a href="https://github.com/serbanghita/Mobile-Detect" target="_blank" rel="noopener">Mobile-Detect</a> - 一个轻量级的检测移动设备的库(包括桌面设备)</li><li><a href="https://github.com/cbschuld/Browser.php" target="_blank" rel="noopener">Browser</a> - 检测关于用户的浏览器环境</li><li><a href="https://github.com/kevinlebrun/colors.php" target="_blank" rel="noopener">colors.php</a> - An easy way to add colors in your CLI scripts.</li></ul><h2 id="数字-Numbers"><a href="#数字-Numbers" class="headerlink" title="数字( Numbers )"></a>数字( Numbers )</h2><blockquote><p>处理数字的库</p></blockquote><ul><li><a href="https://github.com/powder96/numbers.php" target="_blank" rel="noopener">Numbers PHP</a> - 一个处理数字的库</li><li><a href="https://github.com/moontoast/math" target="_blank" rel="noopener">Math</a> - 处理较大数字的库</li><li><a href="https://github.com/gabrielelana/byte-units" target="_blank" rel="noopener">ByteUnits</a> -  一个在二进制和测量系统中解析、格式化和转换字节单位的库</li><li><a href="https://github.com/triplepoint/php-units-of-measure" target="_blank" rel="noopener">PHP Units of Measure</a> - 一个测量单位间转换的库</li><li><a href="https://github.com/Crisu83/php-conversion" target="_blank" rel="noopener">PHP Conversion</a> -  另一个测量单位间转换的库</li><li><a href="https://github.com/giggsey/libphonenumber-for-php" target="_blank" rel="noopener">LibPhoneNumber for PHP</a> -  PHP实现的Google电话号码处理系统库</li><li><a href="https://github.com/ivanakimov/hashids.php" target="_blank" rel="noopener">hashids.php</a> - 用来把整数生成唯一字符串（比如：通过加密解密id来隐藏真实id)</li><li><a href="https://github.com/sschiau/Particle" target="_blank" rel="noopener">Particle</a> - PHP ID Generator | Implementation of Twitter Snowflake ID Generator</li></ul><h2 id="过滤和验证-Filtering-ang-Validation"><a href="#过滤和验证-Filtering-ang-Validation" class="headerlink" title="过滤和验证( Filtering ang Validation )"></a>过滤和验证( Filtering ang Validation )</h2><blockquote><p>用于过滤和验证数据的库</p></blockquote><ul><li><a href="https://github.com/ircmaxell/filterus" target="_blank" rel="noopener">Filterus</a> -  一个简单的PHP过滤库</li><li><a href="https://github.com/Respect/Validation" target="_blank" rel="noopener">Respect Validation</a> - 一个简单的验证库</li><li><a href="https://github.com/vlucas/valitron" target="_blank" rel="noopener">Valitron</a> - 另一个数据验证库</li><li><a href="https://github.com/cakephp/validation" target="_blank" rel="noopener">Cake Validation</a> - 另一个数据验证库 </li><li><a href="https://github.com/illuminate/validation" target="_blank" rel="noopener">Illuminate validation package</a> - Laravel的验证库</li><li><a href="https://github.com/feelinglucky/php-readability" target="_blank" rel="noopener">php-readability</a> - 内容分析算法</li><li><a href="https://github.com/codeguy/Upload" target="_blank" rel="noopener">Upload</a> - 一个处理文件上传和验证的库</li><li><a href="https://github.com/rdohms/DMS-Filter" target="_blank" rel="noopener">DMS Filter</a> - 一个基于标注的过滤库</li><li><a href="https://github.com/romaricdrigon/MetaYaml" target="_blank" rel="noopener">MetaYaml</a> - 支持YAML、JSON和XML的一个模式验证库</li><li><a href="https://github.com/ronanguilloux/IsoCodes" target="_blank" rel="noopener">ISO-codes</a> -  验证不同ISO和ZIP编码的库</li><li><a href="https://github.com/auraphp/Aura.Filter" target="_blank" rel="noopener">aura/filter</a> - Aura 数据验证组件</li><li><a href="https://github.com/symfony/validator" target="_blank" rel="noopener">symfony/validator</a> - Symfony 数据验证组件</li></ul><h2 id="REST和API"><a href="#REST和API" class="headerlink" title="REST和API"></a>REST和API</h2><blockquote><p>用于开发restful APIs的库和Web框架</p></blockquote><ul><li><a href="https://github.com/zfcampus/zf-apigility-skeleton" target="_blank" rel="noopener">Apigility</a> - 一个使用Zend Framework2构建的API构建器</li><li><a href="https://github.com/willdurand/Hateoas" target="_blank" rel="noopener">Hateoas</a> - 一个HATEOAS REST的web服务库</li><li><a href="https://github.com/blongden/hal" target="_blank" rel="noopener">HAL</a> -  一个超文本应用语言（HAL）构建库</li><li><a href="https://github.com/willdurand/Negotiation" target="_blank" rel="noopener">Negotiation</a> - 一个内容协商库</li><li><a href="https://github.com/leedavis81/drest" target="_blank" rel="noopener">Drest</a> -一个将Doctrine实体展现为REST资源结点的库</li><li><a href="https://github.com/Luracast/Restler" target="_blank" rel="noopener">Restler</a> - 一个将PHP方法展现为RESTful web API的轻量级框架</li><li><a href="https://github.com/thephpleague/fractal" target="_blank" rel="noopener">fractal</a> - [最佳实践]数据返回的统一化处理</li><li><a href="https://github.com/Crell/ApiProblem" target="_blank" rel="noopener">api-problem</a> - A simple implementation of the api-problem specification</li><li><a href="https://github.com/webonyx/graphql-php" target="_blank" rel="noopener">graphql-php</a> - 应用层查询语言库</li><li><a href="https://github.com/Youshido/GraphQL" target="_blank" rel="noopener">GraphQL</a> - 另一个应用层查询语言库</li></ul><h2 id="缓存-Caching"><a href="#缓存-Caching" class="headerlink" title="缓存( Caching )"></a>缓存( Caching )</h2><blockquote><p>缓存数据的库</p></blockquote><ul><li><a href="http://www.php.net/manual/en/book.apc.php" target="_blank" rel="noopener">Alternative PHP Cache (APC)</a> - PHP的开源操作码缓存</li><li><a href="https://github.com/doctrine/cache" target="_blank" rel="noopener">Doctrine Cache</a> - 一个缓存库.</li><li><a href="https://github.com/zendframework/zend-cache" target="_blank" rel="noopener">Zend Cache</a> - 另一个缓存库</li><li><a href="https://github.com/cakephp/cache" target="_blank" rel="noopener">Cake Cache</a> - 一个用于缓存的库</li><li><a href="https://github.com/tedivm/Stash" target="_blank" rel="noopener">Stash</a> - 另一个缓存库</li><li><a href="https://github.com/gordalina/cachetool" target="_blank" rel="noopener">CacheTool</a> - 一个清除APC/opcode缓存的命令行工具</li><li><a href="https://github.com/khoaofgod/phpfastcache" target="_blank" rel="noopener">PhpFastCache</a> - PHP 缓存库 </li><li><a href="https://github.com/desarrolla2/Cache" target="_blank" rel="noopener">desarrolla2/Cache</a> - 一个提供多种Adapter的缓存库</li></ul><h2 id="数据结构和存储-Data-Structure-and-Storage"><a href="#数据结构和存储-Data-Structure-and-Storage" class="headerlink" title="数据结构和存储( Data Structure and Storage )"></a>数据结构和存储( Data Structure and Storage )</h2><blockquote><p>实现数据结构和存储技术的库</p></blockquote><ul><li><a href="https://docs.golaravel.com/docs/5.1/collections/" target="_blank" rel="noopener">Illuminate\Support\Collection</a> - Laravel提供的流畅、便利的封装来操控数组数据的集合库</li><li><a href="https://github.com/tightenco/collect" target="_blank" rel="noopener">Collections</a> - 一个从Laravel拆离出的集合库</li><li><a href="https://github.com/morrisonlevi/Ardent" target="_blank" rel="noopener">Ardent</a> - 一个数据结构库</li><li><a href="https://github.com/cakephp/collection" target="_blank" rel="noopener">Cake Collection</a> - 一个简单的集合库</li><li><a href="https://github.com/italolelis/collections" target="_blank" rel="noopener">Collections</a> - 一个集合抽象库</li><li><a href="https://github.com/php-loep/fractal" target="_blank" rel="noopener">Fractal</a> -  一个将复杂数据结构转换为JSON输出的库</li><li><a href="https://github.com/schmittjoh/php-collection" target="_blank" rel="noopener">PHP Collections</a> - 一个简单的集合库</li><li><a href="https://github.com/schmittjoh/serializer" target="_blank" rel="noopener">Serializer</a> - 用于序列化和反序列化数据的库</li><li><a href="https://github.com/zendframework/zend-serializer" target="_blank" rel="noopener">Zend Serializer</a> - 另一个用于序列化和反序列化数据的库</li><li><a href="https://github.com/herrera-io/php-object-storage" target="_blank" rel="noopener">PHP Object Storage</a> - 一个用于对象存储的库</li><li><a href="http://github.com/Wisembly/Totem" target="_blank" rel="noopener">Totem</a> - 一个管理和创建数据修改集的库</li><li><a href="https://github.com/TimeToogo/Pinq" target="_blank" rel="noopener">PINQ</a> - PHP实时Linq库</li><li><a href="https://github.com/netresearch/jsonmapper" target="_blank" rel="noopener">JsonMapper</a> - 一个将内嵌JSON结构映射到PHP类上的库</li><li><a href="https://github.com/nahid/jsonq" target="_blank" rel="noopener">php-jsonq</a> - A PHP query builder for JSON</li></ul><h2 id="通知-Notifications"><a href="#通知-Notifications" class="headerlink" title="通知( Notifications )"></a>通知( Notifications )</h2><blockquote><p>关于通知的库</p></blockquote><ul><li><a href="https://github.com/filp/nod" target="_blank" rel="noopener">Nod</a> - 一个通知库</li><li><a href="https://github.com/wrep/notificato" target="_blank" rel="noopener">Notificato</a> - 一个处理推送消息的库</li><li><a href="https://github.com/Ph3nol/NotificationPusher" target="_blank" rel="noopener">Notification Pusher</a> - 设备推送通知的独立库</li><li><a href="https://github.com/namshi/notificator" target="_blank" rel="noopener">Notificator</a> - 一个轻量级通知库</li></ul><h2 id="部署-Deployment"><a href="#部署-Deployment" class="headerlink" title="部署( Deployment )"></a>部署( Deployment )</h2><blockquote><p>用于项目部署的库</p></blockquote><ul><li><a href="https://github.com/tamagokun/pomander" target="_blank" rel="noopener">Pomander</a> -  一个PHP应用的部署工具</li><li><a href="https://github.com/Anahkiasen/rocketeer" target="_blank" rel="noopener">Rocketeer</a> -  PHP的快速和简单部署器</li><li><a href="https://github.com/laravel/envoy" target="_blank" rel="noopener">Envoy</a> - 使用PHP运行SSH任务的工具</li><li><a href="https://github.com/aerialls/Plum" target="_blank" rel="noopener">Plum</a> - 一个部署库</li><li><a href="https://github.com/deployphp/deployer" target="_blank" rel="noopener">Deployer</a> - 一个部署工具</li><li><a href="https://github.com/meolu/walle-web" target="_blank" rel="noopener">walle-web</a> - 一个开源的web代码发布管理系统</li></ul><h2 id="国际化和本地化-Internationalisation-and-Localisation"><a href="#国际化和本地化-Internationalisation-and-Localisation" class="headerlink" title="国际化和本地化(Internationalisation and Localisation)"></a>国际化和本地化(Internationalisation and Localisation)</h2><blockquote><p>用于国际化(I18n)和本地化(L10n)的库</p></blockquote><ul><li><a href="https://github.com/auraphp/Aura.Intl" target="_blank" rel="noopener">Aura Intl</a></li><li><a href="https://github.com/cakephp/i18n" target="_blank" rel="noopener">Cake I18n</a> - 翻译和本地化消息</li><li><a href="https://github.com/symfony/translation" target="_blank" rel="noopener">symfony/translation</a></li><li><a href="https://github.com/illuminate/translation" target="_blank" rel="noopener">illuminate/translation</a></li><li><a href="https://github.com/oscarotero/Gettext" target="_blank" rel="noopener">Gettext</a> - PHP library to collect and manipulate gettext (.po, .mo, .php, .json, etc)</li><li><a href="http://zendframework.github.io/zend-i18n/translation/" target="_blank" rel="noopener">zend/i18n</a></li></ul><h2 id="第三方API-Third-Party-APIs"><a href="#第三方API-Third-Party-APIs" class="headerlink" title="第三方API( Third Party APIs )"></a>第三方API( Third Party APIs )</h2><blockquote><p>访问第三方API的库</p></blockquote><ul><li><a href="https://github.com/mailgun/mailgun-php" target="_blank" rel="noopener">mailgun-php</a> - Mailgun’s Official SDK for PHP</li><li><a href="https://github.com/overtrue/wechat" target="_blank" rel="noopener">wechat</a> - 让微信开发更简单</li><li><a href="https://github.com/qiniu/php-sdk" target="_blank" rel="noopener">Qiniu/sdk</a> - Qiniu Resource Storage SDK for PHP</li><li><a href="https://github.com/qiniu/qshell" target="_blank" rel="noopener">Qiniu/qshell</a> - qshell是利用七牛文档上公开的API实现的一个方便开发者测试和使用七牛API服务的命令行工具。</li><li><a href="https://github.com/tencentyun/wafer" target="_blank" rel="noopener">Wafer</a> - 快速构建具备弹性能力的微信小程序</li><li><a href="https://github.com/maxmind/GeoIP2-php" target="_blank" rel="noopener">GeoIP2-php</a> - MaxMind GeoIP2 地理位置服务</li><li><a href="https://github.com/PingPlusPlus/pingpp-php" target="_blank" rel="noopener">pingpp-php</a> - ping++聚合支付SDK</li></ul><h2 id="扩展-Extensions"><a href="#扩展-Extensions" class="headerlink" title="扩展( Extensions )"></a>扩展( Extensions )</h2><blockquote><p>帮助构建PHP扩展的库</p></blockquote><ul><li><a href="https://github.com/phalcon/zephir" target="_blank" rel="noopener">Zephir</a> - 用于开发PHP扩展的一种在PHP和C++间的编译语言</li><li><a href="http://www.php-cpp.com/" target="_blank" rel="noopener">PHP CPP</a> - 一个用于开发PHP扩展的C++库</li><li><a href="https://github.com/swoole/PHP-X" target="_blank" rel="noopener">PHP-X</a> - C++ wrapper for Zend API</li></ul><h2 id="PHP-安装-PHP-Installation"><a href="#PHP-安装-PHP-Installation" class="headerlink" title="PHP 安装(PHP Installation)"></a>PHP 安装(PHP Installation)</h2><blockquote><p>帮助安装和管理PHP</p></blockquote><ul><li><a href="http://brew.sh/" target="_blank" rel="noopener">HomeBrew</a> - 一个OSX的包管理工具</li><li><a href="https://github.com/Homebrew/homebrew-php" target="_blank" rel="noopener">HomeBrew PHP</a> - HomeBrew中PHP的安装包</li><li><a href="http://php-osx.liip.ch/" target="_blank" rel="noopener">PHP OSX</a> - 一个OSX中的PHP安装器</li><li><a href="https://github.com/phpbrew/phpbrew" target="_blank" rel="noopener">PHP Brew</a> - 一个PHP版本管理工具和安装器</li><li><a href="https://github.com/CHH/phpenv" target="_blank" rel="noopener">PHP Env</a> - 另一个PHP版本工具</li><li><a href="https://github.com/jubianchi/phpswitch" target="_blank" rel="noopener">PHP Switch</a> - 另一个PHP版本工具</li><li><a href="https://github.com/php-build/php-build" target="_blank" rel="noopener">PHP Build</a> - 另一个PHP版本工具</li><li><a href="http://virtphp.org/" target="_blank" rel="noopener">VirtPHP</a> - 一个创建和管理分离的PHP环境的工具</li></ul><h2 id="开发环境-Development-Environment"><a href="#开发环境-Development-Environment" class="headerlink" title="开发环境(Development Environment)"></a>开发环境(Development Environment)</h2><blockquote><p>创建沙箱开发环境的软件和工具</p></blockquote><ul><li><a href="https://www.docker.com/" target="_blank" rel="noopener">Docker</a> - 一个开源的应用容器引擎</li><li><a href="https://www.vagrantup.com/" target="_blank" rel="noopener">Vagrant</a> - 一个轻便的创建开发环境的工具</li><li><a href="https://www.ansible.com/" target="_blank" rel="noopener">Ansible</a> - 一个简单的业务流程框架</li><li><a href="https://puppetlabs.com/" target="_blank" rel="noopener">Puppet</a> - 服务器自动化框架和应用</li><li><a href="https://puphpet.com/" target="_blank" rel="noopener">PuPHPet</a> - 一个用于构建PHP开发虚拟机工具</li><li><a href="http://getprotobox.com/" target="_blank" rel="noopener">Protobox</a> - 另一个用于构建PHP开发虚拟机工具</li><li><a href="http://phansible.com/" target="_blank" rel="noopener">Phansible</a> - 另一个用于构建PHP开发虚拟机工具</li><li><a href="https://github.com/jason-chang/centstead" target="_blank" rel="noopener">centstead</a> - Laravel local development environment base on vagrant  and homestead</li><li><a href="https://github.com/cytopia/devilbox" target="_blank" rel="noopener">Devilbox</a> - A modern dockerized LAMP and MEAN stack alternative to XAMPP</li><li><a href="https://github.com/laravel/homestead" target="_blank" rel="noopener">Homestead</a> - 基于 Vagrant 的 PHP 开发环境</li><li><a href="https://github.com/laradock/laradock" target="_blank" rel="noopener">Laradock</a> - 基于 Docker 的 PHP 开发环境</li></ul><h2 id="虚拟机-Virtual-Machines"><a href="#虚拟机-Virtual-Machines" class="headerlink" title="虚拟机(Virtual Machines)"></a>虚拟机(Virtual Machines)</h2><blockquote><p>替代的PHP虚拟机</p></blockquote><ul><li><a href="https://github.com/facebook/hhvm" target="_blank" rel="noopener">HHVM</a> - Facebook 开源的PHP虚拟机</li><li><a href="http://hippyvm.com/" target="_blank" rel="noopener">HippyVM</a> - 另一个PHP虚拟机</li></ul><h2 id="开发工具-Integrated-Development-Environment"><a href="#开发工具-Integrated-Development-Environment" class="headerlink" title="开发工具(Integrated Development Environment)"></a>开发工具(Integrated Development Environment)</h2><blockquote><p>支持PHP的IDE</p></blockquote><ul><li><a href="https://netbeans.org/" target="_blank" rel="noopener">Netbeans</a></li><li><a href="https://www.eclipse.org/downloads/" target="_blank" rel="noopener">Eclipse for PHP Developers </a></li><li><a href="http://www.jetbrains.com/phpstorm/" target="_blank" rel="noopener">PhpStorm </a></li></ul><h2 id="Web-应用程序-Web-Applications"><a href="#Web-应用程序-Web-Applications" class="headerlink" title="Web 应用程序(Web Applications)"></a>Web 应用程序(Web Applications)</h2><blockquote><p>基于Web的应用程序和工具</p></blockquote><ul><li><a href="https://3v4l.org/" target="_blank" rel="noopener">3V4L</a> - Online PHP shell</li><li><a href="http://dbv.vizuina.com/" target="_blank" rel="noopener">DBV</a> - 数据库版本控制应用程序</li><li><a href="https://github.com/CoderKungfu/php-queue" target="_blank" rel="noopener">PHP Queue</a> - 管理队列的后端程序</li><li><a href="https://github.com/sj26/mailcatcher" target="_blank" rel="noopener">MailCatcher</a> - 一个接受和查看邮件的程序</li><li><a href="https://github.com/cachethq/cachet" target="_blank" rel="noopener">Cachet</a> - 一个开源的网站状态展示系统(如: status.github.com )</li><li><a href="https://github.com/ErikDubbelboer/phpRedisAdmin" target="_blank" rel="noopener">phpRedisAdmin</a> - Redis 管理工具</li><li><a href="https://github.com/phppgadmin/phppgadmin" target="_blank" rel="noopener">phpPgAdmin </a> - PostgreSQL管理工具</li><li><a href="https://github.com/phpmyadmin/phpmyadmin" target="_blank" rel="noopener">phpMyAdmin</a> - MySQL管理工具</li><li><a href="https://github.com/iwind/rockmongo" target="_blank" rel="noopener">rockmongo</a> - MongoDB管理工具</li><li><a href="https://github.com/getgrav/grav" target="_blank" rel="noopener">Grav</a> - Powerful Flat-File CMS</li><li><a href="https://github.com/piwik/piwik" target="_blank" rel="noopener">Piwik</a> - 网页统计</li><li><a href="https://github.com/YOURLS/YOURLS" target="_blank" rel="noopener">YOURLS</a> - 短网址生成系统</li><li><a href="https://github.com/nextcloud/server" target="_blank" rel="noopener">Nextcloud server</a> - 开源私有云系统(a safe home for all your data)</li></ul><h2 id="基础设施-Infrastructure"><a href="#基础设施-Infrastructure" class="headerlink" title="基础设施(Infrastructure)"></a>基础设施(Infrastructure)</h2><blockquote><p>提供PHP应用程序和服务的基础设施</p></blockquote><ul><li><a href="http://appserver.io/" target="_blank" rel="noopener">appserver.io</a> - 基于PHP的多线程应用程序服务器</li><li><a href="https://github.com/php-pm/php-pm" target="_blank" rel="noopener">php-pm</a> - 进程管理器,增压器和PHP应用程序的负载平衡器</li><li><a href="https://github.com/swooletw/laravel-swoole" target="_blank" rel="noopener">laravel-swoole</a> - 基于 swoole 的高性能HTTP Server</li><li><a href="https://github.com/hhxsv5/laravel-s" target="_blank" rel="noopener">laravel-s</a> - 另一个基于 swoole 的高性能HTTP Server</li></ul><h2 id="数据库中间件-DB-Proxy"><a href="#数据库中间件-DB-Proxy" class="headerlink" title="数据库中间件( DB Proxy )"></a>数据库中间件( DB Proxy )</h2><blockquote><p>用于读写分离、分库分表等</p></blockquote><ul><li><a href="https://github.com/flike/kingshard" target="_blank" rel="noopener">kingshard</a> - 金山开源的数据库中间件</li><li><a href="https://github.com/brucexx/heisenberg" target="_blank" rel="noopener">heisenberg</a> - 百度开源的数据库中间件</li><li><a href="https://github.com/58code/Oceanus" target="_blank" rel="noopener">Oceanus</a> - 58同城开源的数据库中间件</li><li><a href="https://github.com/Qihoo360/Atlas" target="_blank" rel="noopener">Atlas</a> - 360开源数据库中间件</li><li><a href="https://github.com/Meituan-Dianping/DBProxy" target="_blank" rel="noopener">DBProxy</a> - 美团点评基于Atlas的数据库中间件</li><li><a href="http://www.mycat.org.cn/index.html" target="_blank" rel="noopener">Mycat</a></li><li><a href="https://github.com/pingcap/tidb" target="_blank" rel="noopener">TiDB</a> - 分布式数据库</li><li><a href="https://github.com/swoole/mysql-proxy" target="_blank" rel="noopener">mysql-proxy</a> - Swoole开源的数据库中间件</li></ul><h2 id="RPC框架"><a href="#RPC框架" class="headerlink" title="RPC框架"></a>RPC框架</h2><blockquote><p>远程过程调用框架</p></blockquote><ul><li><a href="https://github.com/apache/thrift" target="_blank" rel="noopener">thrift</a> - Apache Thrift</li><li><a href="https://github.com/grpc/grpc" target="_blank" rel="noopener">grpc</a> - Google的开源框架</li><li><a href="https://github.com/allegro/php-protobuf" target="_blank" rel="noopener">protobuf</a></li><li><a href="https://github.com/alibaba/dubbo" target="_blank" rel="noopener">Dubbo</a> - 阿里巴巴开源的RPC框架</li><li><a href="https://github.com/weibocom/motan" target="_blank" rel="noopener">Motan</a> - 微博轻量级RPC框架</li><li><a href="https://github.com/dangdangdotcom/dubbox" target="_blank" rel="noopener">Dubbox</a> - 当当网维护的dubbox</li><li><a href="https://github.com/baidu/sofa-pbrpc" target="_blank" rel="noopener">sofa-pbrpc</a> - 百度开源的sofa-pbrpc</li><li><a href="https://github.com/laruence/yar" target="_blank" rel="noopener">yar</a></li><li>Hprose - 高性能跨语言RPC<ul><li><a href="https://github.com/hprose/hprose-php" target="_blank" rel="noopener">hprose-php</a></li><li><a href="https://github.com/hprose/hprose-swoole" target="_blank" rel="noopener">hprose-swoole</a></li></ul></li><li>其他<ul><li><a href="https://github.com/xcl3721/Dora-RPC" target="_blank" rel="noopener">Dora-RPC</a></li><li><a href="https://github.com/walkor/workerman-jsonrpc/" target="_blank" rel="noopener">workerman-JsonRpc</a></li></ul></li></ul><h2 id="异步网络通信框架-Asynchronous-Event-Driven-Framework"><a href="#异步网络通信框架-Asynchronous-Event-Driven-Framework" class="headerlink" title="异步网络通信框架( Asynchronous Event Driven Framework )"></a>异步网络通信框架( Asynchronous Event Driven Framework )</h2><ul><li><a href="http://www.swoole.com/" target="_blank" rel="noopener">Swoole</a></li><li><a href="https://github.com/walkor/Workerman" target="_blank" rel="noopener">Workerman</a></li><li><a href="http://gearman.info/" target="_blank" rel="noopener">Gearman</a> - 任务分发系统</li><li><a href="https://github.com/kakserpom/phpdaemon" target="_blank" rel="noopener">phpdaemon</a></li><li><a href="https://github.com/reactphp/react" target="_blank" rel="noopener">ReactPHP</a></li><li><a href="https://github.com/amphp/amp" target="_blank" rel="noopener">Amp</a> - A non-blocking concurrency framework for PHP applications. </li><li><a href="https://github.com/spatie/async" target="_blank" rel="noopener">async</a> - Easily run code asynchronously</li><li><a href="https://github.com/kraken-php/framework/" target="_blank" rel="noopener">kraken-php</a> - Asynchronous &amp; Fault-tolerant PHP Framework for Distributed Applications.</li></ul><h2 id="规则引擎-Rules-Engine"><a href="#规则引擎-Rules-Engine" class="headerlink" title="规则引擎( Rules Engine )"></a>规则引擎( Rules Engine )</h2><ul><li><a href="https://github.com/hoaproject/Ruler" target="_blank" rel="noopener">Hoa\Ruler</a> - Hoa项目的规则引擎</li><li><a href="https://github.com/bobthecow/Ruler" target="_blank" rel="noopener">Ruler</a> - 简单的无状态的规则引擎</li><li><a href="https://github.com/tonera/Rules" target="_blank" rel="noopener">Rules</a> - PHP简易规则引擎</li></ul><h2 id="其他-Miscellaneous"><a href="#其他-Miscellaneous" class="headerlink" title="其他( Miscellaneous )"></a>其他( Miscellaneous )</h2><blockquote><p>不属于以上分类的有用的类库和工具</p></blockquote><ul><li><a href="https://github.com/overtrue/pinyin" target="_blank" rel="noopener">pinyin</a> - 汉字转拼音的库</li><li><a href="https://github.com/jifei/Pinyin" target="_blank" rel="noopener">Pinyin</a> - 汉字转拼音的库</li><li><a href="https://github.com/verot/class.upload.php" target="_blank" rel="noopener">class.upload.php</a> - 文件上传处理类</li><li><a href="https://github.com/jasongrimes/php-paginator" target="_blank" rel="noopener">php-paginator</a> - 分页处理类</li><li><a href="https://github.com/brianhaveri/Underscore.php" target="_blank" rel="noopener">Underscore.php</a> - Underscore.js的PHP实现</li><li><a href="https://github.com/pda/flexihash" target="_blank" rel="noopener">Flexihash</a> - 一致性hash库</li><li><a href="https://github.com/Openovate/eden" target="_blank" rel="noopener">Eden</a> - 一个PHP快速开发类库,它包含很多组件用来自动加载、事件驱动、文档系统、缓存、模板、国际化、数据库、web服务、支付网关、装载和云服务技术。</li><li><a href="https://github.com/bupt1987/html-parser" target="_blank" rel="noopener">html-parser</a> - html解析工具</li><li><a href="http://phpcrawl.cuab.de/" target="_blank" rel="noopener">PHPCrawl</a> - PHP的爬虫框架</li><li><a href="https://github.com/jonas/tig" target="_blank" rel="noopener">Tig</a> - 命令行下的 Git 浏览器</li><li><a href="https://github.com/ricoa/copywriting-correct" target="_blank" rel="noopener">copywriting-correct</a> - 中英文文案排版纠正器</li><li><a href="https://github.com/php-ai/php-ml" target="_blank" rel="noopener">PHP-ML</a> - PHP 机器学习库</li><li><a href="https://github.com/botman/botman" target="_blank" rel="noopener">BotMan</a> - 聊天机器人库</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;收集整理一些常用的PHP类库, 资源以及技巧. 以便在工作中迅速的查找所需…&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;这个列表中的内容有来自 &lt;a href=&quot;https://github.com/ziadoz/awesome-php&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
      <category term="PHP相关" scheme="https://syhyz1990.github.io/categories/PHP%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="PHP" scheme="https://syhyz1990.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>前端组件库</title>
    <link href="https://syhyz1990.github.io/wiki/front-end-component-library.html"/>
    <id>https://syhyz1990.github.io/wiki/front-end-component-library.html</id>
    <published>2017-06-20T08:20:03.000Z</published>
    <updated>2018-06-05T08:23:06.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端组件库"><a href="#前端组件库" class="headerlink" title="前端组件库"></a>前端组件库</h1><blockquote><p>搭建web app常用的样式/组件等收集列表(移动优先)</p></blockquote><h2 id="0-前端自动化-Workflow"><a href="#0-前端自动化-Workflow" class="headerlink" title="0. 前端自动化(Workflow)"></a>0. 前端自动化(Workflow)</h2><ul><li>前端构建工具<ul><li><a href="https://github.com/webpack/webpack" target="_blank" rel="noopener">Webpack - module bundler</a></li><li><a href="https://github.com/yeoman/yeoman" target="_blank" rel="noopener">Yeoman - a set of tools for automating development workflow</a> </li><li><a href="http://gulpjs.com/" target="_blank" rel="noopener">gulp - The streaming build system</a> <ul><li><a href="https://github.com/Platform-CUF/use-gulp" target="_blank" rel="noopener">use-gulp</a></li></ul></li><li><a href="http://gruntjs.com/" target="_blank" rel="noopener">grunt - the JavaScript Task Runner</a></li><li><a href="https://github.com/fex-team/fis" target="_blank" rel="noopener">F.I.S - 前端集成解决方案</a></li><li><a href="https://github.com/google/web-starter-kit" target="_blank" rel="noopener">Web Starter Kit - 一个Google 提供的帮助开发者快速设置项目的工具集</a></li><li><a href="https://github.com/tj/node-prune" target="_blank" rel="noopener">node-prune</a> - Remove unnecessary files from node_modules</li></ul></li><li>前端模块管理器<ul><li><a href="http://bower.io/" target="_blank" rel="noopener">Bower - A package manager for the web</a></li><li><a href="http://browserify.org/" target="_blank" rel="noopener">Browserify</a></li><li><a href="https://github.com/componentjs/component" target="_blank" rel="noopener">Component</a></li><li><a href="http://duojs.org/" target="_blank" rel="noopener">Duo</a></li><li><a href="http://requirejs.org/" target="_blank" rel="noopener">RequireJS</a></li><li><a href="http://seajs.org/" target="_blank" rel="noopener">Sea.js</a></li><li><a href="https://github.com/getify/LABjs" target="_blank" rel="noopener">LABjs - 文件加载器</a></li><li><a href="https://github.com/css-modules/css-modulesify" target="_blank" rel="noopener">css-modulesify - CSS模块加载器</a></li></ul></li><li>css预处理器<ul><li><a href="http://lesscss.org/" target="_blank" rel="noopener">Less - Less is More , Than CSS</a> </li><li><a href="http://sass-lang.com/" target="_blank" rel="noopener">Sass - Syntactically Awesome Style Sheets</a></li><li><a href="http://learnboost.github.io/stylus/" target="_blank" rel="noopener">Stylus - Expressive, dynamic, robust CSS</a></li></ul></li><li>前端性能分析工具<ul><li><a href="https://github.com/macbre/analyze-css" target="_blank" rel="noopener">analyze-css - CSS 选择器的复杂度和性能分析器</a></li></ul></li></ul><h2 id="1-前端UI框架-Frameworks"><a href="#1-前端UI框架-Frameworks" class="headerlink" title="1. 前端UI框架(Frameworks)"></a>1. 前端UI框架(Frameworks)</h2><ul><li><a href="https://github.com/twbs/bootstrap" target="_blank" rel="noopener">Bootstrap</a></li><li><a href="https://github.com/zurb/foundation" target="_blank" rel="noopener">Foundation</a></li><li><a href="http://amazeui.org/" target="_blank" rel="noopener">Amaze UI</a></li><li><a href="https://github.com/semantic-org/semantic-ui" target="_blank" rel="noopener">Semantic UI</a></li><li><a href="http://purecss.io/" target="_blank" rel="noopener">Pure CSS</a></li><li><a href="https://github.com/topcoat/topcoat" target="_blank" rel="noopener">topcoat</a></li><li><a href="https://github.com/uikit/uikit" target="_blank" rel="noopener">UIkit</a></li><li><a href="https://github.com/callemall/material-ui" target="_blank" rel="noopener">Material UI</a></li><li><a href="https://github.com/Dogfalo/materialize" target="_blank" rel="noopener">Materialize - 一个基于 Material Design 的 CSS 框架</a></li><li><a href="http://www.idangero.us/framework7" target="_blank" rel="noopener">Framework7</a></li><li><a href="https://github.com/dcloudio/mui" target="_blank" rel="noopener">mui</a></li><li><a href="http://ionicframework.com/" target="_blank" rel="noopener">ionic framework</a></li><li><a href="https://github.com/jaunesarmiento/fries" target="_blank" rel="noopener">Fries</a></li><li><a href="http://jquerymobile.com/" target="_blank" rel="noopener">jQuery Mobile</a></li><li><a href="https://github.com/kikinteractive/app" target="_blank" rel="noopener">App.js</a></li><li><a href="https://github.com/OfficeDev/Office-UI-Fabric" target="_blank" rel="noopener">Office UI Fabric - 微软 Office 前端团队的框架</a></li><li><a href="https://www.polymer-project.org" target="_blank" rel="noopener">Polymer - Google发布的Web组件构建框架</a></li><li><a href="https://github.com/sentsin/layui/" target="_blank" rel="noopener">Layui - 经典模块化前端UI框架</a></li></ul><h2 id="2-JavaScript-框架汇总"><a href="#2-JavaScript-框架汇总" class="headerlink" title="2. JavaScript 框架汇总"></a>2. JavaScript 框架汇总</h2><ul><li>JavaScript 框架<ul><li><a href="https://github.com/facebook/react" target="_blank" rel="noopener">react</a><ul><li><a href="https://github.com/ant-design/ant-design" target="_blank" rel="noopener">ant-design</a> - A UI Design Language</li><li><a href="https://github.com/ant-design/ant-design-mobile" target="_blank" rel="noopener">ant-design-mobile</a> - A configurable Mobile UI</li><li><a href="https://github.com/ant-design/ant-design-pro" target="_blank" rel="noopener">ant-design-pro</a> - An out-of-box UI solution for enterprise applications</li></ul></li><li><a href="https://github.com/angular/angular" target="_blank" rel="noopener">Angular</a></li><li><a href="https://github.com/yyx990803/vue" target="_blank" rel="noopener">Vue.js - 数据驱动的组件化MVVM库(用于创建web交互界面和数据双向绑定)</a><ul><li><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">awesome-vue</a></li><li><a href="http://element.eleme.io/#/" target="_blank" rel="noopener">Element - 基于 Vue 2.0 构建了一套完整的桌面 UI 组件库</a></li><li><a href="https://github.com/vuejs/vuex" target="_blank" rel="noopener">Vuex - 一个专门为 Vue.js 应用设计的状态管理架构</a></li><li><a href="https://github.com/youzan/vant/blob/dev/README.zh-CN.md" target="_blank" rel="noopener">vant - 轻量、可靠的移动端 Vue 组件库，商城端</a></li><li><a href="https://github.com/AT-UI/at-ui/blob/master/README.zh-CN.md" target="_blank" rel="noopener">at-ui - 一款基于 Vue.js 2.0 的前端 UI 组件库，主要用于快速开发 PC 网站产品</a></li><li><a href="https://github.com/ElemeFE/mint-ui" target="_blank" rel="noopener">Mint UI：基于 Vue.js 的移动端组件库</a></li><li><a href="https://github.com/airyland/vux" target="_blank" rel="noopener">Vux - 基于 Vue 和 WeUI 的 UI 组件库</a></li><li><a href="https://github.com/wangdahoo/vonic" target="_blank" rel="noopener">vonic - 基于 Vue.js 和 Ionic 的移动 UI 组件库</a></li><li><a href="https://github.com/vuetifyjs/vuetify" target="_blank" rel="noopener">vuetify - vue2.0组件库</a></li><li><a href="https://github.com/iview/iview" target="_blank" rel="noopener">iView - 一套基于 Vue.js 的高质量 UI 组件库,主要用于快速开发 PC 网站后台</a></li><li><a href="https://github.com/kazupon/vue-i18n" target="_blank" rel="noopener">vue-i18n</a></li></ul></li><li><a href="https://github.com/developit/preact/" target="_blank" rel="noopener">preact</a> - React 的 3kb 轻量化方案，拥有同样的 ES6 API</li><li><a href="https://github.com/jquery/jquery" target="_blank" rel="noopener">jQuery</a></li><li><a href="https://github.com/jashkenas/backbone" target="_blank" rel="noopener">Backbone.js</a></li><li><a href="https://github.com/emberjs/ember.js" target="_blank" rel="noopener">ember.js</a></li><li><a href="https://github.com/ractivejs/ractive" target="_blank" rel="noopener">Ractive.js</a></li><li><a href="https://github.com/kissyteam/kissy" target="_blank" rel="noopener">KISSY</a></li><li><a href="https://github.com/madrobby/zepto" target="_blank" rel="noopener">Zepto.js</a></li><li><a href="http://vanilla-js.com/" target="_blank" rel="noopener">Vanilla JS</a></li><li><a href="http://canjs.com/guides/Utilities.html" target="_blank" rel="noopener">Can.js</a></li><li><a href="https://github.com/RubyLouvre/avalon" target="_blank" rel="noopener">Avalon</a></li><li><a href="https://github.com/box/t3js/" target="_blank" rel="noopener">T3 JavaScript Framework - 一个用于搭建大型Web应用的客户端JS框架</a></li><li><a href="https://github.com/astoilkov/jsblocks" target="_blank" rel="noopener">jsblocks - Better MV-ish Framework 从简单 UI 到复杂单页应用都适用</a></li></ul></li><li>轻量级JavaScript框架<ul><li><a href="https://github.com/remy/min.js" target="_blank" rel="noopener">Min.js - Super minimal selector and event library</a> </li><li><a href="https://github.com/n33/skel" target="_blank" rel="noopener">skel.js - A lightweight responsive framework</a></li><li><a href="https://github.com/bendc/sprint" target="_blank" rel="noopener">Sprint.js - 一个高性能、小体积的 DOM 操作库</a></li><li><a href="https://github.com/knockout/knockout" target="_blank" rel="noopener">knockout</a></li><li><a href="https://github.com/ariya/phantomjs/" target="_blank" rel="noopener">PhantomJS - 一个基于 WebKit 的服务器端 JavaScript API</a></li></ul></li><li><p>函数式反应型编程框架 FRP (Functional Reactive Programming) library</p><ul><li><a href="https://github.com/baconjs/bacon.js/" target="_blank" rel="noopener">Bacon.js - A small functional reactive programming lib for JavaScript.</a> </li><li><a href="http://www.flapjax-lang.org/" target="_blank" rel="noopener">Flapjax - 一个支持FRP的JavaScript框架</a></li></ul></li><li><p>混合开发框架</p><ul><li><a href="https://electronjs.org/" target="_blank" rel="noopener">Electron</a> - 使用 JavaScript, HTML 和 CSS 构建跨平台的桌面应用</li><li><a href="https://facebook.github.io/react-native/" target="_blank" rel="noopener">React Native</a> - 使用JavaScript和React构建原生手机APP</li><li><a href="https://github.com/chentsulin/electron-react-boilerplate" target="_blank" rel="noopener">electron-react-boilerplate</a> - Electron应用程序样板(基于React、Redux、React Router、Webpack、React Transform HMR用于应用程序快速开发)</li></ul></li><li><p>微信小程序开发库</p><ul><li><a href="https://github.com/Tencent/weui-wxss" target="_blank" rel="noopener">weui-wxss</a> - WeUI for 小程序 为微信小程序量身设计</li><li><a href="https://github.com/Tencent/wepy" target="_blank" rel="noopener">wepy</a> - 小程序组件化开发框架</li><li><a href="https://github.com/youzan/zanui-weapp" target="_blank" rel="noopener">zanui-weapp</a> - 高颜值、好用、易扩展的微信小程序 UI 库，Powered by 有赞</li><li><a href="https://github.com/Meituan-Dianping/mpvue" target="_blank" rel="noopener">mpvue</a> - 基于 Vue.js 的小程序开发框架，从底层支持 Vue.js 语法和构建工具体系</li><li><a href="https://github.com/meili/minui" target="_blank" rel="noopener">minui</a> - 基于规范的小程序 UI 组件库，自定义标签组件，简洁、易用、工具化</li></ul></li><li><p>JavaScript 工具库</p><ul><li><a href="https://github.com/jashkenas/underscore" target="_blank" rel="noopener">underscore.js</a></li><li><a href="https://github.com/epeli/underscore.string" target="_blank" rel="noopener">Underscore.string.js字符串操作库</a></li><li><a href="https://github.com/leecrossley/functional-js/" target="_blank" rel="noopener">functional.js</a></li><li><a href="https://github.com/lodash/lodash" target="_blank" rel="noopener">Lo-Dash - A JavaScript utility library</a></li><li><a href="https://github.com/dtao/lazy.js" target="_blank" rel="noopener">Lazy.js - a functional utility library for JavaScript</a></li><li><a href="https://github.com/eliperelman/fn.js" target="_blank" rel="noopener">Fn.js</a></li><li><a href="https://github.com/gwendall/way.js" target="_blank" rel="noopener">Way.js - 双向数据绑定库</a></li><li><a href="https://github.com/Xaxis/boiler" target="_blank" rel="noopener">boiler - a utility library that makes tasks in JavaScript easier</a></li><li>快捷键操作<ul><li><a href="https://github.com/RobertWHurst/KeyboardJS" target="_blank" rel="noopener">KeyboardJS</a> - A JavaScript library for binding keyboard combos without the pain of key codes and key combo conflicts.</li><li><a href="https://github.com/ccampbell/mousetrap" target="_blank" rel="noopener">mousetrap</a> - Simple library for handling keyboard shortcuts in Javascript</li><li><a href="https://github.com/bitwalker/keys.js" target="_blank" rel="noopener">Keys.js - 应用快捷键</a></li><li><a href="https://github.com/mycolorway/simple-hotkeys" target="_blank" rel="noopener">simple-hotkeys</a></li><li><a href="https://github.com/jeresig/jquery.hotkeys" target="_blank" rel="noopener">jquery.hotkeys</a></li><li><a href="https://github.com/ccampbell/mousetrap" target="_blank" rel="noopener">Mousetrap - 键盘快捷键操作</a></li></ul></li><li><a href="https://github.com/AlloyTeam/AlloyLever" target="_blank" rel="noopener">AlloyLever - 移动web开发者工具面板</a></li></ul></li></ul><h2 id="3-前端游戏框架"><a href="#3-前端游戏框架" class="headerlink" title="3. 前端游戏框架"></a>3. 前端游戏框架</h2><ul><li><a href="https://github.com/cocos2d/cocos2d-html5" target="_blank" rel="noopener">cocos2d-html5</a></li><li><a href="http://www.egret-labs.org/" target="_blank" rel="noopener">Egret Engine</a></li><li><a href="https://github.com/digitalfruit/limejs" target="_blank" rel="noopener">LimeJS</a></li><li><a href="https://github.com/CreateJS/EaselJS" target="_blank" rel="noopener">EaselJS</a></li><li><a href="https://github.com/mrdoob/three.js" target="_blank" rel="noopener">three.js</a></li><li><a href="https://github.com/AlloyTeam/AlloyStick" target="_blank" rel="noopener">AlloyStick</a></li><li><a href="https://github.com/finscn/The-Best-JS-Game-Framework" target="_blank" rel="noopener">The-Best-JS-Game-Framework</a></li><li><a href="https://github.com/RSamaium/CanvasEngine" target="_blank" rel="noopener">CanvasEngine</a></li><li><a href="https://github.com/cykod/Quintus" target="_blank" rel="noopener">Quintus</a></li><li><a href="https://github.com/piqnt/stage.js/" target="_blank" rel="noopener">Stage.js</a></li><li><a href="https://github.com/photonstorm/phaser/" target="_blank" rel="noopener">phaser - 一个快速、免费、开源的 HTML5 游戏框架</a></li></ul><h2 id="4-ui组件库-CSS-Framework"><a href="#4-ui组件库-CSS-Framework" class="headerlink" title="4. ui组件库(CSS Framework)"></a>4. ui组件库(CSS Framework)</h2><ul><li><a href="https://github.com/weui/weui" target="_blank" rel="noopener">WeUI - 微信官方UI库</a><ul><li><a href="https://github.com/lihongxun945/jquery-weui" target="_blank" rel="noopener">jQuery WeUI - WeUI的jQuery版本</a></li></ul></li><li><a href="https://github.com/frozenui/frozenui" target="_blank" rel="noopener">FrozenUI - 腾讯移动端组件库</a></li><li><a href="https://github.com/LFeh/css-components/" target="_blank" rel="noopener">Pure CSS Components</a></li><li><a href="https://github.com/adamschwartz/magic-of-css" target="_blank" rel="noopener">magic-of-css</a></li><li><a href="https://github.com/primer/primer" target="_blank" rel="noopener">Primer - The CSS toolkit and guidelines that power GitHub</a></li><li><a href="https://github.com/lihongxun945/light7" target="_blank" rel="noopener">light7 - A Light and easy to use UI Lib</a></li><li><a href="https://github.com/picturepan2/spectre" target="_blank" rel="noopener">Spectre.css - 轻量、响应式的现代 CSS 框架</a></li><li><a href="https://github.com/xcatliu/mobi.css" target="_blank" rel="noopener">mobi.css - 一个轻量、灵活的移动端 CSS 框架</a></li></ul><h2 id="5-基础模版"><a href="#5-基础模版" class="headerlink" title="5. 基础模版"></a>5. 基础模版</h2><ul><li>浏览器统一(Cross Browser)<ul><li><a href="https://github.com/h5bp/html5-boilerplate" target="_blank" rel="noopener">HTML5 BOILERPLATE</a></li><li><a href="https://github.com/Modernizr/Modernizr" target="_blank" rel="noopener">Modernizr</a></li><li><a href="https://github.com/necolas/normalize.css/" target="_blank" rel="noopener">Normalize.css</a></li><li><a href="https://github.com/afarkas/html5shiv" target="_blank" rel="noopener">HTML5 Shiv - 让ie浏览器成为支持html5的浏览器的解决方法</a></li><li><a href="https://github.com/imsky/cssFx" target="_blank" rel="noopener">cssFx - 为CSS3自动生成浏览器前缀</a></li><li><a href="https://github.com/LeaVerou/prefixfree" target="_blank" rel="noopener">-prefix-free - Break free from CSS prefix hell</a></li><li><a href="https://github.com/zhangxinxu/ieBetter.js" target="_blank" rel="noopener">ieBetter.js - make ie browser like a morden browser main for ie6~ie8</a></li><li><a href="https://github.com/stefanpenner/es6-promise" target="_blank" rel="noopener">es6-promise - Promise 对象的兼容</a></li></ul></li><li>响应式<ul><li><a href="https://github.com/ResponsiveBP/Responsive" target="_blank" rel="noopener">Responsive - 响应式布局</a></li><li><a href="https://github.com/WickyNilliams/enquire.js" target="_blank" rel="noopener">Enquire.js - Awesome Media Queries in JavaScript</a></li><li><a href="https://github.com/kombai/freewall" target="_blank" rel="noopener">Free Wall - 创建桌面，移动和平板的动态网格布局</a></li></ul></li><li>适配方案<ul><li><a href="https://github.com/unbug/generator-webappstarter/blob/master/app/templates/app/src/util/MetaHandler.js" target="_blank" rel="noopener">MetaHandler.js：移动端适配各种屏幕无痛工具脚本</a></li><li><a href="https://github.com/amfe/lib-flexible" target="_blank" rel="noopener">lib-flexible: 移动端自适应方案</a><ul><li><a href="https://github.com/amfe/article/issues/17?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="noopener">参考: 使用Flexible实现手淘H5页面的终端适配</a></li><li><a href="http://ufologist.github.io/responsive-page/others-responsive/flexible.html" target="_blank" rel="noopener">flexible demo 1</a></li><li><a href="http://huodong.m.taobao.com/act/yibo.html" target="_blank" rel="noopener">flexible demo 2</a></li></ul></li><li><a href="https://github.com/peunzhang/pageResponse" target="_blank" rel="noopener">pageResponse</a></li><li><a href="https://github.com/ufologist/responsive-page" target="_blank" rel="noopener">responsive-page</a></li></ul></li></ul><h2 id="6-排版"><a href="#6-排版" class="headerlink" title="6. 排版"></a>6. 排版</h2><ul><li><a href="https://github.com/lepture/yue.css" target="_blank" rel="noopener">yue.css</a></li><li><a href="https://github.com/sofish/typo.css" target="_blank" rel="noopener">typo.css</a></li><li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines" target="_blank" rel="noopener">chinese-copywriting-guidelines - 中文文案排版指南</a> </li></ul><h2 id="7-网格系统"><a href="#7-网格系统" class="headerlink" title="7. 网格系统"></a>7. 网格系统</h2><ul><li><a href="https://github.com/aekaplan/grid" target="_blank" rel="noopener">grid</a></li><li><a href="https://github.com/kristoferjoseph/flexboxgrid" target="_blank" rel="noopener">Flexbox Grid</a></li><li><a href="https://github.com/DrewDahlman/Mason" target="_blank" rel="noopener">MasonJS - creating a perfect grid</a></li></ul><h2 id="8-路由和链接-Routing-And-URLs"><a href="#8-路由和链接-Routing-And-URLs" class="headerlink" title="8. 路由和链接(Routing And URLs)"></a>8. 路由和链接(Routing And URLs)</h2><ul><li><a href="https://github.com/browserstate/history.js" target="_blank" rel="noopener">History.js - gracefully supports the HTML5 History/State APIs</a></li><li><a href="https://github.com/defunkt/jquery-pjax" target="_blank" rel="noopener">jquery-pjax - pushState+ajax</a></li><li><a href="https://github.com/asual/jquery-address" target="_blank" rel="noopener">jquery-address - Deep Linking</a></li><li><a href="https://github.com/visionmedia/page.js" target="_blank" rel="noopener">page.js - Micro client-side router</a></li><li><a href="https://github.com/millermedeiros/crossroads.js" target="_blank" rel="noopener">crossroads.js</a></li><li><a href="https://github.com/javve/hash.js" target="_blank" rel="noopener">hash.js</a>  </li><li><a href="https://github.com/mtrpcic/pathjs" target="_blank" rel="noopener">path.js</a></li><li><a href="https://github.com/flatiron/director" target="_blank" rel="noopener">director.js - 前端路由库(通过#符号进行路径组织,结合vue的component可进行单页的局部模块刷新)</a></li><li><a href="https://github.com/medialize/URI.js" target="_blank" rel="noopener">URI.js</a></li><li><a href="https://github.com/grobmeier/Roadcrew.js" target="_blank" rel="noopener">Roadcrew.js</a></li><li><a href="https://github.com/pid/speakingurl" target="_blank" rel="noopener">SpeakingURL</a></li><li><a href="https://github.com/YanagiEiichi/uparams" target="_blank" rel="noopener">uparams - An URL params parser</a></li><li><a href="https://github.com/leeluolee/stateman" target="_blank" rel="noopener">StateMan - 一个处理深层次单页系统的路由库</a></li><li><a href="https://github.com/ljharb/qs" target="_blank" rel="noopener">qs - A querystring parser with nesting support</a></li></ul><h2 id="9-UA-识别"><a href="#9-UA-识别" class="headerlink" title="9. UA 识别"></a>9. UA 识别</h2><ul><li><a href="https://github.com/hotoo/detector" target="_blank" rel="noopener">detector</a></li><li><a href="https://github.com/faisalman/ua-parser-js/" target="_blank" rel="noopener">ua-parser-js</a></li><li><a href="https://github.com/bestiejs/platform.js/" target="_blank" rel="noopener">platform.js</a></li></ul><h2 id="10-表单处理"><a href="#10-表单处理" class="headerlink" title="10. 表单处理"></a>10. 表单处理</h2><h3 id="10-1-表单验证-Form-Validator-表单提示"><a href="#10-1-表单验证-Form-Validator-表单提示" class="headerlink" title="10.1 表单验证(Form Validator)/表单提示"></a>10.1 表单验证(Form Validator)/表单提示</h3><ul><li><a href="https://github.com/niceue/validator" target="_blank" rel="noopener">Validator</a></li><li><a href="https://github.com/guillaumepotier/Parsley.js" target="_blank" rel="noopener">Parsley</a></li><li><a href="https://github.com/malsup/form" target="_blank" rel="noopener">jquery.form.js - jQuery Form Plugin</a></li><li><a href="https://github.com/haiercdboy/Validform" target="_blank" rel="noopener">Validform</a></li><li><a href="https://github.com/sofish/validator.js" target="_blank" rel="noopener">validator.js</a></li><li><a href="https://github.com/jzaefferer/jquery-validation" target="_blank" rel="noopener">jquery-validation - jQuery Validation Plugin</a></li><li><a href="https://github.com/victorjonsson/jQuery-Form-Validator" target="_blank" rel="noopener">formvalidator.js</a></li><li><a href="http://github.com/Colourity/Fort.js" target="_blank" rel="noopener">Fort.js – 表单填写进度提示</a></li><li><a href="https://github.com/mailcheck/mailcheck" target="_blank" rel="noopener">mailcheck - 用于检测email地址的域名</a></li><li><a href="https://github.com/clubdesign/floatlabels.js" target="_blank" rel="noopener">Floatlable.js - 输入时显示placeholder文本</a></li><li><a href="https://github.com/peachananr/label_better" target="_blank" rel="noopener">jQuery Label Better</a></li><li><a href="https://github.com/ppoffice/validator.js" target="_blank" rel="noopener">validator.js</a></li></ul><h3 id="10-2-lt-input-gt-相关"><a href="#10-2-lt-input-gt-相关" class="headerlink" title="10.2 &lt; input &gt; 相关"></a>10.2 &lt; input &gt; 相关</h3><ul><li><a href="https://github.com/nosir/cleave.js" target="_blank" rel="noopener">cleave.js - 格式化你的输入内容</a></li></ul><h3 id="10-3-lt-select-gt-相关"><a href="#10-3-lt-select-gt-相关" class="headerlink" title="10.3 &lt; select &gt; 相关"></a>10.3 &lt; select &gt; 相关</h3><ul><li><a href="https://github.com/harvesthq/chosen" target="_blank" rel="noopener">Chosen</a></li><li><a href="https://github.com/select2/select2" target="_blank" rel="noopener">Select2</a></li><li><a href="https://github.com/silviomoreto/bootstrap-select" target="_blank" rel="noopener">bootstrap-select</a></li></ul><h3 id="10-4-单选框-复选框相关"><a href="#10-4-单选框-复选框相关" class="headerlink" title="10.4 单选框/复选框相关"></a>10.4 单选框/复选框相关</h3><ul><li><a href="https://github.com/fronteed/iCheck" target="_blank" rel="noopener">iCheck - 增强复选框和单选按钮</a></li><li><a href="https://github.com/abpetkov/switchery" target="_blank" rel="noopener">Switchery - iOS 7 style switches for your checkboxes</a></li></ul><h3 id="10-5-上传组件"><a href="#10-5-上传组件" class="headerlink" title="10.5 上传组件"></a>10.5 上传组件</h3><ul><li><a href="https://github.com/blueimp/jQuery-File-Upload" target="_blank" rel="noopener">jQuery File Upload Plugin</a></li><li><a href="http://fex-team.github.io/webuploader/" target="_blank" rel="noopener">百度 Web Uploader</a></li><li><a href="http://www.uploadify.com/" target="_blank" rel="noopener">uploadify</a></li><li><a href="https://github.com/moxiecode/plupload" target="_blank" rel="noopener">Plupload</a></li><li><a href="http://fineuploader.com/index.html" target="_blank" rel="noopener">Fine Uploader</a></li><li><a href="https://github.com/aralejs/upload" target="_blank" rel="noopener">arale-upload - 轻量级 iframe and html5 file uploader</a></li><li><a href="https://github.com/enyo/dropzone" target="_blank" rel="noopener">Dropzone.js - 文件上传库(可获取文件mime, 文件大小等; 针对图片可生成缩略图,获取图片宽度,高度)</a></li><li><a href="https://github.com/flowjs/flow.js" target="_blank" rel="noopener">flow.js</a></li><li><a href="https://github.com/think2011/localResizeIMG" target="_blank" rel="noopener">localResizeIMG - 前端本地客户端压缩图片，兼容IOS，Android，PC</a></li><li><a href="https://github.com/mycolorway/simple-uploader" target="_blank" rel="noopener">simple-uploader</a></li></ul><h3 id="10-6-日期选择"><a href="#10-6-日期选择" class="headerlink" title="10.6 日期选择"></a>10.6 日期选择</h3><ul><li><a href="https://github.com/nhnent/tui.calendar" target="_blank" rel="noopener">tui.calendar</a> - A JavaScript calendar that everything you need.</li><li><a href="https://github.com/smalot/bootstrap-datetimepicker" target="_blank" rel="noopener">Both Date and Time picker widget based on twitter bootstrap</a></li><li><a href="http://gmu.baidu.com/demo/widget/calendar/calendar.html" target="_blank" rel="noopener">GMU 日历组件</a></li><li><a href="https://github.com/acidb/mobiscroll" target="_blank" rel="noopener">Mobiscroll</a></li><li><a href="https://github.com/dbushell/Pikaday" target="_blank" rel="noopener">Pikaday - 日期选择器</a></li><li>价格日历<ul><li><a href="https://github.com/fugm/PriceCalendar" target="_blank" rel="noopener">PriceCalendar - 酒店价格日历</a><ul><li><a href="http://fgm.cc/learn/calendar/price-calendar/api.html" target="_blank" rel="noopener">API文档</a>  </li><li><a href="http://fgm.cc/learn/calendar/price-calendar/" target="_blank" rel="noopener">DEMO</a></li></ul></li><li><a href="https://github.com/wind-stone/price-calendar" target="_blank" rel="noopener">price-calendar - 价格日历</a></li><li><a href="https://github.com/zhangyi5628/price_calendar" target="_blank" rel="noopener">price_calendar - 含有商品价格的日历控件</a></li></ul></li></ul><h3 id="10-7-取色"><a href="#10-7-取色" class="headerlink" title="10.7 取色"></a>10.7 取色</h3><ul><li><a href="https://github.com/mjolnic/bootstrap-colorpicker" target="_blank" rel="noopener">Colorpicker plugin for Twitter Bootstrap</a></li><li><a href="https://github.com/matkl/average-color" target="_blank" rel="noopener">average-color - Get Average Color of Image</a></li></ul><h3 id="10-8-标签插件-Tag"><a href="#10-8-标签插件-Tag" class="headerlink" title="10.8 标签插件(Tag)"></a>10.8 标签插件(Tag)</h3><ul><li><a href="https://github.com/sniperwolf/taggingJS" target="_blank" rel="noopener">TaggingJS – 可以灵活定制的 jQuery 标签系统插件</a></li><li><a href="https://github.com/brianreavis/selectize.js" target="_blank" rel="noopener">selectize.js</a></li><li><a href="https://github.com/timschlechter/bootstrap-tagsinput/" target="_blank" rel="noopener">Bootstrap Tags Input</a></li><li><a href="https://github.com/xoxco/jQuery-Tags-Input" target="_blank" rel="noopener">jQuery-Tags-Input</a></li></ul><h3 id="10-9-自动完成插件"><a href="#10-9-自动完成插件" class="headerlink" title="10.9 自动完成插件"></a>10.9 自动完成插件</h3><ul><li><a href="https://github.com/ichord/At.js" target="_blank" rel="noopener">At.js - 一个Twitter/微博样式的@自动完成插件</a></li><li><a href="https://github.com/yuku-t/jquery-textcomplete" target="_blank" rel="noopener">jquery-textcomplete - 智能搜索提示框/自动补全</a></li><li><a href="https://github.com/twitter/typeahead.js" target="_blank" rel="noopener">typeahead.js - a fast and fully-featured autocomplete library</a></li></ul><h3 id="10-10-样式修正"><a href="#10-10-样式修正" class="headerlink" title="10.10 样式修正"></a>10.10 样式修正</h3><ul><li><a href="https://github.com/jackmoore/autosize" target="_blank" rel="noopener">autosize - 使文本框自动适应所输入的内容</a></li></ul><h2 id="11-图表绘制-图形库-Graphics"><a href="#11-图表绘制-图形库-Graphics" class="headerlink" title="11. 图表绘制/图形库(Graphics)"></a>11. 图表绘制/图形库(Graphics)</h2><ul><li><a href="https://github.com/highslide-software/highcharts.com" target="_blank" rel="noopener">Highcharts</a></li><li><a href="https://github.com/nnnick/Chart.js" target="_blank" rel="noopener">Chart.js - Simple HTML5 Charts using Canvas</a></li><li><a href="https://github.com/ecomfe/echarts" target="_blank" rel="noopener">百度 ECharts</a></li><li><a href="https://github.com/gionkunz/chartist-js" target="_blank" rel="noopener">Chartist.js</a></li><li><a href="https://github.com/mbostock/d3" target="_blank" rel="noopener">D3.js - A JavaScript visualization library for HTML and SVG.</a><ul><li><a href="https://github.com/square/intro-to-d3" target="_blank" rel="noopener">intro-to-d3 - a D3.js tutorial</a> </li></ul></li><li><a href="https://github.com/uxebu/bonsai" target="_blank" rel="noopener">Bonsai - 一个功能强大的JavaScript图形库</a></li><li><a href="https://github.com/fastly/epoch/" target="_blank" rel="noopener">epoch - 数据图表可视化</a></li><li><a href="https://github.com/almende/vis" target="_blank" rel="noopener">Vis.js</a></li><li><a href="https://github.com/forio/contour" target="_blank" rel="noopener">Coutour.js</a></li><li><a href="https://github.com/ecomfe/zrender" target="_blank" rel="noopener">zrender - 一个轻量级的Canvas类库，MVC封装，数据驱动，提供类Dom事件模型，让canvas绘图大不同！</a></li></ul><h2 id="12-日期格式化-amp-时间轴"><a href="#12-日期格式化-amp-时间轴" class="headerlink" title="12. 日期格式化 &amp; 时间轴"></a>12. 日期格式化 &amp; 时间轴</h2><ul><li><a href="http://momentjs.com/" target="_blank" rel="noopener">Moment.js</a> - 日期处理</li><li><a href="https://github.com/xx45/dayjs" target="_blank" rel="noopener">Day.js</a> - 日期处理</li><li><a href="https://github.com/pragmaticly/smart-time-ago" target="_blank" rel="noopener">Smart Time Ago</a> - 显示相对时间</li><li><a href="https://github.com/vorg/timeline.js" target="_blank" rel="noopener">timeline.js</a></li><li><a href="https://github.com/hustcc/timeago.js" target="_blank" rel="noopener">timeago.js</a></li><li><a href="https://www.npmjs.com/package/date-utils" target="_blank" rel="noopener">date-utils</a> - Date Pollyfills for Node.js and Browser</li></ul><h2 id="13-页面交互"><a href="#13-页面交互" class="headerlink" title="13. 页面交互"></a>13. 页面交互</h2><h3 id="13-1-Slider"><a href="#13-1-Slider" class="headerlink" title="13.1 Slider"></a>13.1 Slider</h3><ul><li><a href="https://github.com/kenwheeler/slick/" target="_blank" rel="noopener">slick - the last carousel you’ll ever need</a></li><li><a href="https://github.com/thebird/Swipe" target="_blank" rel="noopener">Swipe - the most accurate touch slider</a></li><li><a href="https://github.com/nolimits4web/Swiper" target="_blank" rel="noopener">Swiper - Most modern mobile touch slider</a></li><li><a href="https://github.com/cubiq/iscroll" target="_blank" rel="noopener">iscroll - Smooth scrolling for the web</a></li><li><a href="https://github.com/BE-FE/iSlider" target="_blank" rel="noopener">iSlider - 移动端滑动组件</a></li><li><a href="https://github.com/OwlFonk/OwlCarousel" target="_blank" rel="noopener">OwlCarousel - create beautiful responsive carousel slider</a></li><li><a href="https://github.com/jquery/jquery-mousewheel/" target="_blank" rel="noopener">jquery-mousewheel - jQuery鼠标滚轮滚动侦测插件</a></li><li><a href="https://github.com/jedrzejchalubek/Glide.js" target="_blank" rel="noopener">Glide.js - 轻量级滑块组件</a></li><li><a href="https://github.com/dimsemenov/photoswipe" target="_blank" rel="noopener">PhotoSwipe</a></li><li><a href="http://www.superslide2.com/TouchSlide/" target="_blank" rel="noopener">TouchSlide - 触屏滑动特效(焦点图,Tab切换)</a></li><li><a href="https://github.com/ustbhuangyi/better-scroll" target="_blank" rel="noopener">better-scroll</a> -  inspired by iscroll, and it supports more features and has a better scroll perfermance</li></ul><h3 id="13-2-瀑布流"><a href="#13-2-瀑布流" class="headerlink" title="13.2 瀑布流"></a>13.2 瀑布流</h3><ul><li><a href="http://masonry.desandro.com/" target="_blank" rel="noopener">Masonry</a></li><li><a href="http://isotope.metafizzy.co/" target="_blank" rel="noopener">Isotope - Filter &amp; sort magical layouts</a></li><li><a href="https://github.com/ademilter/bricklayer" target="_blank" rel="noopener">Bricklayer</a></li></ul><h3 id="13-3-懒加载-加载监听-预加载"><a href="#13-3-懒加载-加载监听-预加载" class="headerlink" title="13.3 懒加载/加载监听/预加载"></a>13.3 懒加载/加载监听/预加载</h3><ul><li><a href="https://github.com/desandro/imagesloaded" target="_blank" rel="noopener">imagesLoaded</a></li><li><a href="https://github.com/toddmotto/echo" target="_blank" rel="noopener">Echo.js</a></li><li><a href="https://github.com/aFarkas/lazysizes" target="_blank" rel="noopener">lazySizes</a></li><li><a href="https://github.com/tuupola/jquery_lazyload" target="_blank" rel="noopener">jquery_lazyload</a></li><li><a href="https://github.com/shprink/bttrlazyloading/" target="_blank" rel="noopener">BttrLazyLoading</a></li><li><a href="https://github.com/vvo/lazyload" target="_blank" rel="noopener">lazyload.js</a></li><li><a href="https://github.com/callmecavs/layzr.js" target="_blank" rel="noopener">layzr.js - 一个小巧快速的图片懒加载库</a></li><li><a href="https://github.com/alexanderdickson/waitForImages" target="_blank" rel="noopener">waitForImages - 图片加载监听库</a></li><li><a href="https://github.com/thinkpixellab/PxLoader" target="_blank" rel="noopener">PxLoader - JS预加载库:实现图片、声音等各种文件的预加载功能</a></li><li><a href="https://github.com/bgrins/bindWithDelay" target="_blank" rel="noopener">bindWithDelay - jQuery Plugin For Delayed Event Execution</a></li><li><a href="https://github.com/dennyferra/TypeWatch" target="_blank" rel="noopener">TypeWatch - 停止输入时调用</a></li></ul><h3 id="13-4-图片轮播-幻灯片-图片展示"><a href="#13-4-图片轮播-幻灯片-图片展示" class="headerlink" title="13.4 图片轮播(幻灯片)/图片展示"></a>13.4 图片轮播(幻灯片)/图片展示</h3><ul><li><a href="https://github.com/woothemes/FlexSlider" target="_blank" rel="noopener">FlexSlider</a></li><li><a href="https://github.com/idiot/unslider" target="_blank" rel="noopener">unslider - 小而美的轮播库</a></li><li><a href="https://github.com/scaron/prettyphoto" target="_blank" rel="noopener">prettyPhoto</a></li><li><a href="https://github.com/chrishumboldt/Flickerplate" target="_blank" rel="noopener">FlickerPlate - A cool jQuery plugin that lets you flick through content.</a></li><li><a href="https://github.com/imsky/holder" target="_blank" rel="noopener">Holder.js - Client-side image placeholders.</a></li><li><a href="https://github.com/brunjo/rowGrid.js" target="_blank" rel="noopener">RowGrid.js - 在径直的行里放置图片</a></li><li><a href="http://osvaldas.info/examples/image-lightbox-responsive-touch-friendly/" target="_blank" rel="noopener">ImageLightbox.js - 灯箱效果</a></li><li><a href="https://github.com/peachananr/panorama_viewer" target="_blank" rel="noopener">JQuery Panorama Viewer - 全景视图</a></li><li><a href="https://github.com/tholman/intense-images" target="_blank" rel="noopener">Intense Images - 全屏查看图片</a></li><li><a href="http://scottjehl.github.io/picturefill/" target="_blank" rel="noopener">Picturefill - 一个响应式图片 JS 插件</a></li><li><a href="https://github.com/fat/zoom.js" target="_blank" rel="noopener">zoom.js - 一个 jQuery 图片放大插件</a></li><li><a href="https://github.com/brianium/watermarkjs" target="_blank" rel="noopener">watermarkjs - 一个在浏览器中添加图片水印的 JS 库</a></li><li><a href="https://github.com/kvendrik/responsive-images.js" target="_blank" rel="noopener">responsive-images.js</a></li><li><a href="https://github.com/polarnotion/turntable" target="_blank" rel="noopener">Turntable.js - 轻易实现图像的3D旋转</a></li><li><a href="https://github.com/wentin/ResponsifyJS" target="_blank" rel="noopener">ResponsifyJS - 让图像完全响应式而不会牺牲图像的主要部分</a></li><li><a href="https://github.com/akiran/react-slick" target="_blank" rel="noopener">react-slick - React 实现的轮播图插件</a></li></ul><h3 id="13-5-图片剪裁-图片处理-图片转换"><a href="#13-5-图片剪裁-图片处理-图片转换" class="headerlink" title="13.5 图片剪裁/图片处理/图片转换"></a>13.5 图片剪裁/图片处理/图片转换</h3><ul><li><a href="https://github.com/fengyuanchen/cropperjs" target="_blank" rel="noopener">cropperjs</a> - 图片裁切</li><li><a href="https://github.com/tapmodo/Jcrop" target="_blank" rel="noopener">Jcrop -  Image Cropping Plugin for jQuery</a></li><li><a href="https://github.com/sconsult/croppic" target="_blank" rel="noopener">croppic - an image cropping jquery plugin</a></li><li><a href="https://github.com/jwagner/smartcrop.js" target="_blank" rel="noopener">smartcrop.js - 智能图片裁剪库</a></li><li><a href="https://github.com/boblemarin/jQuery.eraser" target="_blank" rel="noopener">jQuery.eraser - 图像擦除插件</a></li><li><a href="http://www.dillerdesign.com/experiment/DD_belatedPNG/" target="_blank" rel="noopener">DD_belatedPNG.js - 让IE6支持透明PNG图片</a></li><li><a href="https://github.com/jonom/jquery-focuspoint" target="_blank" rel="noopener">FocusPoint.js 实现图片的响应式裁剪</a></li><li><a href="https://github.com/odyniec/imgareaselect" target="_blank" rel="noopener">imgareaselect</a></li><li><a href="https://github.com/una/CSSgram" target="_blank" rel="noopener">CSSgram - CSS 实现的 Instagram 滤镜库</a></li><li><a href="https://github.com/picturepan2/instagram.css" target="_blank" rel="noopener">instagram.css - 另一个 CSS 实现的 Instagram 滤镜库</a></li><li><a href="https://github.com/whackashoe/antimoderate" target="_blank" rel="noopener">antimoderate - 图片模糊库</a></li><li><a href="https://github.com/xyxiao001/vue-cropper/" target="_blank" rel="noopener">vue-cropper</a> - Vue.js 的图片剪裁插件</li><li><a href="https://github.com/roadmanfong/react-cropper" target="_blank" rel="noopener">react-cropper</a> - React 的图片剪裁插件</li><li><a href="https://github.com/DominicTobias/react-image-crop" target="_blank" rel="noopener">react-image-crop</a> - React 的图片剪裁插件</li><li><a href="https://github.com/cburgmer/rasterizeHTML.js" target="_blank" rel="noopener">rasterizeHTML.js</a> - HTML转图片(网页截图)</li><li><a href="https://github.com/niklasvh/html2canvas" target="_blank" rel="noopener">html2canvas</a> - HTML转图片(实现纯JS网页截图)</li><li><a href="https://github.com/tsayen/dom-to-image" target="_blank" rel="noopener">dom-to-image</a> - HTML转图片</li><li><a href="https://github.com/pbakaus/domvas" target="_blank" rel="noopener">domvas</a> - HTML转图片</li></ul><h3 id="13-6-进度条-加载动画-Loading"><a href="#13-6-进度条-加载动画-Loading" class="headerlink" title="13.6 进度条/加载动画(Loading)"></a>13.6 进度条/加载动画(Loading)</h3><ul><li><a href="http://ricostacruz.com/nprogress/" target="_blank" rel="noopener">NProgress.js</a></li><li><a href="https://github.com/usablica/progress.js" target="_blank" rel="noopener">progress.js</a></li><li><a href="https://github.com/HubSpot/pace" target="_blank" rel="noopener">Pace - Automatic page load progress bar</a></li><li><a href="https://github.com/englercj/jquery-ajax-progress" target="_blank" rel="noopener">jquery-ajax-progress</a></li><li><a href="https://github.com/jacoborus/nanobar" target="_blank" rel="noopener">nanobar - Very lightweight progress bars.</a></li><li><a href="https://github.com/vadimsva/waitMe" target="_blank" rel="noopener">waitMe - 很漂亮的loading效果</a></li><li><a href="https://github.com/fgnass/spin.js" target="_blank" rel="noopener">spin.js</a></li><li><a href="https://github.com/padolsey/sonic.js" target="_blank" rel="noopener">sonic.js</a></li><li><a href="https://github.com/joaopereirawd/fakeLoader.js" target="_blank" rel="noopener">fakeLoader.js</a></li><li><a href="https://github.com/ConnorAtherton/loaders.css" target="_blank" rel="noopener">loaders.css - 一个为性能优化的实现加载动画效果的 CSS 框架</a></li><li><a href="https://github.com/lukehaas/css-loaders" target="_blank" rel="noopener">css-loaders</a></li><li><a href="https://github.com/christophercliff/sausage" target="_blank" rel="noopener">Sausage - 跟踪滚动条并记录当前阅读所处节点</a></li><li><a href="https://loading.io/" target="_blank" rel="noopener">loading.io</a> - 一个 Loading 图标的网站</li></ul><h3 id="13-7-侧滑插件-offcancas"><a href="#13-7-侧滑插件-offcancas" class="headerlink" title="13.7 侧滑插件(offcancas)"></a>13.7 侧滑插件(offcancas)</h3><ul><li><a href="https://github.com/christophery/pushy" target="_blank" rel="noopener">pushy -  a responsive off-canvas navigation menu </a></li><li><a href="https://github.com/mango/slideout" target="_blank" rel="noopener">Slideout.js - 一个用于移动 Web 应用的触摸滑出式导航菜单</a></li></ul><h3 id="13-8-菜单-Menu"><a href="#13-8-菜单-Menu" class="headerlink" title="13.8 菜单(Menu)"></a>13.8 菜单(Menu)</h3><ul><li><a href="https://github.com/joeldbirch/superfish" target="_blank" rel="noopener">SuperFish - 基于jQuery的级联下拉菜单</a></li><li><a href="https://github.com/viljamis/responsive-nav.js" target="_blank" rel="noopener">Responsive Nav - 响应式导航</a></li><li><a href="https://github.com/onokumus/metisMenu" target="_blank" rel="noopener">metisMenu - A jQuery menu plugin</a></li></ul><h3 id="13-9-滚动侦测-ScrollSpy"><a href="#13-9-滚动侦测-ScrollSpy" class="headerlink" title="13.9 滚动侦测(ScrollSpy)"></a>13.9 滚动侦测(ScrollSpy)</h3><ul><li><a href="https://github.com/sxalexander/jquery-scrollspy" target="_blank" rel="noopener">jquery-scrollspy(1)</a></li><li><a href="https://github.com/thesmart/jquery-scrollspy" target="_blank" rel="noopener">jquery-scrollspy(2)</a></li><li><a href="https://github.com/imakewebthings/waypoints" target="_blank" rel="noopener">Waypoints</a></li><li><a href="https://github.com/janpaepke/ScrollMagic" target="_blank" rel="noopener">ScrollMagic - 像进度条一样使用滚动条</a></li></ul><h3 id="13-10-滚动加载更多-下拉刷新-Pull-to-Refresh"><a href="#13-10-滚动加载更多-下拉刷新-Pull-to-Refresh" class="headerlink" title="13.10 滚动加载更多/下拉刷新(Pull to Refresh)"></a>13.10 滚动加载更多/下拉刷新(Pull to Refresh)</h3><ul><li><a href="https://github.com/pklauzinski/jscroll" target="_blank" rel="noopener">jScroll</a></li><li><a href="https://github.com/apeatling/web-pull-to-refresh" target="_blank" rel="noopener">web-pull-to-refresh</a></li><li><a href="https://github.com/dwcares/pulltorefresh" target="_blank" rel="noopener">pulltorefresh</a></li><li><a href="https://github.com/ThrivingKings/RubberBand.js" target="_blank" rel="noopener">RubberBand.js - add pull-to-refresh functionality to any page.</a></li></ul><h3 id="13-11-平滑滚动插件-Smooth-Scroll"><a href="#13-11-平滑滚动插件-Smooth-Scroll" class="headerlink" title="13.11 平滑滚动插件(Smooth Scroll)"></a>13.11 平滑滚动插件(Smooth Scroll)</h3><ul><li><a href="https://github.com/kswedberg/jquery-smooth-scroll" target="_blank" rel="noopener">jquery-smooth-scroll</a></li><li><a href="https://github.com/flesler/jquery.scrollTo" target="_blank" rel="noopener">jquery.scrollTo - 平滑滚动到页面指定位置</a></li><li><a href="https://github.com/cferdinandi/smooth-scroll" target="_blank" rel="noopener">smooth-scroll</a></li><li><a href="https://github.com/markgoodyear/scrollup" target="_blank" rel="noopener">scrollUp</a></li><li><a href="https://github.com/tholman/elevator.js" target="_blank" rel="noopener">elevator.js - 一个模拟电梯运行“返回顶部”的 JS 插件</a></li></ul><h3 id="13-12-全屏滚动-全屏切换"><a href="#13-12-全屏滚动-全屏切换" class="headerlink" title="13.12 全屏滚动/全屏切换"></a>13.12 全屏滚动/全屏切换</h3><ul><li><a href="https://github.com/alvarotrigo/pagePiling.js" target="_blank" rel="noopener">pagePiling.js - 全屏滚动效果</a></li><li><a href="https://github.com/alvarotrigo/fullPage.js/" target="_blank" rel="noopener">fullPage.js</a></li><li><a href="https://github.com/peachananr/onepage-scroll" target="_blank" rel="noopener">onepage-scroll</a></li><li><a href="https://github.com/yanhaijing/zepto.fullpage" target="_blank" rel="noopener">zepto.fullpage - 专注于移动端的fullPage.js</a></li><li><a href="https://github.com/sindresorhus/screenfull.js" target="_blank" rel="noopener">screenfull.js - 切换全屏模式</a></li></ul><h3 id="13-13-分屏滚动"><a href="#13-13-分屏滚动" class="headerlink" title="13.13 分屏滚动"></a>13.13 分屏滚动</h3><ul><li><a href="https://github.com/alvarotrigo/multiscroll.js" target="_blank" rel="noopener">multiscroll.js - 分屏滚动效果</a></li></ul><h3 id="13-14-转场效果"><a href="#13-14-转场效果" class="headerlink" title="13.14 转场效果"></a>13.14 转场效果</h3><ul><li><a href="https://github.com/blivesta/animsition" target="_blank" rel="noopener">Animsition - 页面切换时的过渡效果</a></li></ul><h3 id="13-15-固定元素-Sticky"><a href="#13-15-固定元素-Sticky" class="headerlink" title="13.15 固定元素(Sticky)"></a>13.15 固定元素(Sticky)</h3><ul><li><a href="https://github.com/garand/sticky" target="_blank" rel="noopener">sticky - jQuery Plugin for Sticky Objects</a></li><li><a href="https://github.com/webpop/jquery.pin" target="_blank" rel="noopener">jquery.pin - 固定页面元素</a></li><li><a href="https://github.com/LiranCohen/stickUp" target="_blank" rel="noopener">stickUp</a></li><li><a href="https://github.com/iclanzan/slinky" target="_blank" rel="noopener">Slinky.js - 堆叠头部创建滑动导航列表</a></li></ul><h3 id="13-16-触控事件"><a href="#13-16-触控事件" class="headerlink" title="13.16 触控事件"></a>13.16 触控事件</h3><ul><li><a href="https://github.com/hammerjs/hammer.js" target="_blank" rel="noopener">Hammer.js</a></li><li><a href="https://github.com/stephband/jquery.event.move" target="_blank" rel="noopener">jquery.event.move.js</a></li></ul><h3 id="13-17-拖拽组件"><a href="#13-17-拖拽组件" class="headerlink" title="13.17 拖拽组件"></a>13.17 拖拽组件</h3><ul><li><a href="https://github.com/desandro/draggabilly" target="_blank" rel="noopener">Draggabilly - 专注于拖拽功能的 JS 库</a></li><li><a href="https://github.com/bevacqua/dragula" target="_blank" rel="noopener">dragula - 一个让拖放操作变简单的 JS 库</a></li><li><a href="https://github.com/uberVU/grid" target="_blank" rel="noopener">GridList - 可拖拉的响应式列表库</a></li></ul><h3 id="13-18-隐藏或展示页面元素"><a href="#13-18-隐藏或展示页面元素" class="headerlink" title="13.18 隐藏或展示页面元素"></a>13.18 隐藏或展示页面元素</h3><ul><li><a href="http://www.bootcss.com/p/headroom.js/" target="_blank" rel="noopener">Headroom.js - 在不需要页头时将其隐藏</a></li><li><a href="https://github.com/jedfoster/Readmore.js" target="_blank" rel="noopener">Readmore.js - 内容显示与隐藏插件</a></li><li><a href="https://github.com/dmotz/oriDomi" target="_blank" rel="noopener">oriDomi - 像指一样折叠Dom元素</a></li></ul><h3 id="13-19-滚动条-Scrollbar"><a href="#13-19-滚动条-Scrollbar" class="headerlink" title="13.19 滚动条(Scrollbar)"></a>13.19 滚动条(Scrollbar)</h3><ul><li><a href="https://github.com/vitch/jScrollPane" target="_blank" rel="noopener">jScrollPane</a></li><li><a href="https://github.com/gromo/jquery.scrollbar" target="_blank" rel="noopener">jquery.scrollbar</a></li><li><a href="https://github.com/noraesae/perfect-scrollbar" target="_blank" rel="noopener">perfect-scrollbar</a></li><li><a href="https://github.com/jamesflorentino/nanoScrollerJS" target="_blank" rel="noopener">nanoScrollerJS</a></li><li><a href="https://github.com/wieringen/tinyscrollbar" target="_blank" rel="noopener">tinyscrollbar</a></li></ul><h3 id="13-20-视差滚动-Parallax-Scrolling"><a href="#13-20-视差滚动-Parallax-Scrolling" class="headerlink" title="13.20 视差滚动(Parallax Scrolling)"></a>13.20 视差滚动(Parallax Scrolling)</h3><ul><li><a href="https://github.com/wagerfield/parallax" target="_blank" rel="noopener">parallax.js</a></li><li><a href="https://github.com/stephband/jparallax" target="_blank" rel="noopener">jparallax</a></li><li><a href="https://github.com/Prinzhorn/skrollr" target="_blank" rel="noopener">skrollr</a></li></ul><h2 id="13-21-缩放-Zooming"><a href="#13-21-缩放-Zooming" class="headerlink" title="13.21 缩放 (Zooming)"></a>13.21 缩放 (Zooming)</h2><ul><li><a href="https://github.com/hakimel/zoom.js" target="_blank" rel="noopener">zoom.js - 一款效果很独特的页面内容缩放插件</a></li><li><a href="https://github.com/fat/zoom.js" target="_blank" rel="noopener">zoom.js - 一个 jQuery 图片放大插件</a></li><li><a href="https://github.com/jackmoore/zoom" target="_blank" rel="noopener">jQuery Zoom - mouseover时图片缩放效果</a></li></ul><h2 id="14-代码高亮插件-代码编辑器"><a href="#14-代码高亮插件-代码编辑器" class="headerlink" title="14. 代码高亮插件/代码编辑器"></a>14. 代码高亮插件/代码编辑器</h2><ul><li><a href="https://code.google.com/p/google-code-prettify/" target="_blank" rel="noopener">google-code-prettify</a></li><li><a href="https://highlightjs.org/" target="_blank" rel="noopener">highlight.js</a></li><li><a href="http://craig.is/making/rainbows" target="_blank" rel="noopener">Rainbow</a></li><li><a href="https://github.com/ajaxorg/ace" target="_blank" rel="noopener">ACE</a></li><li><a href="https://github.com/codemirror/codemirror" target="_blank" rel="noopener">CodeMirror</a></li><li><a href="https://github.com/aramk/crayon-syntax-highlighter" target="_blank" rel="noopener">Crayon Syntax Highlighter</a></li><li><a href="https://github.com/PrismJS/prism" target="_blank" rel="noopener">prism - Lightweight, robust, elegant syntax highlighting.</a></li></ul><h2 id="15-UI-Icon-组件"><a href="#15-UI-Icon-组件" class="headerlink" title="15. UI Icon 组件"></a>15. UI Icon 组件</h2><ul><li><a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">Font Awesome</a></li><li><a href="http://glyphter.com/" target="_blank" rel="noopener">Glyphter: The SVG Font Machine</a></li><li><a href="http://perfecticons.com/" target="_blank" rel="noopener">Perfect Icons</a></li><li><a href="http://iconizr.com/" target="_blank" rel="noopener">iconizr</a></li><li><a href="http://www.bootcss.com/p/cikonss/" target="_blank" rel="noopener">Cikonss - 纯CSS实现的响应式Icon</a></li><li><a href="https://github.com/danleech/simple-icons" target="_blank" rel="noopener">Simple Icons</a></li></ul><h2 id="16-动画-Animate"><a href="#16-动画-Animate" class="headerlink" title="16. 动画(Animate)"></a>16. 动画(Animate)</h2><ul><li><a href="https://github.com/daneden/animate.css" target="_blank" rel="noopener">animate.css - A cross-browser library of CSS animations.</a></li><li><a href="https://github.com/rstacruz/jquery.transit" target="_blank" rel="noopener">Transit - CSS transitions and transformations for jQuery</a></li><li><a href="https://github.com/juliangarnier/anime" target="_blank" rel="noopener">anime.js - Javascript 动画引擎</a></li><li><a href="https://github.com/matthieua/WOW" target="_blank" rel="noopener">WOW - 在滚动过程中展示CSS动画效果(默认触发animate.css动画)</a></li><li><a href="https://github.com/anijs/anijs/" target="_blank" rel="noopener">AniJS - A Library to Raise your Web Design without Coding</a></li><li><a href="https://github.com/visionmedia/move.js" target="_blank" rel="noopener">Move.js - 简化CSS3动画的JS库</a></li><li><a href="https://github.com/nckprsn/scrollme" target="_blank" rel="noopener">ScrollMe – 在网页中加入各种滚动动画效果</a></li><li><a href="https://github.com/h5bp/Effeckt.css" target="_blank" rel="noopener">Effeckt.css - A Performant Transitions and Animations Library</a></li><li><a href="http://nec.netease.com/library/category/#animation" target="_blank" rel="noopener">NEC动画库</a></li><li><a href="https://github.com/elrumordelaluz/csshake" target="_blank" rel="noopener">csshake - CSS classes to move your DOM</a></li><li><a href="https://github.com/miniMAC/magic" target="_blank" rel="noopener">magic - CSS3 Animations with special effects</a></li><li><a href="https://github.com/tobiasahlin/SpinKit" target="_blank" rel="noopener">SpinKit</a></li><li><a href="https://github.com/julianshapiro/velocity" target="_blank" rel="noopener">Velocity.js - 加速JavaScript动画</a></li><li><a href="https://github.com/thomasxiii/lenticular.js" target="_blank" rel="noopener">lenticular.js - 响应倾斜或鼠标事件创建图片动画</a></li><li><a href="https://github.com/peachananr/interactive_3d" target="_blank" rel="noopener">jQuery Interactive 3D - Create a 3D interactive object using images</a></li><li><a href="https://github.com/ramswaroop/animatescroll.js" target="_blank" rel="noopener">AnimateScroll - A Simple jQuery Plugin for Animating Scroll</a></li><li><a href="https://github.com/julianshapiro/blast" target="_blank" rel="noopener">Blast.js - 把动画和样式注入到文本中</a></li><li><a href="https://github.com/tictail/bounce.js" target="_blank" rel="noopener">Bounce.js - 一个用于制作漂亮 CSS3 关键帧动画的 JS 库</a></li><li><a href="https://github.com/cmiscm/stickerjs" target="_blank" rel="noopener">Sticker.js - create a Sticker Effect</a></li><li><a href="https://github.com/julianlloyd/scrollReveal.js" target="_blank" rel="noopener">scrollReveal.js - 元素进入可视区域自动触发设置好的动画</a></li><li><a href="https://github.com/hakimel/stroll.js" target="_blank" rel="noopener">stroll.js - CSS3 list scroll effects</a></li><li><a href="https://github.com/gdsmith/jquery.easing" target="_blank" rel="noopener">jQuery Easing -  动画效果扩展</a></li><li><a href="http://www.justinaguilar.com/animations/index.html" target="_blank" rel="noopener">animations - CSS3 ANIMATION CHEAT SHEET</a></li><li><a href="https://github.com/bitshadow/iconate" target="_blank" rel="noopener">iconate.js：将 icons 增加动画效果的 JS 库</a></li><li><a href="https://github.com/HubSpot/odometer" target="_blank" rel="noopener">Odometer - 数字之间的垂直切换</a></li><li>Hover - 悬停效果<ul><li><a href="https://github.com/IanLunn/Hover" target="_blank" rel="noopener">Hover.css - 很多鼠标Hover态的效果</a></li><li><a href="https://github.com/ciar4n/imagehover.css" target="_blank" rel="noopener">imagehover.css - 为图片添加悬停效果</a></li><li><a href="https://github.com/gudh/ihover" target="_blank" rel="noopener">iHover - 图片悬停效果</a></li><li><a href="https://github.com/hasinhayder/ImageCaptionHoverAnimation" target="_blank" rel="noopener">ImageCaptionHoverAnimation</a></li><li><a href="http://miketricking.github.io/dist/" target="_blank" rel="noopener">Bootstrap Hover Image Gallery</a></li></ul></li><li>Multi-touch gestures library - Web手势库<ul><li><a href="https://github.com/AlloyTeam/AlloyFinger" target="_blank" rel="noopener">AlloyFinger - 腾讯 AlloyTeam 出品的超级小的 Web 手势库</a></li></ul></li></ul><h2 id="17-本地存储"><a href="#17-本地存储" class="headerlink" title="17. 本地存储"></a>17. 本地存储</h2><ul><li><a href="https://github.com/zendesk/cross-storage" target="_blank" rel="noopener">cross-storage - Cross domain local storage</a></li><li><a href="https://github.com/mozilla/localForage" target="_blank" rel="noopener">localForage</a></li><li><a href="https://github.com/pouchdb/pouchdb" target="_blank" rel="noopener">pouchdb</a></li><li><a href="https://github.com/Wisembly/basil.js" target="_blank" rel="noopener">basil.js</a></li><li><a href="https://github.com/ClickerMonkey/neurosync" target="_blank" rel="noopener">Neurosync - JavaScript 本地离线 ORM 库</a></li><li><a href="https://github.com/techfort/LokiJS" target="_blank" rel="noopener">LokiJS - 性能优先的 JavaScript 内存数据库</a></li><li><a href="https://github.com/turbolinks/turbolinks" target="_blank" rel="noopener">turbolinks - Javascript pushState</a></li></ul><h2 id="18-模板引擎"><a href="#18-模板引擎" class="headerlink" title="18. 模板引擎"></a>18. 模板引擎</h2><ul><li><a href="https://github.com/olado/doT" target="_blank" rel="noopener">doT.js</a></li><li><a href="https://github.com/janl/mustache.js" target="_blank" rel="noopener">mustache.js</a></li><li><a href="http://www.jingwentian.com/t-66" target="_blank" rel="noopener">Handlebars.js</a></li><li><a href="https://github.com/aui/artTemplate" target="_blank" rel="noopener">artTemplate</a></li><li><a href="https://github.com/wangxiao/BaiduTemplate" target="_blank" rel="noopener">baiduTemplate</a></li><li><a href="https://github.com/BorisMoore/jsrender" target="_blank" rel="noopener">JSRender</a></li><li><a href="https://github.com/tj/ejs" target="_blank" rel="noopener">EJS - JavaScript Templates</a></li><li><a href="https://github.com/PaulGuo/Juicer" target="_blank" rel="noopener">Juicer - A Light Javascript Templete Engine.</a></li><li><a href="https://github.com/twigkit/tempo" target="_blank" rel="noopener">Tempo</a></li><li><a href="https://github.com/moappi/json2html" target="_blank" rel="noopener">json2html</a></li><li><a href="https://github.com/twitter/hogan.js" target="_blank" rel="noopener">Hogan.js - JavaScript templating from Twitter.</a></li><li><a href="https://github.com/linkedin/dustjs" target="_blank" rel="noopener">Dust.js - Linkedin维护的项目</a></li><li><a href="https://github.com/mozilla/nunjucks" target="_blank" rel="noopener">nunjucks</a> - A powerful templating engine</li></ul><h2 id="19-通知组件-弹框组件-模态窗口"><a href="#19-通知组件-弹框组件-模态窗口" class="headerlink" title="19. 通知组件/弹框组件/模态窗口"></a>19. 通知组件/弹框组件/模态窗口</h2><ul><li><a href="https://github.com/alexgibson/notify.js" target="_blank" rel="noopener">Notify.js(Web Notifications API)</a></li><li><a href="https://github.com/fabien-d/alertify.js" target="_blank" rel="noopener">alertify.js</a></li><li><a href="https://github.com/MohammadYounes/AlertifyJS" target="_blank" rel="noopener">AlertifyJS</a></li><li><a href="https://github.com/t4t5/sweetalert" target="_blank" rel="noopener">SweetAlert</a></li><li><a href="https://github.com/HubSpot/messenger" target="_blank" rel="noopener">Messenger - 非常酷的弹框组件</a></li><li><a href="https://github.com/sciactive/pnotify" target="_blank" rel="noopener">PNotify</a></li><li><a href="https://github.com/jpillora/notifyjs" target="_blank" rel="noopener">Notify.js - A simple, versatile notification library</a></li><li><a href="https://github.com/VodkaBears/Remodal" target="_blank" rel="noopener">Remodal - 模态窗口插件</a></li><li><a href="https://github.com/egoist/action.js" target="_blank" rel="noopener">action.js - 极简的tip和Modal弹窗效果</a></li><li><a href="https://github.com/humaan/Modaal" target="_blank" rel="noopener">Modaal - 一个创建弹出窗口的jQuery插件</a></li><li><a href="https://github.com/hubspot/vex" target="_blank" rel="noopener">Vex - 可以实现3D动效的弹出对话框堆叠效果</a></li></ul><h2 id="20-提示控件-Tooltips"><a href="#20-提示控件-Tooltips" class="headerlink" title="20. 提示控件(Tooltips)"></a>20. 提示控件(Tooltips)</h2><ul><li><a href="https://github.com/chinchang/hint.css" target="_blank" rel="noopener">hint.css - 一款非常小巧的提示框效果</a></li><li><a href="https://github.com/qTip2/qTip2" target="_blank" rel="noopener">qTip2 - Pretty powerful tooltips</a></li><li><a href="https://github.com/HubSpot/tooltip" target="_blank" rel="noopener">tooltip - CSS Tooltips</a></li><li><a href="https://github.com/iamceege/tooltipster" target="_blank" rel="noopener">tooltipster - A jQuery tooltip plugin</a></li><li><a href="https://github.com/jamescryer/grumble.js" target="_blank" rel="noopener">grumble.js - 气泡形状的提示（Tooltip）控件</a></li><li><a href="https://github.com/carlsednaoui/ouibounce" target="_blank" rel="noopener">Ouibounce - 离站提示控件</a></li><li><a href="https://github.com/usablica/intro.js" target="_blank" rel="noopener">intro.js - 一个创建引导式网站介绍功能的 JS 库</a></li><li><a href="https://github.com/egoist/data-tip.css" target="_blank" rel="noopener">data-tip.css - 纯 CSS 实现的工具提示</a></li></ul><h2 id="21-对话框-遮罩层-弹出层-lightbox"><a href="#21-对话框-遮罩层-弹出层-lightbox" class="headerlink" title="21. 对话框/遮罩层/弹出层(lightbox)"></a>21. 对话框/遮罩层/弹出层(lightbox)</h2><ul><li><a href="https://github.com/fancyapps/fancyBox" target="_blank" rel="noopener">fancyBox - Fancy jQuery lightbox</a></li><li><a href="https://github.com/krewenki/jquery-lightbox" target="_blank" rel="noopener">jquery-lightbox - The popular lightbox script, ported to jQuery</a></li><li><a href="https://github.com/jackmoore/colorbox" target="_blank" rel="noopener">Colorbox - a jQuery lightbox</a></li><li><a href="https://github.com/aui/artDialog" target="_blank" rel="noopener">artDialog - 经典的网页对话框组件</a></li><li><a href="https://github.com/codrops/DialogEffects" target="_blank" rel="noopener">DialogEffects</a></li><li><a href="https://github.com/malsup/blockui/" target="_blank" rel="noopener">jQuery blockUI - Page or element overlay</a></li><li><a href="https://github.com/sentsin/layer/" target="_blank" rel="noopener">layer - web弹出窗/层</a></li></ul><h2 id="22-文档-表格-PDF"><a href="#22-文档-表格-PDF" class="headerlink" title="22. 文档/表格/PDF"></a>22. 文档/表格/PDF</h2><ul><li><a href="https://github.com/wyuenho/backgrid" target="_blank" rel="noopener">Backgrid.js - 强大的表格组件</a></li><li><a href="https://github.com/handsontable/handsontable" target="_blank" rel="noopener">handsontable - 在线可编辑excel表格</a></li><li><a href="https://github.com/rstaib/jquery-bootgrid" target="_blank" rel="noopener">jQuery Bootgrid - 用于ajax生成动态表格</a></li><li><a href="https://github.com/DataTables/DataTables" target="_blank" rel="noopener">DataTables - Table plug-in for jQuery</a></li><li><a href="https://github.com/mozilla/pdf.js" target="_blank" rel="noopener">PDF.js - 一个 JavaScript 编写的 PDF 阅读器</a></li><li><a href="https://github.com/MrRio/jsPDF" target="_blank" rel="noopener">jsPDF - Generate PDF files in JavaScript</a></li><li><a href="https://github.com/okfn/recline/" target="_blank" rel="noopener">Recline.js - 灵活操作和展示数据</a></li><li><a href="https://github.com/alfajango/jquery-dynatable" target="_blank" rel="noopener">Dynatable - 交互式表格插件</a></li><li><a href="https://github.com/fulmicoton/fattable" target="_blank" rel="noopener">fattable - 创建无限滚动无限行列数的表格</a></li><li><a href="https://github.com/NeXTs/Clusterize.js" target="_blank" rel="noopener">Clusterize.js - 一个轻松显示大数据集的 JS 插件</a></li><li><a href="https://github.com/AudithSoftworks/Uniform" target="_blank" rel="noopener">Uniform -表单美化插件</a></li><li><a href="https://github.com/kayalshri/tableExport.jquery.plugin" target="_blank" rel="noopener">tableExport - 导出HTML Table为 Excel、PDF 等 </a></li><li><a href="https://github.com/SheetJS/js-xlsx" target="_blank" rel="noopener">SheetJS/js-xlsx</a> - 生成Excel文件并下载</li></ul><h2 id="23-目录树插件"><a href="#23-目录树插件" class="headerlink" title="23. 目录树插件"></a>23. 目录树插件</h2><ul><li><a href="https://github.com/zTree/zTree_v3" target="_blank" rel="noopener">zTree_v3 - jQuery Tree Plugin</a></li><li><a href="https://github.com/vakata/jstree" target="_blank" rel="noopener">jstree - jQuery Tree Plugin</a></li><li><a href="https://github.com/mar10/fancytree" target="_blank" rel="noopener">fancytree - Tree plugin for jQuery</a></li></ul><h2 id="24-前后端交互"><a href="#24-前后端交互" class="headerlink" title="24. 前后端交互"></a>24. 前后端交互</h2><h3 id="24-1-Ajax模块"><a href="#24-1-Ajax模块" class="headerlink" title="24.1 Ajax模块"></a>24.1 Ajax模块</h3><ul><li><a href="https://github.com/github/fetch" target="_blank" rel="noopener">fetch - A window.fetch JavaScript polyfill</a></li><li><a href="https://github.com/ded/reqwest" target="_blank" rel="noopener">reqwest - browser asynchronous http requests</a></li><li><a href="https://github.com/ForbesLindesay/ajax" target="_blank" rel="noopener">ajax - Standalone AJAX library</a></li><li><a href="https://github.com/then/then-request" target="_blank" rel="noopener">then-request</a></li><li><a href="https://github.com/iriscouch/browser-request" target="_blank" rel="noopener">browser-request</a></li><li><a href="https://github.com/visionmedia/superagent" target="_blank" rel="noopener">superagent</a></li><li><a href="https://github.com/argunner/minAjax.js/" target="_blank" rel="noopener">minAjax.js</a></li><li><a href="https://github.com/pyrsmk/qwest" target="_blank" rel="noopener">qwest - 第三方的Ajax库</a></li><li><a href="https://github.com/mzabriskie/axios" target="_blank" rel="noopener">axios - Promise based HTTP client for the browser and node.js</a></li><li><a href="https://github.com/fis-components/whatwg-fetch" target="_blank" rel="noopener">whatwg-fetch</a></li><li><a href="https://github.com/webmodules/jsonp" target="_blank" rel="noopener">jsonp</a> - A simple JSONP implementation</li><li><a href="https://github.com/matthew-andrews/isomorphic-fetch" target="_blank" rel="noopener">isomorphic-fetch</a> - Isomorphic WHATWG Fetch API, for Node &amp; Browserify</li></ul><h3 id="24-2-SSE-Server-Sent-Events"><a href="#24-2-SSE-Server-Sent-Events" class="headerlink" title="24.2 SSE (Server-Sent Events)"></a>24.2 SSE (Server-Sent Events)</h3><blockquote><p>SSE API用于创建到服务器的单向连接，服务器通过这个连接可以发送任意数量的数据.</p></blockquote><ul><li><a href="https://github.com/Yaffle/EventSource" target="_blank" rel="noopener">EventSource</a></li></ul><h3 id="24-3-Web-Sockets"><a href="#24-3-Web-Sockets" class="headerlink" title="24.3 Web Sockets"></a>24.3 Web Sockets</h3><h2 id="25-音频-视频"><a href="#25-音频-视频" class="headerlink" title="25. 音频/视频"></a>25. 音频/视频</h2><ul><li><a href="https://github.com/happyworm/jPlayer" target="_blank" rel="noopener">jPlayer -  HTML5 Audio &amp; Video for jQuery</a></li><li><a href="https://github.com/videojs/video.js" target="_blank" rel="noopener">video.js - HTML5 &amp; Flash video player</a></li><li><a href="https://github.com/paypal/accessible-html5-video-player" target="_blank" rel="noopener">Accessible HTML5 Video Player - PayPal 开源的 HTML5 视频播放器</a></li><li><a href="https://github.com/clappr/clappr" target="_blank" rel="noopener">Clappr - 开源的Web视频播放器</a></li><li><a href="https://github.com/selz/plyr" target="_blank" rel="noopener">Plyr - A simple HTML5 media player</a></li><li><a href="https://github.com/davatron5000/FitVids.js" target="_blank" rel="noopener">FitVids.js - A lightweight, easy-to-use jQuery plugin for fluid width video embeds.</a></li><li><a href="https://github.com/dfcb/BigVideo.js" target="_blank" rel="noopener">BigVideo.js - The jQuery Plugin for Big Background Video</a></li><li><a href="https://github.com/bdougherty/BigScreen" target="_blank" rel="noopener">BigScreen - A simple library for using the JavaScript Full Screen API</a></li><li><a href="https://github.com/VodkaBears/Vide" target="_blank" rel="noopener">Vide - 视频背景</a></li><li><a href="https://github.com/captbaritone/winamp2-js" target="_blank" rel="noopener">winamp2-js</a></li><li><a href="https://github.com/jaysalvat/buzz" target="_blank" rel="noopener">Buzz - A Javascript HTML5 Audio library</a></li><li><a href="http://github.com/johndyer/mediaelement/" target="_blank" rel="noopener">MediaElement.js</a></li></ul><h2 id="26-按钮"><a href="#26-按钮" class="headerlink" title="26. 按钮"></a>26. 按钮</h2><ul><li><a href="https://github.com/alexwolfe/Buttons" target="_blank" rel="noopener">Buttons - A CSS button library</a></li><li><a href="https://github.com/codrops/ButtonComponentMorph" target="_blank" rel="noopener">ButtonComponentMorph</a></li><li><a href="https://github.com/codrops/ProgressButtonStyles" target="_blank" rel="noopener">ProgressButtonStyles</a></li><li><a href="https://github.com/codrops/CreativeButtons" target="_blank" rel="noopener">CreativeButtons</a></li><li><a href="https://github.com/ubuwaits/css3-buttons" target="_blank" rel="noopener">CSS3 buttons</a></li><li><a href="https://github.com/timmywil/jquery.onoff" target="_blank" rel="noopener">jquery.onoff - Interactive, accessible toggle switches for the web.</a></li><li><a href="https://github.com/hakimel/css/tree/master/flipside" target="_blank" rel="noopener">Flipside - 一个能过渡到对话框的按钮</a></li></ul><h2 id="27-富文本编辑器-Markdown编辑器-Markdown解析器"><a href="#27-富文本编辑器-Markdown编辑器-Markdown解析器" class="headerlink" title="27. 富文本编辑器/Markdown编辑器/Markdown解析器"></a>27. 富文本编辑器/Markdown编辑器/Markdown解析器</h2><ul><li><a href="https://github.com/mycolorway/simditor" target="_blank" rel="noopener">Simditor - 简单快速的富文本编辑器</a></li><li><a href="https://github.com/Integ/BachEditor" target="_blank" rel="noopener">BachEditor - 一个有情怀的编辑器</a></li><li><a href="https://github.com/tinymce/tinymce" target="_blank" rel="noopener">TinyMCE</a></li><li><a href="https://github.com/toopay/bootstrap-markdown" target="_blank" rel="noopener">bootstrap-markdown</a></li><li><a href="https://github.com/chjj/marked" target="_blank" rel="noopener">marked - markdown解析器</a></li><li><a href="https://github.com/tylingsoft/markdown-plus" target="_blank" rel="noopener">Markdown Plus</a></li><li><a href="https://github.com/pandao/editor.md" target="_blank" rel="noopener">Editor.md - 开源在线Markdown编辑器</a></li><li><a href="https://github.com/benweet/stackedit" target="_blank" rel="noopener">stackedit</a></li><li><a href="http://imperavi.com/redactor/" target="_blank" rel="noopener">Redactor Text Editor</a></li><li><a href="https://github.com/simonwaldherr/micromarkdown.js/" target="_blank" rel="noopener">micromarkdown.js - 轻量级的md解析器</a></li><li><a href="https://github.com/wangfupeng1988/wangEditor" target="_blank" rel="noopener">wangEditor - 支持移动端的轻量级web富文本框</a></li><li><a href="https://github.com/ckeditor/ckeditor-dev" target="_blank" rel="noopener">CKEditor - 可视化 HTML 编辑器</a></li><li><a href="https://github.com/quilljs/quill" target="_blank" rel="noopener">Quill - 富文本编辑器</a></li></ul><h2 id="28-内容提取-Readability"><a href="#28-内容提取-Readability" class="headerlink" title="28. 内容提取(Readability)"></a>28. 内容提取(Readability)</h2><ul><li><a href="https://code.google.com/p/arc90labs-readability/" target="_blank" rel="noopener">Readability</a></li><li><a href="https://github.com/marianoguerra/json.human.js" target="_blank" rel="noopener">json.human.js - Json Formatting for Human Beings</a></li></ul><h2 id="29-颜色-CSS-Colors-SVG-Canvas"><a href="#29-颜色-CSS-Colors-SVG-Canvas" class="headerlink" title="29. 颜色(CSS Colors)/SVG/Canvas"></a>29. 颜色(CSS Colors)/SVG/Canvas</h2><ul><li><a href="http://colours.neilorangepeel.com/" target="_blank" rel="noopener">CSS Colours</a></li><li><a href="http://www.svgeneration.com/" target="_blank" rel="noopener">SVGeneration</a></li><li><a href="https://github.com/dirkgroenen/SVGMagic" target="_blank" rel="noopener">SVGMagic - 自动的创建PNG来兼容不支持SVG的浏览器</a></li><li><a href="https://github.com/briangonzalez/jquery.adaptive-backgrounds.js" target="_blank" rel="noopener">Adaptive Backgrounds - 从图片抽取主要颜色和应用到父元素</a></li><li><a href="https://github.com/themadcreator/seen" target="_blank" rel="noopener">Seen.js - 渲染3D场景为SVG或者HTML Canvas</a></li><li><a href="https://github.com/jquery/jquery-color/" target="_blank" rel="noopener">jquery-color - 可以动态改动颜色</a></li></ul><h2 id="30-选项卡-Tabs"><a href="#30-选项卡-Tabs" class="headerlink" title="30. 选项卡(Tabs)"></a>30. 选项卡(Tabs)</h2><ul><li><a href="https://github.com/samsono/Easy-Responsive-Tabs-to-Accordion" target="_blank" rel="noopener">Easy Responsive Tabs to Accordion</a></li><li><a href="https://github.com/jellekralt/Responsive-Tabs" target="_blank" rel="noopener">Responsive-Tabs</a></li><li><a href="https://github.com/IonDen/ion.tabs" target="_blank" rel="noopener">ion.tabs - jQuery tabs plugin</a></li><li><a href="https://github.com/JangoSteve/jQuery-EasyTabs" target="_blank" rel="noopener">jQuery-EasyTabs</a></li><li><a href="https://github.com/aarondo/tabulous.js" target="_blank" rel="noopener">tabulous.js</a></li></ul><h2 id="31-文本处理"><a href="#31-文本处理" class="headerlink" title="31. 文本处理"></a>31. 文本处理</h2><ul><li><a href="https://github.com/zeroclipboard/zeroclipboard" target="_blank" rel="noopener">ZeroClipboard - 文本复制插件</a></li><li><a href="https://github.com/zenorocha/clipboard.js/" target="_blank" rel="noopener">clipboard.js</a></li><li><a href="https://github.com/lemonmade/bigfoot" target="_blank" rel="noopener">Bigfoot - 点击文章中的脚注弹窗显示</a></li><li><a href="https://github.com/openannotation/annotator" target="_blank" rel="noopener">Annotator - 文本注解插件，可以包括注释、标签、用户等</a></li><li><a href="https://github.com/micjamking/Succinct" target="_blank" rel="noopener">Succinct - 用作截断多行文本,后面添加省略号</a></li><li><a href="https://github.com/simplefocus/FlowType.JS" target="_blank" rel="noopener">Flowtype.js - 自动调整字体大小和行号</a></li><li><a href="https://github.com/peachananr/flat-shadow" target="_blank" rel="noopener">flat-shadow</a></li><li><a href="https://github.com/davatron5000/FitText.js" target="_blank" rel="noopener">FitText - A jQuery plugin for inflating web type</a></li><li><a href="https://github.com/bigspaceship/shine.js" target="_blank" rel="noopener">shine.js - 实现漂亮阴影</a></li><li><a href="https://github.com/bramstein/trmix/" target="_blank" rel="noopener">Type Rendering Mix - 文本渲染引擎</a></li><li><a href="https://github.com/kswedberg/jquery-expander" target="_blank" rel="noopener">jquery-expander - 阅读更多</a></li><li><a href="https://github.com/mattboldt/typed.js/" target="_blank" rel="noopener">Typed.js - 输入模拟插件</a></li><li><a href="https://github.com/FrDH/jQuery.dotdotdot" target="_blank" rel="noopener">jQuery.dotdotdot - 多行文本溢出显示省略号</a></li><li><a href="https://github.com/camwiegert/baffle" target="_blank" rel="noopener">baffle.js - 文本互动效果</a></li></ul><h2 id="32-布局-Layout"><a href="#32-布局-Layout" class="headerlink" title="32. 布局(Layout)"></a>32. 布局(Layout)</h2><ul><li>分隔面板(Split Panel)<ul><li><a href="https://github.com/shagstrom/split-pane" target="_blank" rel="noopener">split-pane</a></li><li><a href="http://layout.jquery-dev.com/" target="_blank" rel="noopener">jQuery UI Layout</a></li></ul></li></ul><h2 id="33-演示-幻灯片"><a href="#33-演示-幻灯片" class="headerlink" title="33. 演示/幻灯片"></a>33. 演示/幻灯片</h2><ul><li><a href="https://github.com/hakimel/reveal.js" target="_blank" rel="noopener">reveal.js - The HTML Presentation Framework</a></li><li><a href="https://github.com/markdalgleish/bespoke.js" target="_blank" rel="noopener">bespoke.js - DIY Presentation Micro-Framework</a></li><li><a href="https://github.com/bartaz/impress.js" target="_blank" rel="noopener">impress.js</a></li><li><a href="https://github.com/shower/shower" target="_blank" rel="noopener">shower</a></li><li><a href="https://github.com/imakewebthings/deck.js" target="_blank" rel="noopener">deck.js</a></li></ul><h2 id="34-国际化-i18n"><a href="#34-国际化-i18n" class="headerlink" title="34. 国际化(i18n)"></a>34. 国际化(i18n)</h2><ul><li><a href="https://github.com/recurser/jquery-i18n" target="_blank" rel="noopener">jquery-i18n</a></li><li><a href="https://github.com/i18next/i18next" target="_blank" rel="noopener">i18next.js</a></li><li><a href="https://github.com/jpjoyal/jsperanto" target="_blank" rel="noopener">jsperanto.js</a></li><li><a href="https://github.com/SlexAxton/Jed" target="_blank" rel="noopener">jed.js</a></li><li><a href="https://github.com/SlexAxton/messageformat.js" target="_blank" rel="noopener">messageformat.js</a></li><li><a href="https://github.com/airbnb/polyglot.js" target="_blank" rel="noopener">Polyglot.js</a></li></ul><h2 id="35-邮件模板-Email-Templates"><a href="#35-邮件模板-Email-Templates" class="headerlink" title="35. 邮件模板(Email Templates)"></a>35. 邮件模板(Email Templates)</h2><ul><li><a href="https://github.com/leemunroe/responsive-html-email-template" target="_blank" rel="noopener">responsive-html-email-template</a></li></ul><h2 id="36-移动端优化-Optimizing-Mobile-Performance"><a href="#36-移动端优化-Optimizing-Mobile-Performance" class="headerlink" title="36. 移动端优化(Optimizing Mobile Performance)"></a>36. 移动端优化(Optimizing Mobile Performance)</h2><ul><li><a href="https://github.com/ftlabs/fastclick" target="_blank" rel="noopener">FastClick - 处理移动端 click 事件 300 毫秒延迟</a></li><li><a href="https://github.com/filamentgroup/tappy/" target="_blank" rel="noopener">tappy</a></li><li><a href="https://github.com/dave1010/jquery-fast-click" target="_blank" rel="noopener">jquery-fast-click</a></li></ul><h2 id="37-HTTP请求相关"><a href="#37-HTTP请求相关" class="headerlink" title="37. HTTP请求相关"></a>37. HTTP请求相关</h2><ul><li><a href="https://github.com/nodeca/pako" target="_blank" rel="noopener">pako - HTTP 请求正文压缩</a><ul><li><a href="https://imququ.com/post/how-to-compress-http-request-body.html" target="_blank" rel="noopener">参考阅读: 如何压缩 HTTP 请求正文</a></li><li><a href="https://qgy18.com/request-compress/" target="_blank" rel="noopener">HTTP 请求正文压缩 DEMO</a></li></ul></li></ul><h2 id="38-下载组件"><a href="#38-下载组件" class="headerlink" title="38. 下载组件"></a>38. 下载组件</h2><ul><li><a href="https://github.com/rndme/download" target="_blank" rel="noopener">download</a></li><li><a href="https://github.com/dcneiner/Downloadify" target="_blank" rel="noopener">Downloadify</a></li></ul><h2 id="39-加密-转码"><a href="#39-加密-转码" class="headerlink" title="39. 加密/转码"></a>39. 加密/转码</h2><ul><li><a href="https://github.com/brix/crypto-js" target="_blank" rel="noopener">crypto-js</a> - JavaScript library of crypto standards.</li><li><a href="https://github.com/alizain/ulid" target="_blank" rel="noopener">ulid</a> - 生成UUID类库</li><li><a href="http://www.ohdave.com/rsa/" target="_blank" rel="noopener">RSA in JavaScript - 用RSA加密实现Web数据加密传输</a></li></ul><h2 id="40-调试"><a href="#40-调试" class="headerlink" title="40. 调试"></a>40. 调试</h2><ul><li><a href="https://github.com/visionmedia/debug" target="_blank" rel="noopener">debug</a> - A tiny JavaScript debugging utility modelled after Node.js core’s debugging technique. Works in Node.js and web browsers</li><li><a href="https://github.com/WechatFE/vConsole" target="_blank" rel="noopener">vConsole - 一个针对手机网页的前端 console 调试面板</a></li></ul><h2 id="41-实用工具-其他插件"><a href="#41-实用工具-其他插件" class="headerlink" title="41. 实用工具/其他插件"></a>41. 实用工具/其他插件</h2><ul><li><a href="https://github.com/carhartl/jquery-cookie" target="_blank" rel="noopener">jquery-cookie</a></li><li><a href="https://github.com/js-cookie/js-cookie" target="_blank" rel="noopener">JavaScript Cookie</a></li><li><a href="https://github.com/dieulot/instantclick/" target="_blank" rel="noopener">InstantClick - 预加载用户可能会点击的一些链接</a></li><li><a href="https://github.com/caolan/async" target="_blank" rel="noopener">Async.js - 异步操作</a></li><li><a href="https://github.com/jeromeetienne/jquery-qrcode" target="_blank" rel="noopener">jquery.qrcode.js - 生成二维码的 jQuery 插件</a></li><li><a href="https://github.com/davidshimjs/qrcodejs" target="_blank" rel="noopener">qrcodejs - JS生成QRCode的库</a></li><li><a href="https://github.com/platform45/nakedpassword" target="_blank" rel="noopener">nakedpassword - 用脱衣女帮助检测密码强度</a></li><li><a href="https://github.com/fex-team/kityminder" target="_blank" rel="noopener">KityMinder - 脑图编辑工具</a></li><li><a href="https://github.com/patrickkunka/mixitup" target="_blank" rel="noopener">MixitUp - 动画过滤和排序</a></li><li><a href="https://github.com/peachananr/tip_cards" target="_blank" rel="noopener">JQuery Tip Cards - 创建卡片交互的cards布局</a></li><li><a href="https://github.com/dolox/fallback/" target="_blank" rel="noopener">Fallback.js - JavaScript library for dynamically loading CSS and JS files.</a></li><li><a href="https://github.com/swfobject/swfobject" target="_blank" rel="noopener">swfobject</a></li><li><a href="https://github.com/padolsey-archive/prettyprint.js" target="_blank" rel="noopener">prettyprint.js - An in-browser JavaScript variable dumper</a></li><li><a href="https://github.com/HubSpot/shepherd" target="_blank" rel="noopener">Shepherd - 为应用创建用户指南</a></li><li><a href="https://github.com/mark-rolich/RulersGuides.js" target="_blank" rel="noopener">RulersGuide.js - 类似PhotoShop标尺的js库</a></li><li><a href="https://github.com/marmelab/gremlins.js" target="_blank" rel="noopener">Gremlins.js - Monkey 测试库</a></li><li><a href="https://github.com/ndreckshage/roughdraft.js/" target="_blank" rel="noopener">RoughDraft.js - 简单快速的创建交互式的 HTML 模型的原型工具</a></li><li><a href="https://github.com/ejci/favico.js" target="_blank" rel="noopener">favico.js - 动态改变浏览器标签栏中的网站图标</a></li><li><a href="https://github.com/tracelytics/pageguide" target="_blank" rel="noopener">pageguide - 网页向导</a></li><li><a href="https://github.com/kpdecker/jsdiff" target="_blank" rel="noopener">jsdiff - js diff 算法</a></li></ul><h1 id="ES6-ECMAScript-2015"><a href="#ES6-ECMAScript-2015" class="headerlink" title="ES6( ECMAScript 2015 )"></a>ES6( ECMAScript 2015 )</h1><h2 id="ES6转码器-ES6-to-ES5"><a href="#ES6转码器-ES6-to-ES5" class="headerlink" title="ES6转码器(ES6 to ES5)"></a>ES6转码器(ES6 to ES5)</h2><ul><li><a href="https://github.com/babel/babel/" target="_blank" rel="noopener">Babel</a> - 一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行</li><li><a href="https://github.com/babel/babelify" target="_blank" rel="noopener">babelify</a> - 将babel引入到Gulp, Grunt, npm run等构建过程</li><li><a href="https://github.com/google/traceur-compiler" target="_blank" rel="noopener">traceur-compiler</a> - Traceur is a JavaScript.next-to-JavaScript-of-today compiler</li></ul><h2 id="ES6入门"><a href="#ES6入门" class="headerlink" title="ES6入门"></a>ES6入门</h2><ul><li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6入门</a> - 阮一峰老师的开源的JavaScript语言教程</li><li><a href="https://babeljs.io/docs/learn-es2015/" target="_blank" rel="noopener">Learn ES2015</a></li><li><a href="http://es6-features.org/" target="_blank" rel="noopener">ES6 - New features Overview &amp; Comparison</a></li><li><a href="https://ponyfoo.com/articles/es6" target="_blank" rel="noopener">ES6 Overview in 350 Bullet Points</a></li><li><a href="https://github.com/lukehoban/es6features" target="_blank" rel="noopener">es6features</a></li></ul><h1 id="设计模式-JavaScript-Patterns"><a href="#设计模式-JavaScript-Patterns" class="headerlink" title="设计模式( JavaScript Patterns )"></a>设计模式( JavaScript Patterns )</h1><ul><li><a href="https://github.com/shichuan/javascript-patterns" target="_blank" rel="noopener">javascript-patterns</a></li><li><a href="https://github.com/jquery-boilerplate/jquery-patterns" target="_blank" rel="noopener">jquery-patterns - A variety of jQuery plugin patterns</a></li><li><a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/" target="_blank" rel="noopener">Learning JavaScript Design Patterns</a></li></ul><h1 id="在线工具-Online-Tools"><a href="#在线工具-Online-Tools" class="headerlink" title="在线工具( Online Tools )"></a>在线工具( Online Tools )</h1><ul><li><a href="http://jsbin.com" target="_blank" rel="noopener">jsbin - Collaborative JavaScript Debugging App</a><ul><li><a href="https://github.com/jsbin/jsbin" target="_blank" rel="noopener">jsbin@Github</a></li></ul></li><li><a href="http://jsfiddle.net/" target="_blank" rel="noopener">jsfiddle</a></li><li><a href="http://jsbeautifier.org/" target="_blank" rel="noopener">jsbeautifier - Online JavaScript beautifier</a></li><li><a href="http://resume.github.io" target="_blank" rel="noopener">resume.github.com</a></li></ul><h1 id="前端开发工具"><a href="#前端开发工具" class="headerlink" title="前端开发工具"></a>前端开发工具</h1><h2 id="1-开发工具"><a href="#1-开发工具" class="headerlink" title="1. 开发工具"></a>1. 开发工具</h2><ul><li><a href="http://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text</a></li></ul><h2 id="2-调试工具"><a href="#2-调试工具" class="headerlink" title="2. 调试工具"></a>2. 调试工具</h2><ul><li><a href="http://www.telerik.com/fiddler" target="_blank" rel="noopener">Fiddler</a></li><li><a href="http://people.apache.org/~pmuellr/weinre-docs/latest/Home.html" target="_blank" rel="noopener">Weinre</a></li><li><a href="http://www.alloyteam.com/2012/05/web-front-end-tool-rythem-1/" target="_blank" rel="noopener">Rythem</a></li><li><a href="https://github.com/zmoazeni/csscss" target="_blank" rel="noopener">csscss - 用于检查css代码冗余</a></li><li><a href="http://fecs.baidu.com/" target="_blank" rel="noopener">FECS - 基于 Node.js 的前端代码检查工具</a></li><li><a href="https://github.com/typicode/json-server" target="_blank" rel="noopener">JSON Server - 模拟 API</a></li><li><a href="https://github.com/swagger-api/swagger-ui" target="_blank" rel="noopener">swagger-ui - 基于REST的API测试/文档</a></li></ul><h2 id="3-模拟数据-Fake"><a href="#3-模拟数据-Fake" class="headerlink" title="3. 模拟数据( Fake )"></a>3. 模拟数据( Fake )</h2><ul><li><a href="http://jsonplaceholder.typicode.com/" target="_blank" rel="noopener">JSONPlaceholder</a></li><li><a href="https://github.com/typicode/json-server" target="_blank" rel="noopener">json-server - Get a full fake REST API</a></li><li><a href="https://github.com/typicode/lowdb" target="_blank" rel="noopener">lowdb -  A small local JSON database powered by lodash</a></li><li><a href="https://github.com/nuysoft/Mock" target="_blank" rel="noopener">Mock.js</a> - 一款模拟数据生成器，旨在帮助前端攻城师独立于后端进行开发，帮助编写单元测试</li></ul><h2 id="4-接口管理"><a href="#4-接口管理" class="headerlink" title="4. 接口管理"></a>4. 接口管理</h2><ul><li><a href="https://github.com/thx/RAP" target="_blank" rel="noopener">RAP</a> - Web接口管理工具，开源免费，接口自动化，MOCK数据自动生成，自动化测试，企业级管理</li></ul><h2 id="5-浏览器扩展-Chrome-Extensions"><a href="#5-浏览器扩展-Chrome-Extensions" class="headerlink" title="5. 浏览器扩展(Chrome Extensions)"></a>5. 浏览器扩展(Chrome Extensions)</h2><ul><li><a href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm" target="_blank" rel="noopener">Postman - REST Client</a></li><li><a href="http://welefen.github.io/Fiddler/" target="_blank" rel="noopener">Fiddler - Fiddler for Chrome Extension</a></li><li><a href="https://chrome.google.com/webstore/detail/web%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8Bfehelper/pkgccpejnmalmdinmhkkfafefagiiiad" target="_blank" rel="noopener">WEB前端助手(FeHelper)</a></li><li><a href="https://chrome.google.com/webstore/detail/web-developer/bfbameneiokkgbdmiekhjnmfkcnldhhm" target="_blank" rel="noopener">Web Developer</a></li><li><a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg" target="_blank" rel="noopener">Wappalyzer - 分析网站应用的技术栈</a></li><li><a href="https://chrome.google.com/webstore/detail/http-status/cknfnacbckhfpjahnmkblajcpledpfnp/related" target="_blank" rel="noopener">HTTP Status</a></li><li><a href="https://chrome.google.com/webstore/detail/chrome-logger/noaneddfkdjfnfdakjjmocngnfkfehhd" target="_blank" rel="noopener">Chrome Logger</a></li><li><a href="https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp" target="_blank" rel="noopener">ColorZilla</a></li><li><a href="https://chrome.google.com/webstore/detail/colorpick-eyedropper/ohcpnigalekghcmgcdcenkpelffpdolg?hl=en" target="_blank" rel="noopener">ColorPick Eyedropper</a></li><li><a href="https://chrome.google.com/webstore/detail/code-cola/lomkpheldlbkkfiifcbfifipaofnmnkn" target="_blank" rel="noopener">Code Cola</a></li><li><a href="https://chrome.google.com/webstore/detail/1px/gebccnmciopflhcdihopmphapifkkfdh" target="_blank" rel="noopener">1px</a></li><li><a href="https://chrome.google.com/webstore/detail/alloydesigner/ojooeaohlmgpcjajikhmibcnbebfenid" target="_blank" rel="noopener">AlloyDesigner - 前端重构开发辅助工具</a></li><li><a href="https://chrome.google.com/webstore/detail/fontface-ninja/eljapbgkmlngdpckoiiibecpemleclhh" target="_blank" rel="noopener">Fontface Ninja</a></li><li><a href="https://chrome.google.com/webstore/detail/pagespeed-insights-by-goo/gplegfbjlmmehdoakndmohflojccocli" target="_blank" rel="noopener">PageSpeed Insights (by Google)</a></li><li><a href="https://chrome.google.com/webstore/detail/redirect-path/aomidfkchockcldhbkggjokdkkebmdll/related" target="_blank" rel="noopener">Redirect Path</a></li><li><a href="https://chrome.google.com/webstore/detail/responsive-web-design-tes/objclahbaimlfnbjdeobicmmlnbhamkg?hl=en" target="_blank" rel="noopener">Responsive Web Design Tester</a></li><li><a href="https://chrome.google.com/webstore/detail/window-resizer/kkelicaakdanhinjdeammmilcgefonfh?hl=en" target="_blank" rel="noopener">Window Resizer</a></li><li><a href="https://chrome.google.com/webstore/detail/cssviewer/ggfgijbpiheegefliciemofobhmofgce?hl=en" target="_blank" rel="noopener">CSSViewer</a></li><li><a href="https://chrome.google.com/webstore/detail/ie-tab/hehijbfgiekmjfkfjpbkbammjbdenadd?hl=en" target="_blank" rel="noopener">IE Tab</a></li><li><a href="https://chrome.google.com/webstore/detail/clear-cache/cppjkneekbjaeellbfkmgnhonkkjfpdn?hl=en" target="_blank" rel="noopener">Clear Cache</a></li><li><a href="https://chrome.google.com/webstore/detail/clear-cache/cppjkneekbjaeellbfkmgnhonkkjfpdn/related?hl=en" target="_blank" rel="noopener">JSONView</a></li><li><a href="https://chrome.google.com/webstore/detail/image-downloader/cnpniohnfphhjihaiiggeabnkjhpaldj" target="_blank" rel="noopener">Image Downloader</a></li><li><a href="https://chrome.google.com/webstore/detail/pretty-beautiful-javascri/piekbefgpgdecckjcpffhnacjflfoddg/related?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">Pretty Beautiful Javascript - 可以自动格式化混淆的js文件</a></li><li><a href="https://chrome.google.com/webstore/detail/javascript-errors-notifie/jafmfknfnkoekkdocjiaipcnmkklaajd?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">JavaScript Errors Notifier</a></li><li><a href="https://chrome.google.com/webstore/detail/css-diff/pefnhibkhcfooofgmgoipfpcojnhhljm/related" target="_blank" rel="noopener">CSS Diff - 在线比对页面上两个元素的CSS样式差异</a></li><li><a href="https://chrome.google.com/webstore/detail/whatfont/jabopobgcpjmedljpbcaablpmlmfcogm" target="_blank" rel="noopener">WhatFont- 识别网页所使用的字体</a></li></ul><h1 id="前端参考集"><a href="#前端参考集" class="headerlink" title="前端参考集"></a>前端参考集</h1><ul><li><a href="https://github.com/bendc/frontend-guidelines" target="_blank" rel="noopener">frontend-guidelines - Some HTML, CSS and JS best practices.</a></li><li><a href="https://github.com/dypsilon/frontend-dev-bookmarks" target="_blank" rel="noopener">frontend-dev-bookmarks</a></li><li><a href="https://github.com/codrops" target="_blank" rel="noopener">Codrops - Useful resources</a></li><li><a href="http://isobar-idev.github.io/code-standards/" target="_blank" rel="noopener">Front-end Code Standards &amp; Best Practices</a></li><li><a href="https://github.com/wwsun/awesome-javascript" target="_blank" rel="noopener">awesome-javascript</a></li><li><a href="https://github.com/nicejade/Front-end-tutorial" target="_blank" rel="noopener">Front-end-tutorial - 前端涉及的所有知识体系</a></li><li><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">awesome-vue</a></li><li>前端编码规范( Standard Style ) <ul><li><a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">Airbnb 的 JavaScript 编码规范</a></li><li><a href="https://github.com/feross/standard" target="_blank" rel="noopener">JavaScript Standard Style</a></li><li><a href="https://github.com/ryanmcdermott/clean-code-javascript" target="_blank" rel="noopener">clean-code-javascript - javascript 编码风格指南</a></li><li><a href="https://github.com/ecomfe/spec/" target="_blank" rel="noopener">spec</a> -  百度前端团队代码规范</li></ul></li><li><a href="https://github.com/joshbuchea/head" target="_blank" rel="noopener"><head> cheatsheet -  <head> 标签的内容清单</head></head></a></li><li><a href="https://github.com/thedaviddias/Front-End-Checklist" target="_blank" rel="noopener">Front-End-Checklist</a> - The perfect Front-End Checklist for modern websites and meticulous developers <a href="http://frontendchecklist.com" target="_blank" rel="noopener">http://frontendchecklist.com</a></li><li><a href="https://github.com/Chalarangelo/30-seconds-of-code" target="_blank" rel="noopener">30-seconds-of-code</a></li><li><a href="https://github.com/atomiks/30-seconds-of-css" target="_blank" rel="noopener">30-seconds-of-css</a></li><li><a href="https://github.com/elsewhencode/project-guidelines/blob/master/README-zh.md" target="_blank" rel="noopener">project-guidelines</a> - JavaScript工程项目的一系列最佳实践策略</li><li><a href="http://sangka-z.com/react-in-patterns-cn/" target="_blank" rel="noopener">react-in-patterns</a> - React 模式</li><li><a href="https://github.com/SangKa/PWA-Book-CN/" target="_blank" rel="noopener">PWA-Book-CN</a> - Progressive Web Apps (PWA) 中文版</li><li><a href="https://github.com/trekhleb/javascript-algorithms/blob/master/README.zh-CN.md" target="_blank" rel="noopener">javascript-algorithms</a> - JavaScript 算法与数据结构</li></ul><h1 id="书籍-Frontend-related-Books"><a href="#书籍-Frontend-related-Books" class="headerlink" title="书籍( Frontend-related Books )"></a>书籍( Frontend-related Books )</h1><ul><li><a href="https://www.frontendhandbook.com/index.html" target="_blank" rel="noopener">Front-End Developer Handbook 2016</a></li><li><a href="https://frontendmasters.com/books/front-end-handbook/2017/" target="_blank" rel="noopener">Front-End Developer Handbook 2017</a></li><li><a href="https://frontendmasters.com/books/front-end-handbook/2018/" target="_blank" rel="noopener">Front-End Developer Handbook 2018</a></li><li><a href="https://leohxj.gitbooks.io/front-end-database/content/" target="_blank" rel="noopener">前端工程师手册</a></li><li><a href="https://dwqs.gitbooks.io/frontenddevhandbook/content/" target="_blank" rel="noopener">前端工程师手册</a> - 包括前端开发实践、学习前端开发、前端开发工具</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前端组件库&quot;&gt;&lt;a href=&quot;#前端组件库&quot; class=&quot;headerlink&quot; title=&quot;前端组件库&quot;&gt;&lt;/a&gt;前端组件库&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;搭建web app常用的样式/组件等收集列表(移动优先)&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
      <category term="技术文档" scheme="https://syhyz1990.github.io/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
  </entry>
  
</feed>
